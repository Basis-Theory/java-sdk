/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ThreeDsSession.Builder.class)
public final class ThreeDsSession {
    private final Optional<String> id;

    private final Optional<String> type;

    private final Optional<String> tenantId;

    private final Optional<String> panTokenId;

    private final Optional<String> tokenId;

    private final Optional<String> tokenIntentId;

    private final Optional<String> cardBrand;

    private final Optional<OffsetDateTime> expirationDate;

    private final Optional<OffsetDateTime> createdDate;

    private final Optional<String> createdBy;

    private final Optional<OffsetDateTime> modifiedDate;

    private final Optional<String> modifiedBy;

    private final Optional<String> device;

    private final Optional<ThreeDsDeviceInfo> deviceInfo;

    private final Optional<String> webChallengeMode;

    private final Optional<ThreeDsVersion> version;

    private final Optional<ThreeDsMethod> method;

    private final Optional<ThreeDsAuthentication> authentication;

    private final Map<String, Object> additionalProperties;

    private ThreeDsSession(
            Optional<String> id,
            Optional<String> type,
            Optional<String> tenantId,
            Optional<String> panTokenId,
            Optional<String> tokenId,
            Optional<String> tokenIntentId,
            Optional<String> cardBrand,
            Optional<OffsetDateTime> expirationDate,
            Optional<OffsetDateTime> createdDate,
            Optional<String> createdBy,
            Optional<OffsetDateTime> modifiedDate,
            Optional<String> modifiedBy,
            Optional<String> device,
            Optional<ThreeDsDeviceInfo> deviceInfo,
            Optional<String> webChallengeMode,
            Optional<ThreeDsVersion> version,
            Optional<ThreeDsMethod> method,
            Optional<ThreeDsAuthentication> authentication,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.type = type;
        this.tenantId = tenantId;
        this.panTokenId = panTokenId;
        this.tokenId = tokenId;
        this.tokenIntentId = tokenIntentId;
        this.cardBrand = cardBrand;
        this.expirationDate = expirationDate;
        this.createdDate = createdDate;
        this.createdBy = createdBy;
        this.modifiedDate = modifiedDate;
        this.modifiedBy = modifiedBy;
        this.device = device;
        this.deviceInfo = deviceInfo;
        this.webChallengeMode = webChallengeMode;
        this.version = version;
        this.method = method;
        this.authentication = authentication;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    @JsonProperty("tenant_id")
    public Optional<String> getTenantId() {
        return tenantId;
    }

    @JsonProperty("pan_token_id")
    public Optional<String> getPanTokenId() {
        return panTokenId;
    }

    @JsonProperty("token_id")
    public Optional<String> getTokenId() {
        return tokenId;
    }

    @JsonProperty("token_intent_id")
    public Optional<String> getTokenIntentId() {
        return tokenIntentId;
    }

    @JsonProperty("card_brand")
    public Optional<String> getCardBrand() {
        return cardBrand;
    }

    @JsonProperty("expiration_date")
    public Optional<OffsetDateTime> getExpirationDate() {
        return expirationDate;
    }

    @JsonProperty("created_date")
    public Optional<OffsetDateTime> getCreatedDate() {
        return createdDate;
    }

    @JsonProperty("created_by")
    public Optional<String> getCreatedBy() {
        return createdBy;
    }

    @JsonProperty("modified_date")
    public Optional<OffsetDateTime> getModifiedDate() {
        return modifiedDate;
    }

    @JsonProperty("modified_by")
    public Optional<String> getModifiedBy() {
        return modifiedBy;
    }

    @JsonProperty("device")
    public Optional<String> getDevice() {
        return device;
    }

    @JsonProperty("device_info")
    public Optional<ThreeDsDeviceInfo> getDeviceInfo() {
        return deviceInfo;
    }

    @JsonProperty("web_challenge_mode")
    public Optional<String> getWebChallengeMode() {
        return webChallengeMode;
    }

    @JsonProperty("version")
    public Optional<ThreeDsVersion> getVersion() {
        return version;
    }

    @JsonProperty("method")
    public Optional<ThreeDsMethod> getMethod() {
        return method;
    }

    @JsonProperty("authentication")
    public Optional<ThreeDsAuthentication> getAuthentication() {
        return authentication;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ThreeDsSession && equalTo((ThreeDsSession) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ThreeDsSession other) {
        return id.equals(other.id)
                && type.equals(other.type)
                && tenantId.equals(other.tenantId)
                && panTokenId.equals(other.panTokenId)
                && tokenId.equals(other.tokenId)
                && tokenIntentId.equals(other.tokenIntentId)
                && cardBrand.equals(other.cardBrand)
                && expirationDate.equals(other.expirationDate)
                && createdDate.equals(other.createdDate)
                && createdBy.equals(other.createdBy)
                && modifiedDate.equals(other.modifiedDate)
                && modifiedBy.equals(other.modifiedBy)
                && device.equals(other.device)
                && deviceInfo.equals(other.deviceInfo)
                && webChallengeMode.equals(other.webChallengeMode)
                && version.equals(other.version)
                && method.equals(other.method)
                && authentication.equals(other.authentication);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.type,
                this.tenantId,
                this.panTokenId,
                this.tokenId,
                this.tokenIntentId,
                this.cardBrand,
                this.expirationDate,
                this.createdDate,
                this.createdBy,
                this.modifiedDate,
                this.modifiedBy,
                this.device,
                this.deviceInfo,
                this.webChallengeMode,
                this.version,
                this.method,
                this.authentication);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> type = Optional.empty();

        private Optional<String> tenantId = Optional.empty();

        private Optional<String> panTokenId = Optional.empty();

        private Optional<String> tokenId = Optional.empty();

        private Optional<String> tokenIntentId = Optional.empty();

        private Optional<String> cardBrand = Optional.empty();

        private Optional<OffsetDateTime> expirationDate = Optional.empty();

        private Optional<OffsetDateTime> createdDate = Optional.empty();

        private Optional<String> createdBy = Optional.empty();

        private Optional<OffsetDateTime> modifiedDate = Optional.empty();

        private Optional<String> modifiedBy = Optional.empty();

        private Optional<String> device = Optional.empty();

        private Optional<ThreeDsDeviceInfo> deviceInfo = Optional.empty();

        private Optional<String> webChallengeMode = Optional.empty();

        private Optional<ThreeDsVersion> version = Optional.empty();

        private Optional<ThreeDsMethod> method = Optional.empty();

        private Optional<ThreeDsAuthentication> authentication = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ThreeDsSession other) {
            id(other.getId());
            type(other.getType());
            tenantId(other.getTenantId());
            panTokenId(other.getPanTokenId());
            tokenId(other.getTokenId());
            tokenIntentId(other.getTokenIntentId());
            cardBrand(other.getCardBrand());
            expirationDate(other.getExpirationDate());
            createdDate(other.getCreatedDate());
            createdBy(other.getCreatedBy());
            modifiedDate(other.getModifiedDate());
            modifiedBy(other.getModifiedBy());
            device(other.getDevice());
            deviceInfo(other.getDeviceInfo());
            webChallengeMode(other.getWebChallengeMode());
            version(other.getVersion());
            method(other.getMethod());
            authentication(other.getAuthentication());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        @JsonSetter(value = "tenant_id", nulls = Nulls.SKIP)
        public Builder tenantId(Optional<String> tenantId) {
            this.tenantId = tenantId;
            return this;
        }

        public Builder tenantId(String tenantId) {
            this.tenantId = Optional.ofNullable(tenantId);
            return this;
        }

        @JsonSetter(value = "pan_token_id", nulls = Nulls.SKIP)
        public Builder panTokenId(Optional<String> panTokenId) {
            this.panTokenId = panTokenId;
            return this;
        }

        public Builder panTokenId(String panTokenId) {
            this.panTokenId = Optional.ofNullable(panTokenId);
            return this;
        }

        @JsonSetter(value = "token_id", nulls = Nulls.SKIP)
        public Builder tokenId(Optional<String> tokenId) {
            this.tokenId = tokenId;
            return this;
        }

        public Builder tokenId(String tokenId) {
            this.tokenId = Optional.ofNullable(tokenId);
            return this;
        }

        @JsonSetter(value = "token_intent_id", nulls = Nulls.SKIP)
        public Builder tokenIntentId(Optional<String> tokenIntentId) {
            this.tokenIntentId = tokenIntentId;
            return this;
        }

        public Builder tokenIntentId(String tokenIntentId) {
            this.tokenIntentId = Optional.ofNullable(tokenIntentId);
            return this;
        }

        @JsonSetter(value = "card_brand", nulls = Nulls.SKIP)
        public Builder cardBrand(Optional<String> cardBrand) {
            this.cardBrand = cardBrand;
            return this;
        }

        public Builder cardBrand(String cardBrand) {
            this.cardBrand = Optional.ofNullable(cardBrand);
            return this;
        }

        @JsonSetter(value = "expiration_date", nulls = Nulls.SKIP)
        public Builder expirationDate(Optional<OffsetDateTime> expirationDate) {
            this.expirationDate = expirationDate;
            return this;
        }

        public Builder expirationDate(OffsetDateTime expirationDate) {
            this.expirationDate = Optional.ofNullable(expirationDate);
            return this;
        }

        @JsonSetter(value = "created_date", nulls = Nulls.SKIP)
        public Builder createdDate(Optional<OffsetDateTime> createdDate) {
            this.createdDate = createdDate;
            return this;
        }

        public Builder createdDate(OffsetDateTime createdDate) {
            this.createdDate = Optional.ofNullable(createdDate);
            return this;
        }

        @JsonSetter(value = "created_by", nulls = Nulls.SKIP)
        public Builder createdBy(Optional<String> createdBy) {
            this.createdBy = createdBy;
            return this;
        }

        public Builder createdBy(String createdBy) {
            this.createdBy = Optional.ofNullable(createdBy);
            return this;
        }

        @JsonSetter(value = "modified_date", nulls = Nulls.SKIP)
        public Builder modifiedDate(Optional<OffsetDateTime> modifiedDate) {
            this.modifiedDate = modifiedDate;
            return this;
        }

        public Builder modifiedDate(OffsetDateTime modifiedDate) {
            this.modifiedDate = Optional.ofNullable(modifiedDate);
            return this;
        }

        @JsonSetter(value = "modified_by", nulls = Nulls.SKIP)
        public Builder modifiedBy(Optional<String> modifiedBy) {
            this.modifiedBy = modifiedBy;
            return this;
        }

        public Builder modifiedBy(String modifiedBy) {
            this.modifiedBy = Optional.ofNullable(modifiedBy);
            return this;
        }

        @JsonSetter(value = "device", nulls = Nulls.SKIP)
        public Builder device(Optional<String> device) {
            this.device = device;
            return this;
        }

        public Builder device(String device) {
            this.device = Optional.ofNullable(device);
            return this;
        }

        @JsonSetter(value = "device_info", nulls = Nulls.SKIP)
        public Builder deviceInfo(Optional<ThreeDsDeviceInfo> deviceInfo) {
            this.deviceInfo = deviceInfo;
            return this;
        }

        public Builder deviceInfo(ThreeDsDeviceInfo deviceInfo) {
            this.deviceInfo = Optional.ofNullable(deviceInfo);
            return this;
        }

        @JsonSetter(value = "web_challenge_mode", nulls = Nulls.SKIP)
        public Builder webChallengeMode(Optional<String> webChallengeMode) {
            this.webChallengeMode = webChallengeMode;
            return this;
        }

        public Builder webChallengeMode(String webChallengeMode) {
            this.webChallengeMode = Optional.ofNullable(webChallengeMode);
            return this;
        }

        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public Builder version(Optional<ThreeDsVersion> version) {
            this.version = version;
            return this;
        }

        public Builder version(ThreeDsVersion version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        @JsonSetter(value = "method", nulls = Nulls.SKIP)
        public Builder method(Optional<ThreeDsMethod> method) {
            this.method = method;
            return this;
        }

        public Builder method(ThreeDsMethod method) {
            this.method = Optional.ofNullable(method);
            return this;
        }

        @JsonSetter(value = "authentication", nulls = Nulls.SKIP)
        public Builder authentication(Optional<ThreeDsAuthentication> authentication) {
            this.authentication = authentication;
            return this;
        }

        public Builder authentication(ThreeDsAuthentication authentication) {
            this.authentication = Optional.ofNullable(authentication);
            return this;
        }

        public ThreeDsSession build() {
            return new ThreeDsSession(
                    id,
                    type,
                    tenantId,
                    panTokenId,
                    tokenId,
                    tokenIntentId,
                    cardBrand,
                    expirationDate,
                    createdDate,
                    createdBy,
                    modifiedDate,
                    modifiedBy,
                    device,
                    deviceInfo,
                    webChallengeMode,
                    version,
                    method,
                    authentication,
                    additionalProperties);
        }
    }
}
