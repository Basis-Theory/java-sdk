/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetTokensV2.Builder.class)
public final class GetTokensV2 {
    private final Optional<String> type;

    private final Optional<String> container;

    private final Optional<String> fingerprint;

    private final Optional<Map<String, Optional<String>>> metadata;

    private final Optional<String> start;

    private final Optional<Integer> size;

    private final Map<String, Object> additionalProperties;

    private GetTokensV2(
            Optional<String> type,
            Optional<String> container,
            Optional<String> fingerprint,
            Optional<Map<String, Optional<String>>> metadata,
            Optional<String> start,
            Optional<Integer> size,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.container = container;
        this.fingerprint = fingerprint;
        this.metadata = metadata;
        this.start = start;
        this.size = size;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    @JsonProperty("container")
    public Optional<String> getContainer() {
        return container;
    }

    @JsonProperty("fingerprint")
    public Optional<String> getFingerprint() {
        return fingerprint;
    }

    @JsonProperty("metadata")
    public Optional<Map<String, Optional<String>>> getMetadata() {
        return metadata;
    }

    @JsonProperty("start")
    public Optional<String> getStart() {
        return start;
    }

    @JsonProperty("size")
    public Optional<Integer> getSize() {
        return size;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetTokensV2 && equalTo((GetTokensV2) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetTokensV2 other) {
        return type.equals(other.type)
                && container.equals(other.container)
                && fingerprint.equals(other.fingerprint)
                && metadata.equals(other.metadata)
                && start.equals(other.start)
                && size.equals(other.size);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.container, this.fingerprint, this.metadata, this.start, this.size);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> type = Optional.empty();

        private Optional<String> container = Optional.empty();

        private Optional<String> fingerprint = Optional.empty();

        private Optional<Map<String, Optional<String>>> metadata = Optional.empty();

        private Optional<String> start = Optional.empty();

        private Optional<Integer> size = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetTokensV2 other) {
            type(other.getType());
            container(other.getContainer());
            fingerprint(other.getFingerprint());
            metadata(other.getMetadata());
            start(other.getStart());
            size(other.getSize());
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        @JsonSetter(value = "container", nulls = Nulls.SKIP)
        public Builder container(Optional<String> container) {
            this.container = container;
            return this;
        }

        public Builder container(String container) {
            this.container = Optional.ofNullable(container);
            return this;
        }

        @JsonSetter(value = "fingerprint", nulls = Nulls.SKIP)
        public Builder fingerprint(Optional<String> fingerprint) {
            this.fingerprint = fingerprint;
            return this;
        }

        public Builder fingerprint(String fingerprint) {
            this.fingerprint = Optional.ofNullable(fingerprint);
            return this;
        }

        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<Map<String, Optional<String>>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(Map<String, Optional<String>> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        @JsonSetter(value = "start", nulls = Nulls.SKIP)
        public Builder start(Optional<String> start) {
            this.start = start;
            return this;
        }

        public Builder start(String start) {
            this.start = Optional.ofNullable(start);
            return this;
        }

        @JsonSetter(value = "size", nulls = Nulls.SKIP)
        public Builder size(Optional<Integer> size) {
            this.size = size;
            return this;
        }

        public Builder size(Integer size) {
            this.size = Optional.ofNullable(size);
            return this;
        }

        public GetTokensV2 build() {
            return new GetTokensV2(type, container, fingerprint, metadata, start, size, additionalProperties);
        }
    }
}
