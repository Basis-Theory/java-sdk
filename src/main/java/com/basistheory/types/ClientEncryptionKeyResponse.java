/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ClientEncryptionKeyResponse.Builder.class)
public final class ClientEncryptionKeyResponse {
    private final Optional<String> keyId;

    private final Optional<String> publicKeyPem;

    private final Optional<OffsetDateTime> expiresAt;

    private final Map<String, Object> additionalProperties;

    private ClientEncryptionKeyResponse(
            Optional<String> keyId,
            Optional<String> publicKeyPem,
            Optional<OffsetDateTime> expiresAt,
            Map<String, Object> additionalProperties) {
        this.keyId = keyId;
        this.publicKeyPem = publicKeyPem;
        this.expiresAt = expiresAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("key_id")
    public Optional<String> getKeyId() {
        return keyId;
    }

    @JsonProperty("public_key_pem")
    public Optional<String> getPublicKeyPem() {
        return publicKeyPem;
    }

    @JsonProperty("expires_at")
    public Optional<OffsetDateTime> getExpiresAt() {
        return expiresAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientEncryptionKeyResponse && equalTo((ClientEncryptionKeyResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientEncryptionKeyResponse other) {
        return keyId.equals(other.keyId)
                && publicKeyPem.equals(other.publicKeyPem)
                && expiresAt.equals(other.expiresAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.keyId, this.publicKeyPem, this.expiresAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> keyId = Optional.empty();

        private Optional<String> publicKeyPem = Optional.empty();

        private Optional<OffsetDateTime> expiresAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ClientEncryptionKeyResponse other) {
            keyId(other.getKeyId());
            publicKeyPem(other.getPublicKeyPem());
            expiresAt(other.getExpiresAt());
            return this;
        }

        @JsonSetter(value = "key_id", nulls = Nulls.SKIP)
        public Builder keyId(Optional<String> keyId) {
            this.keyId = keyId;
            return this;
        }

        public Builder keyId(String keyId) {
            this.keyId = Optional.ofNullable(keyId);
            return this;
        }

        @JsonSetter(value = "public_key_pem", nulls = Nulls.SKIP)
        public Builder publicKeyPem(Optional<String> publicKeyPem) {
            this.publicKeyPem = publicKeyPem;
            return this;
        }

        public Builder publicKeyPem(String publicKeyPem) {
            this.publicKeyPem = Optional.ofNullable(publicKeyPem);
            return this;
        }

        @JsonSetter(value = "expires_at", nulls = Nulls.SKIP)
        public Builder expiresAt(Optional<OffsetDateTime> expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        public Builder expiresAt(OffsetDateTime expiresAt) {
            this.expiresAt = Optional.ofNullable(expiresAt);
            return this;
        }

        public ClientEncryptionKeyResponse build() {
            return new ClientEncryptionKeyResponse(keyId, publicKeyPem, expiresAt, additionalProperties);
        }
    }
}
