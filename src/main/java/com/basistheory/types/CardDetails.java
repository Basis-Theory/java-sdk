/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CardDetails.Builder.class)
public final class CardDetails {
    private final Optional<String> bin;

    private final Optional<String> last4;

    private final Optional<Integer> expirationMonth;

    private final Optional<Integer> expirationYear;

    private final Optional<String> brand;

    private final Optional<String> funding;

    private final Optional<String> authentication;

    private final Optional<List<AdditionalCardDetails>> additional;

    private final Map<String, Object> additionalProperties;

    private CardDetails(
            Optional<String> bin,
            Optional<String> last4,
            Optional<Integer> expirationMonth,
            Optional<Integer> expirationYear,
            Optional<String> brand,
            Optional<String> funding,
            Optional<String> authentication,
            Optional<List<AdditionalCardDetails>> additional,
            Map<String, Object> additionalProperties) {
        this.bin = bin;
        this.last4 = last4;
        this.expirationMonth = expirationMonth;
        this.expirationYear = expirationYear;
        this.brand = brand;
        this.funding = funding;
        this.authentication = authentication;
        this.additional = additional;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("bin")
    public Optional<String> getBin() {
        return bin;
    }

    @JsonProperty("last4")
    public Optional<String> getLast4() {
        return last4;
    }

    @JsonProperty("expiration_month")
    public Optional<Integer> getExpirationMonth() {
        return expirationMonth;
    }

    @JsonProperty("expiration_year")
    public Optional<Integer> getExpirationYear() {
        return expirationYear;
    }

    @JsonProperty("brand")
    public Optional<String> getBrand() {
        return brand;
    }

    @JsonProperty("funding")
    public Optional<String> getFunding() {
        return funding;
    }

    @JsonProperty("authentication")
    public Optional<String> getAuthentication() {
        return authentication;
    }

    @JsonProperty("additional")
    public Optional<List<AdditionalCardDetails>> getAdditional() {
        return additional;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CardDetails && equalTo((CardDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CardDetails other) {
        return bin.equals(other.bin)
                && last4.equals(other.last4)
                && expirationMonth.equals(other.expirationMonth)
                && expirationYear.equals(other.expirationYear)
                && brand.equals(other.brand)
                && funding.equals(other.funding)
                && authentication.equals(other.authentication)
                && additional.equals(other.additional);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.bin,
                this.last4,
                this.expirationMonth,
                this.expirationYear,
                this.brand,
                this.funding,
                this.authentication,
                this.additional);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> bin = Optional.empty();

        private Optional<String> last4 = Optional.empty();

        private Optional<Integer> expirationMonth = Optional.empty();

        private Optional<Integer> expirationYear = Optional.empty();

        private Optional<String> brand = Optional.empty();

        private Optional<String> funding = Optional.empty();

        private Optional<String> authentication = Optional.empty();

        private Optional<List<AdditionalCardDetails>> additional = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CardDetails other) {
            bin(other.getBin());
            last4(other.getLast4());
            expirationMonth(other.getExpirationMonth());
            expirationYear(other.getExpirationYear());
            brand(other.getBrand());
            funding(other.getFunding());
            authentication(other.getAuthentication());
            additional(other.getAdditional());
            return this;
        }

        @JsonSetter(value = "bin", nulls = Nulls.SKIP)
        public Builder bin(Optional<String> bin) {
            this.bin = bin;
            return this;
        }

        public Builder bin(String bin) {
            this.bin = Optional.ofNullable(bin);
            return this;
        }

        @JsonSetter(value = "last4", nulls = Nulls.SKIP)
        public Builder last4(Optional<String> last4) {
            this.last4 = last4;
            return this;
        }

        public Builder last4(String last4) {
            this.last4 = Optional.ofNullable(last4);
            return this;
        }

        @JsonSetter(value = "expiration_month", nulls = Nulls.SKIP)
        public Builder expirationMonth(Optional<Integer> expirationMonth) {
            this.expirationMonth = expirationMonth;
            return this;
        }

        public Builder expirationMonth(Integer expirationMonth) {
            this.expirationMonth = Optional.ofNullable(expirationMonth);
            return this;
        }

        @JsonSetter(value = "expiration_year", nulls = Nulls.SKIP)
        public Builder expirationYear(Optional<Integer> expirationYear) {
            this.expirationYear = expirationYear;
            return this;
        }

        public Builder expirationYear(Integer expirationYear) {
            this.expirationYear = Optional.ofNullable(expirationYear);
            return this;
        }

        @JsonSetter(value = "brand", nulls = Nulls.SKIP)
        public Builder brand(Optional<String> brand) {
            this.brand = brand;
            return this;
        }

        public Builder brand(String brand) {
            this.brand = Optional.ofNullable(brand);
            return this;
        }

        @JsonSetter(value = "funding", nulls = Nulls.SKIP)
        public Builder funding(Optional<String> funding) {
            this.funding = funding;
            return this;
        }

        public Builder funding(String funding) {
            this.funding = Optional.ofNullable(funding);
            return this;
        }

        @JsonSetter(value = "authentication", nulls = Nulls.SKIP)
        public Builder authentication(Optional<String> authentication) {
            this.authentication = authentication;
            return this;
        }

        public Builder authentication(String authentication) {
            this.authentication = Optional.ofNullable(authentication);
            return this;
        }

        @JsonSetter(value = "additional", nulls = Nulls.SKIP)
        public Builder additional(Optional<List<AdditionalCardDetails>> additional) {
            this.additional = additional;
            return this;
        }

        public Builder additional(List<AdditionalCardDetails> additional) {
            this.additional = Optional.ofNullable(additional);
            return this;
        }

        public CardDetails build() {
            return new CardDetails(
                    bin,
                    last4,
                    expirationMonth,
                    expirationYear,
                    brand,
                    funding,
                    authentication,
                    additional,
                    additionalProperties);
        }
    }
}
