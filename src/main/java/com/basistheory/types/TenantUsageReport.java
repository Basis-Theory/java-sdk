/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TenantUsageReport.Builder.class)
public final class TenantUsageReport {
    private final Optional<Long> totalTokens;

    private final Map<String, Object> additionalProperties;

    private TenantUsageReport(Optional<Long> totalTokens, Map<String, Object> additionalProperties) {
        this.totalTokens = totalTokens;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("total_tokens")
    public Optional<Long> getTotalTokens() {
        return totalTokens;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TenantUsageReport && equalTo((TenantUsageReport) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TenantUsageReport other) {
        return totalTokens.equals(other.totalTokens);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.totalTokens);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Long> totalTokens = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TenantUsageReport other) {
            totalTokens(other.getTotalTokens());
            return this;
        }

        @JsonSetter(value = "total_tokens", nulls = Nulls.SKIP)
        public Builder totalTokens(Optional<Long> totalTokens) {
            this.totalTokens = totalTokens;
            return this;
        }

        public Builder totalTokens(Long totalTokens) {
            this.totalTokens = Optional.ofNullable(totalTokens);
            return this;
        }

        public TenantUsageReport build() {
            return new TenantUsageReport(totalTokens, additionalProperties);
        }
    }
}
