/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TokenExtras.Builder.class)
public final class TokenExtras {
    private final Optional<Boolean> deduplicated;

    private final Optional<TokenServiceProviderDetails> tspDetails;

    private final Optional<String> deduplicationBehavior;

    private final Optional<List<String>> networkTokenIds;

    private final Optional<Boolean> decryptedPayload;

    private final Map<String, Object> additionalProperties;

    private TokenExtras(
            Optional<Boolean> deduplicated,
            Optional<TokenServiceProviderDetails> tspDetails,
            Optional<String> deduplicationBehavior,
            Optional<List<String>> networkTokenIds,
            Optional<Boolean> decryptedPayload,
            Map<String, Object> additionalProperties) {
        this.deduplicated = deduplicated;
        this.tspDetails = tspDetails;
        this.deduplicationBehavior = deduplicationBehavior;
        this.networkTokenIds = networkTokenIds;
        this.decryptedPayload = decryptedPayload;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("deduplicated")
    public Optional<Boolean> getDeduplicated() {
        return deduplicated;
    }

    @JsonProperty("tsp_details")
    public Optional<TokenServiceProviderDetails> getTspDetails() {
        return tspDetails;
    }

    @JsonProperty("deduplication_behavior")
    public Optional<String> getDeduplicationBehavior() {
        return deduplicationBehavior;
    }

    @JsonProperty("network_token_ids")
    public Optional<List<String>> getNetworkTokenIds() {
        return networkTokenIds;
    }

    @JsonProperty("decrypted_payload")
    public Optional<Boolean> getDecryptedPayload() {
        return decryptedPayload;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TokenExtras && equalTo((TokenExtras) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TokenExtras other) {
        return deduplicated.equals(other.deduplicated)
                && tspDetails.equals(other.tspDetails)
                && deduplicationBehavior.equals(other.deduplicationBehavior)
                && networkTokenIds.equals(other.networkTokenIds)
                && decryptedPayload.equals(other.decryptedPayload);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.deduplicated,
                this.tspDetails,
                this.deduplicationBehavior,
                this.networkTokenIds,
                this.decryptedPayload);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> deduplicated = Optional.empty();

        private Optional<TokenServiceProviderDetails> tspDetails = Optional.empty();

        private Optional<String> deduplicationBehavior = Optional.empty();

        private Optional<List<String>> networkTokenIds = Optional.empty();

        private Optional<Boolean> decryptedPayload = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TokenExtras other) {
            deduplicated(other.getDeduplicated());
            tspDetails(other.getTspDetails());
            deduplicationBehavior(other.getDeduplicationBehavior());
            networkTokenIds(other.getNetworkTokenIds());
            decryptedPayload(other.getDecryptedPayload());
            return this;
        }

        @JsonSetter(value = "deduplicated", nulls = Nulls.SKIP)
        public Builder deduplicated(Optional<Boolean> deduplicated) {
            this.deduplicated = deduplicated;
            return this;
        }

        public Builder deduplicated(Boolean deduplicated) {
            this.deduplicated = Optional.ofNullable(deduplicated);
            return this;
        }

        @JsonSetter(value = "tsp_details", nulls = Nulls.SKIP)
        public Builder tspDetails(Optional<TokenServiceProviderDetails> tspDetails) {
            this.tspDetails = tspDetails;
            return this;
        }

        public Builder tspDetails(TokenServiceProviderDetails tspDetails) {
            this.tspDetails = Optional.ofNullable(tspDetails);
            return this;
        }

        @JsonSetter(value = "deduplication_behavior", nulls = Nulls.SKIP)
        public Builder deduplicationBehavior(Optional<String> deduplicationBehavior) {
            this.deduplicationBehavior = deduplicationBehavior;
            return this;
        }

        public Builder deduplicationBehavior(String deduplicationBehavior) {
            this.deduplicationBehavior = Optional.ofNullable(deduplicationBehavior);
            return this;
        }

        @JsonSetter(value = "network_token_ids", nulls = Nulls.SKIP)
        public Builder networkTokenIds(Optional<List<String>> networkTokenIds) {
            this.networkTokenIds = networkTokenIds;
            return this;
        }

        public Builder networkTokenIds(List<String> networkTokenIds) {
            this.networkTokenIds = Optional.ofNullable(networkTokenIds);
            return this;
        }

        @JsonSetter(value = "decrypted_payload", nulls = Nulls.SKIP)
        public Builder decryptedPayload(Optional<Boolean> decryptedPayload) {
            this.decryptedPayload = decryptedPayload;
            return this;
        }

        public Builder decryptedPayload(Boolean decryptedPayload) {
            this.decryptedPayload = Optional.ofNullable(decryptedPayload);
            return this;
        }

        public TokenExtras build() {
            return new TokenExtras(
                    deduplicated,
                    tspDetails,
                    deduplicationBehavior,
                    networkTokenIds,
                    decryptedPayload,
                    additionalProperties);
        }
    }
}
