/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaymentData.Builder.class)
public final class PaymentData {
    private final Optional<String> data;

    private final Optional<String> signature;

    private final Optional<Header> header;

    private final Optional<String> version;

    private final Map<String, Object> additionalProperties;

    private PaymentData(
            Optional<String> data,
            Optional<String> signature,
            Optional<Header> header,
            Optional<String> version,
            Map<String, Object> additionalProperties) {
        this.data = data;
        this.signature = signature;
        this.header = header;
        this.version = version;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("data")
    public Optional<String> getData() {
        return data;
    }

    @JsonProperty("signature")
    public Optional<String> getSignature() {
        return signature;
    }

    @JsonProperty("header")
    public Optional<Header> getHeader() {
        return header;
    }

    @JsonProperty("version")
    public Optional<String> getVersion() {
        return version;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentData && equalTo((PaymentData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentData other) {
        return data.equals(other.data)
                && signature.equals(other.signature)
                && header.equals(other.header)
                && version.equals(other.version);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.data, this.signature, this.header, this.version);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> data = Optional.empty();

        private Optional<String> signature = Optional.empty();

        private Optional<Header> header = Optional.empty();

        private Optional<String> version = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PaymentData other) {
            data(other.getData());
            signature(other.getSignature());
            header(other.getHeader());
            version(other.getVersion());
            return this;
        }

        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public Builder data(Optional<String> data) {
            this.data = data;
            return this;
        }

        public Builder data(String data) {
            this.data = Optional.ofNullable(data);
            return this;
        }

        @JsonSetter(value = "signature", nulls = Nulls.SKIP)
        public Builder signature(Optional<String> signature) {
            this.signature = signature;
            return this;
        }

        public Builder signature(String signature) {
            this.signature = Optional.ofNullable(signature);
            return this;
        }

        @JsonSetter(value = "header", nulls = Nulls.SKIP)
        public Builder header(Optional<Header> header) {
            this.header = header;
            return this;
        }

        public Builder header(Header header) {
            this.header = Optional.ofNullable(header);
            return this;
        }

        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public Builder version(Optional<String> version) {
            this.version = version;
            return this;
        }

        public Builder version(String version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        public PaymentData build() {
            return new PaymentData(data, signature, header, version, additionalProperties);
        }
    }
}
