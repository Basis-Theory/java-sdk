/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = NetworkToken.Builder.class)
public final class NetworkToken {
    private final Optional<String> id;

    private final Optional<String> tenantId;

    private final Optional<Card> data;

    private final Optional<CardDetails> networkToken;

    private final Optional<String> status;

    private final Optional<String> createdBy;

    private final Optional<OffsetDateTime> createdAt;

    private final Map<String, Object> additionalProperties;

    private NetworkToken(
            Optional<String> id,
            Optional<String> tenantId,
            Optional<Card> data,
            Optional<CardDetails> networkToken,
            Optional<String> status,
            Optional<String> createdBy,
            Optional<OffsetDateTime> createdAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.tenantId = tenantId;
        this.data = data;
        this.networkToken = networkToken;
        this.status = status;
        this.createdBy = createdBy;
        this.createdAt = createdAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    @JsonProperty("tenant_id")
    public Optional<String> getTenantId() {
        return tenantId;
    }

    @JsonProperty("data")
    public Optional<Card> getData() {
        return data;
    }

    @JsonProperty("network_token")
    public Optional<CardDetails> getNetworkToken() {
        return networkToken;
    }

    @JsonProperty("status")
    public Optional<String> getStatus() {
        return status;
    }

    @JsonProperty("created_by")
    public Optional<String> getCreatedBy() {
        return createdBy;
    }

    @JsonProperty("created_at")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NetworkToken && equalTo((NetworkToken) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NetworkToken other) {
        return id.equals(other.id)
                && tenantId.equals(other.tenantId)
                && data.equals(other.data)
                && networkToken.equals(other.networkToken)
                && status.equals(other.status)
                && createdBy.equals(other.createdBy)
                && createdAt.equals(other.createdAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id, this.tenantId, this.data, this.networkToken, this.status, this.createdBy, this.createdAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> tenantId = Optional.empty();

        private Optional<Card> data = Optional.empty();

        private Optional<CardDetails> networkToken = Optional.empty();

        private Optional<String> status = Optional.empty();

        private Optional<String> createdBy = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(NetworkToken other) {
            id(other.getId());
            tenantId(other.getTenantId());
            data(other.getData());
            networkToken(other.getNetworkToken());
            status(other.getStatus());
            createdBy(other.getCreatedBy());
            createdAt(other.getCreatedAt());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "tenant_id", nulls = Nulls.SKIP)
        public Builder tenantId(Optional<String> tenantId) {
            this.tenantId = tenantId;
            return this;
        }

        public Builder tenantId(String tenantId) {
            this.tenantId = Optional.ofNullable(tenantId);
            return this;
        }

        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public Builder data(Optional<Card> data) {
            this.data = data;
            return this;
        }

        public Builder data(Card data) {
            this.data = Optional.ofNullable(data);
            return this;
        }

        @JsonSetter(value = "network_token", nulls = Nulls.SKIP)
        public Builder networkToken(Optional<CardDetails> networkToken) {
            this.networkToken = networkToken;
            return this;
        }

        public Builder networkToken(CardDetails networkToken) {
            this.networkToken = Optional.ofNullable(networkToken);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(String status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "created_by", nulls = Nulls.SKIP)
        public Builder createdBy(Optional<String> createdBy) {
            this.createdBy = createdBy;
            return this;
        }

        public Builder createdBy(String createdBy) {
            this.createdBy = Optional.ofNullable(createdBy);
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public NetworkToken build() {
            return new NetworkToken(
                    id, tenantId, data, networkToken, status, createdBy, createdAt, additionalProperties);
        }
    }
}
