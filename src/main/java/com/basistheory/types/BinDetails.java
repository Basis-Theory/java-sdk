/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BinDetails.Builder.class)
public final class BinDetails {
    private final Optional<String> cardBrand;

    private final Optional<String> type;

    private final Optional<Boolean> prepaid;

    private final Optional<String> cardSegmentType;

    private final Optional<BinDetailsBank> bank;

    private final Optional<BinDetailsProduct> product;

    private final Optional<BinDetailsCountry> country;

    private final Optional<Boolean> reloadable;

    private final Optional<String> panOrToken;

    private final Optional<Boolean> accountUpdater;

    private final Optional<Boolean> alm;

    private final Optional<Boolean> domesticOnly;

    private final Optional<Boolean> gamblingBlocked;

    private final Optional<Boolean> level2;

    private final Optional<Boolean> level3;

    private final Optional<String> issuerCurrency;

    private final Optional<String> comboCard;

    private final Optional<Integer> binLength;

    private final Optional<Object> authentication;

    private final Optional<Object> cost;

    private final Map<String, Object> additionalProperties;

    private BinDetails(
            Optional<String> cardBrand,
            Optional<String> type,
            Optional<Boolean> prepaid,
            Optional<String> cardSegmentType,
            Optional<BinDetailsBank> bank,
            Optional<BinDetailsProduct> product,
            Optional<BinDetailsCountry> country,
            Optional<Boolean> reloadable,
            Optional<String> panOrToken,
            Optional<Boolean> accountUpdater,
            Optional<Boolean> alm,
            Optional<Boolean> domesticOnly,
            Optional<Boolean> gamblingBlocked,
            Optional<Boolean> level2,
            Optional<Boolean> level3,
            Optional<String> issuerCurrency,
            Optional<String> comboCard,
            Optional<Integer> binLength,
            Optional<Object> authentication,
            Optional<Object> cost,
            Map<String, Object> additionalProperties) {
        this.cardBrand = cardBrand;
        this.type = type;
        this.prepaid = prepaid;
        this.cardSegmentType = cardSegmentType;
        this.bank = bank;
        this.product = product;
        this.country = country;
        this.reloadable = reloadable;
        this.panOrToken = panOrToken;
        this.accountUpdater = accountUpdater;
        this.alm = alm;
        this.domesticOnly = domesticOnly;
        this.gamblingBlocked = gamblingBlocked;
        this.level2 = level2;
        this.level3 = level3;
        this.issuerCurrency = issuerCurrency;
        this.comboCard = comboCard;
        this.binLength = binLength;
        this.authentication = authentication;
        this.cost = cost;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("card_brand")
    public Optional<String> getCardBrand() {
        return cardBrand;
    }

    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    @JsonProperty("prepaid")
    public Optional<Boolean> getPrepaid() {
        return prepaid;
    }

    @JsonProperty("card_segment_type")
    public Optional<String> getCardSegmentType() {
        return cardSegmentType;
    }

    @JsonProperty("bank")
    public Optional<BinDetailsBank> getBank() {
        return bank;
    }

    @JsonProperty("product")
    public Optional<BinDetailsProduct> getProduct() {
        return product;
    }

    @JsonProperty("country")
    public Optional<BinDetailsCountry> getCountry() {
        return country;
    }

    @JsonProperty("reloadable")
    public Optional<Boolean> getReloadable() {
        return reloadable;
    }

    @JsonProperty("pan_or_token")
    public Optional<String> getPanOrToken() {
        return panOrToken;
    }

    @JsonProperty("account_updater")
    public Optional<Boolean> getAccountUpdater() {
        return accountUpdater;
    }

    @JsonProperty("alm")
    public Optional<Boolean> getAlm() {
        return alm;
    }

    @JsonProperty("domestic_only")
    public Optional<Boolean> getDomesticOnly() {
        return domesticOnly;
    }

    @JsonProperty("gambling_blocked")
    public Optional<Boolean> getGamblingBlocked() {
        return gamblingBlocked;
    }

    @JsonProperty("level2")
    public Optional<Boolean> getLevel2() {
        return level2;
    }

    @JsonProperty("level3")
    public Optional<Boolean> getLevel3() {
        return level3;
    }

    @JsonProperty("issuer_currency")
    public Optional<String> getIssuerCurrency() {
        return issuerCurrency;
    }

    @JsonProperty("combo_card")
    public Optional<String> getComboCard() {
        return comboCard;
    }

    @JsonProperty("bin_length")
    public Optional<Integer> getBinLength() {
        return binLength;
    }

    @JsonProperty("authentication")
    public Optional<Object> getAuthentication() {
        return authentication;
    }

    @JsonProperty("cost")
    public Optional<Object> getCost() {
        return cost;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BinDetails && equalTo((BinDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BinDetails other) {
        return cardBrand.equals(other.cardBrand)
                && type.equals(other.type)
                && prepaid.equals(other.prepaid)
                && cardSegmentType.equals(other.cardSegmentType)
                && bank.equals(other.bank)
                && product.equals(other.product)
                && country.equals(other.country)
                && reloadable.equals(other.reloadable)
                && panOrToken.equals(other.panOrToken)
                && accountUpdater.equals(other.accountUpdater)
                && alm.equals(other.alm)
                && domesticOnly.equals(other.domesticOnly)
                && gamblingBlocked.equals(other.gamblingBlocked)
                && level2.equals(other.level2)
                && level3.equals(other.level3)
                && issuerCurrency.equals(other.issuerCurrency)
                && comboCard.equals(other.comboCard)
                && binLength.equals(other.binLength)
                && authentication.equals(other.authentication)
                && cost.equals(other.cost);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.cardBrand,
                this.type,
                this.prepaid,
                this.cardSegmentType,
                this.bank,
                this.product,
                this.country,
                this.reloadable,
                this.panOrToken,
                this.accountUpdater,
                this.alm,
                this.domesticOnly,
                this.gamblingBlocked,
                this.level2,
                this.level3,
                this.issuerCurrency,
                this.comboCard,
                this.binLength,
                this.authentication,
                this.cost);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> cardBrand = Optional.empty();

        private Optional<String> type = Optional.empty();

        private Optional<Boolean> prepaid = Optional.empty();

        private Optional<String> cardSegmentType = Optional.empty();

        private Optional<BinDetailsBank> bank = Optional.empty();

        private Optional<BinDetailsProduct> product = Optional.empty();

        private Optional<BinDetailsCountry> country = Optional.empty();

        private Optional<Boolean> reloadable = Optional.empty();

        private Optional<String> panOrToken = Optional.empty();

        private Optional<Boolean> accountUpdater = Optional.empty();

        private Optional<Boolean> alm = Optional.empty();

        private Optional<Boolean> domesticOnly = Optional.empty();

        private Optional<Boolean> gamblingBlocked = Optional.empty();

        private Optional<Boolean> level2 = Optional.empty();

        private Optional<Boolean> level3 = Optional.empty();

        private Optional<String> issuerCurrency = Optional.empty();

        private Optional<String> comboCard = Optional.empty();

        private Optional<Integer> binLength = Optional.empty();

        private Optional<Object> authentication = Optional.empty();

        private Optional<Object> cost = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BinDetails other) {
            cardBrand(other.getCardBrand());
            type(other.getType());
            prepaid(other.getPrepaid());
            cardSegmentType(other.getCardSegmentType());
            bank(other.getBank());
            product(other.getProduct());
            country(other.getCountry());
            reloadable(other.getReloadable());
            panOrToken(other.getPanOrToken());
            accountUpdater(other.getAccountUpdater());
            alm(other.getAlm());
            domesticOnly(other.getDomesticOnly());
            gamblingBlocked(other.getGamblingBlocked());
            level2(other.getLevel2());
            level3(other.getLevel3());
            issuerCurrency(other.getIssuerCurrency());
            comboCard(other.getComboCard());
            binLength(other.getBinLength());
            authentication(other.getAuthentication());
            cost(other.getCost());
            return this;
        }

        @JsonSetter(value = "card_brand", nulls = Nulls.SKIP)
        public Builder cardBrand(Optional<String> cardBrand) {
            this.cardBrand = cardBrand;
            return this;
        }

        public Builder cardBrand(String cardBrand) {
            this.cardBrand = Optional.ofNullable(cardBrand);
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        @JsonSetter(value = "prepaid", nulls = Nulls.SKIP)
        public Builder prepaid(Optional<Boolean> prepaid) {
            this.prepaid = prepaid;
            return this;
        }

        public Builder prepaid(Boolean prepaid) {
            this.prepaid = Optional.ofNullable(prepaid);
            return this;
        }

        @JsonSetter(value = "card_segment_type", nulls = Nulls.SKIP)
        public Builder cardSegmentType(Optional<String> cardSegmentType) {
            this.cardSegmentType = cardSegmentType;
            return this;
        }

        public Builder cardSegmentType(String cardSegmentType) {
            this.cardSegmentType = Optional.ofNullable(cardSegmentType);
            return this;
        }

        @JsonSetter(value = "bank", nulls = Nulls.SKIP)
        public Builder bank(Optional<BinDetailsBank> bank) {
            this.bank = bank;
            return this;
        }

        public Builder bank(BinDetailsBank bank) {
            this.bank = Optional.ofNullable(bank);
            return this;
        }

        @JsonSetter(value = "product", nulls = Nulls.SKIP)
        public Builder product(Optional<BinDetailsProduct> product) {
            this.product = product;
            return this;
        }

        public Builder product(BinDetailsProduct product) {
            this.product = Optional.ofNullable(product);
            return this;
        }

        @JsonSetter(value = "country", nulls = Nulls.SKIP)
        public Builder country(Optional<BinDetailsCountry> country) {
            this.country = country;
            return this;
        }

        public Builder country(BinDetailsCountry country) {
            this.country = Optional.ofNullable(country);
            return this;
        }

        @JsonSetter(value = "reloadable", nulls = Nulls.SKIP)
        public Builder reloadable(Optional<Boolean> reloadable) {
            this.reloadable = reloadable;
            return this;
        }

        public Builder reloadable(Boolean reloadable) {
            this.reloadable = Optional.ofNullable(reloadable);
            return this;
        }

        @JsonSetter(value = "pan_or_token", nulls = Nulls.SKIP)
        public Builder panOrToken(Optional<String> panOrToken) {
            this.panOrToken = panOrToken;
            return this;
        }

        public Builder panOrToken(String panOrToken) {
            this.panOrToken = Optional.ofNullable(panOrToken);
            return this;
        }

        @JsonSetter(value = "account_updater", nulls = Nulls.SKIP)
        public Builder accountUpdater(Optional<Boolean> accountUpdater) {
            this.accountUpdater = accountUpdater;
            return this;
        }

        public Builder accountUpdater(Boolean accountUpdater) {
            this.accountUpdater = Optional.ofNullable(accountUpdater);
            return this;
        }

        @JsonSetter(value = "alm", nulls = Nulls.SKIP)
        public Builder alm(Optional<Boolean> alm) {
            this.alm = alm;
            return this;
        }

        public Builder alm(Boolean alm) {
            this.alm = Optional.ofNullable(alm);
            return this;
        }

        @JsonSetter(value = "domestic_only", nulls = Nulls.SKIP)
        public Builder domesticOnly(Optional<Boolean> domesticOnly) {
            this.domesticOnly = domesticOnly;
            return this;
        }

        public Builder domesticOnly(Boolean domesticOnly) {
            this.domesticOnly = Optional.ofNullable(domesticOnly);
            return this;
        }

        @JsonSetter(value = "gambling_blocked", nulls = Nulls.SKIP)
        public Builder gamblingBlocked(Optional<Boolean> gamblingBlocked) {
            this.gamblingBlocked = gamblingBlocked;
            return this;
        }

        public Builder gamblingBlocked(Boolean gamblingBlocked) {
            this.gamblingBlocked = Optional.ofNullable(gamblingBlocked);
            return this;
        }

        @JsonSetter(value = "level2", nulls = Nulls.SKIP)
        public Builder level2(Optional<Boolean> level2) {
            this.level2 = level2;
            return this;
        }

        public Builder level2(Boolean level2) {
            this.level2 = Optional.ofNullable(level2);
            return this;
        }

        @JsonSetter(value = "level3", nulls = Nulls.SKIP)
        public Builder level3(Optional<Boolean> level3) {
            this.level3 = level3;
            return this;
        }

        public Builder level3(Boolean level3) {
            this.level3 = Optional.ofNullable(level3);
            return this;
        }

        @JsonSetter(value = "issuer_currency", nulls = Nulls.SKIP)
        public Builder issuerCurrency(Optional<String> issuerCurrency) {
            this.issuerCurrency = issuerCurrency;
            return this;
        }

        public Builder issuerCurrency(String issuerCurrency) {
            this.issuerCurrency = Optional.ofNullable(issuerCurrency);
            return this;
        }

        @JsonSetter(value = "combo_card", nulls = Nulls.SKIP)
        public Builder comboCard(Optional<String> comboCard) {
            this.comboCard = comboCard;
            return this;
        }

        public Builder comboCard(String comboCard) {
            this.comboCard = Optional.ofNullable(comboCard);
            return this;
        }

        @JsonSetter(value = "bin_length", nulls = Nulls.SKIP)
        public Builder binLength(Optional<Integer> binLength) {
            this.binLength = binLength;
            return this;
        }

        public Builder binLength(Integer binLength) {
            this.binLength = Optional.ofNullable(binLength);
            return this;
        }

        @JsonSetter(value = "authentication", nulls = Nulls.SKIP)
        public Builder authentication(Optional<Object> authentication) {
            this.authentication = authentication;
            return this;
        }

        public Builder authentication(Object authentication) {
            this.authentication = Optional.ofNullable(authentication);
            return this;
        }

        @JsonSetter(value = "cost", nulls = Nulls.SKIP)
        public Builder cost(Optional<Object> cost) {
            this.cost = cost;
            return this;
        }

        public Builder cost(Object cost) {
            this.cost = Optional.ofNullable(cost);
            return this;
        }

        public BinDetails build() {
            return new BinDetails(
                    cardBrand,
                    type,
                    prepaid,
                    cardSegmentType,
                    bank,
                    product,
                    country,
                    reloadable,
                    panOrToken,
                    accountUpdater,
                    alm,
                    domesticOnly,
                    gamblingBlocked,
                    level2,
                    level3,
                    issuerCurrency,
                    comboCard,
                    binLength,
                    authentication,
                    cost,
                    additionalProperties);
        }
    }
}
