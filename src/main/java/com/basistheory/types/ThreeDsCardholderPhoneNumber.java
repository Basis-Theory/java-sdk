/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ThreeDsCardholderPhoneNumber.Builder.class)
public final class ThreeDsCardholderPhoneNumber {
    private final Optional<String> countryCode;

    private final Optional<String> number;

    private final Map<String, Object> additionalProperties;

    private ThreeDsCardholderPhoneNumber(
            Optional<String> countryCode, Optional<String> number, Map<String, Object> additionalProperties) {
        this.countryCode = countryCode;
        this.number = number;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("country_code")
    public Optional<String> getCountryCode() {
        return countryCode;
    }

    @JsonProperty("number")
    public Optional<String> getNumber() {
        return number;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ThreeDsCardholderPhoneNumber && equalTo((ThreeDsCardholderPhoneNumber) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ThreeDsCardholderPhoneNumber other) {
        return countryCode.equals(other.countryCode) && number.equals(other.number);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.countryCode, this.number);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> countryCode = Optional.empty();

        private Optional<String> number = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ThreeDsCardholderPhoneNumber other) {
            countryCode(other.getCountryCode());
            number(other.getNumber());
            return this;
        }

        @JsonSetter(value = "country_code", nulls = Nulls.SKIP)
        public Builder countryCode(Optional<String> countryCode) {
            this.countryCode = countryCode;
            return this;
        }

        public Builder countryCode(String countryCode) {
            this.countryCode = Optional.ofNullable(countryCode);
            return this;
        }

        @JsonSetter(value = "number", nulls = Nulls.SKIP)
        public Builder number(Optional<String> number) {
            this.number = number;
            return this;
        }

        public Builder number(String number) {
            this.number = Optional.ofNullable(number);
            return this;
        }

        public ThreeDsCardholderPhoneNumber build() {
            return new ThreeDsCardholderPhoneNumber(countryCode, number, additionalProperties);
        }
    }
}
