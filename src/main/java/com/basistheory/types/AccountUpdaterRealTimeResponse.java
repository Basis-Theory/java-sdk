/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AccountUpdaterRealTimeResponse.Builder.class)
public final class AccountUpdaterRealTimeResponse {
    private final Optional<Token> newToken;

    private final Optional<String> resultCode;

    private final Map<String, Object> additionalProperties;

    private AccountUpdaterRealTimeResponse(
            Optional<Token> newToken, Optional<String> resultCode, Map<String, Object> additionalProperties) {
        this.newToken = newToken;
        this.resultCode = resultCode;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("new_token")
    public Optional<Token> getNewToken() {
        return newToken;
    }

    /**
     * @return The account updater result code
     */
    @JsonProperty("result_code")
    public Optional<String> getResultCode() {
        return resultCode;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AccountUpdaterRealTimeResponse && equalTo((AccountUpdaterRealTimeResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AccountUpdaterRealTimeResponse other) {
        return newToken.equals(other.newToken) && resultCode.equals(other.resultCode);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.newToken, this.resultCode);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Token> newToken = Optional.empty();

        private Optional<String> resultCode = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AccountUpdaterRealTimeResponse other) {
            newToken(other.getNewToken());
            resultCode(other.getResultCode());
            return this;
        }

        @JsonSetter(value = "new_token", nulls = Nulls.SKIP)
        public Builder newToken(Optional<Token> newToken) {
            this.newToken = newToken;
            return this;
        }

        public Builder newToken(Token newToken) {
            this.newToken = Optional.ofNullable(newToken);
            return this;
        }

        @JsonSetter(value = "result_code", nulls = Nulls.SKIP)
        public Builder resultCode(Optional<String> resultCode) {
            this.resultCode = resultCode;
            return this;
        }

        public Builder resultCode(String resultCode) {
            this.resultCode = Optional.ofNullable(resultCode);
            return this;
        }

        public AccountUpdaterRealTimeResponse build() {
            return new AccountUpdaterRealTimeResponse(newToken, resultCode, additionalProperties);
        }
    }
}
