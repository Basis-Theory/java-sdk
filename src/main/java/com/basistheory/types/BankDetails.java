/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BankDetails.Builder.class)
public final class BankDetails {
    private final Optional<String> routingNumber;

    private final Optional<String> accountNumberLast4;

    private final Map<String, Object> additionalProperties;

    private BankDetails(
            Optional<String> routingNumber,
            Optional<String> accountNumberLast4,
            Map<String, Object> additionalProperties) {
        this.routingNumber = routingNumber;
        this.accountNumberLast4 = accountNumberLast4;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("routing_number")
    public Optional<String> getRoutingNumber() {
        return routingNumber;
    }

    @JsonProperty("account_number_last4")
    public Optional<String> getAccountNumberLast4() {
        return accountNumberLast4;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BankDetails && equalTo((BankDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BankDetails other) {
        return routingNumber.equals(other.routingNumber) && accountNumberLast4.equals(other.accountNumberLast4);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.routingNumber, this.accountNumberLast4);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> routingNumber = Optional.empty();

        private Optional<String> accountNumberLast4 = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BankDetails other) {
            routingNumber(other.getRoutingNumber());
            accountNumberLast4(other.getAccountNumberLast4());
            return this;
        }

        @JsonSetter(value = "routing_number", nulls = Nulls.SKIP)
        public Builder routingNumber(Optional<String> routingNumber) {
            this.routingNumber = routingNumber;
            return this;
        }

        public Builder routingNumber(String routingNumber) {
            this.routingNumber = Optional.ofNullable(routingNumber);
            return this;
        }

        @JsonSetter(value = "account_number_last4", nulls = Nulls.SKIP)
        public Builder accountNumberLast4(Optional<String> accountNumberLast4) {
            this.accountNumberLast4 = accountNumberLast4;
            return this;
        }

        public Builder accountNumberLast4(String accountNumberLast4) {
            this.accountNumberLast4 = Optional.ofNullable(accountNumberLast4);
            return this;
        }

        public BankDetails build() {
            return new BankDetails(routingNumber, accountNumberLast4, additionalProperties);
        }
    }
}
