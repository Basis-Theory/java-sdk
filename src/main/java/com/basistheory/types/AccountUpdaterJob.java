/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AccountUpdaterJob.Builder.class)
public final class AccountUpdaterJob {
    private final String id;

    private final String tenantId;

    private final AccountUpdaterJobStatus status;

    private final String uploadUrl;

    private final String createdBy;

    private final OffsetDateTime createdAt;

    private final Optional<OffsetDateTime> expiresAt;

    private final Optional<List<String>> errors;

    private final Optional<Integer> requests;

    private final Optional<Map<String, Integer>> results;

    private final Map<String, Object> additionalProperties;

    private AccountUpdaterJob(
            String id,
            String tenantId,
            AccountUpdaterJobStatus status,
            String uploadUrl,
            String createdBy,
            OffsetDateTime createdAt,
            Optional<OffsetDateTime> expiresAt,
            Optional<List<String>> errors,
            Optional<Integer> requests,
            Optional<Map<String, Integer>> results,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.tenantId = tenantId;
        this.status = status;
        this.uploadUrl = uploadUrl;
        this.createdBy = createdBy;
        this.createdAt = createdAt;
        this.expiresAt = expiresAt;
        this.errors = errors;
        this.requests = requests;
        this.results = results;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("tenantId")
    public String getTenantId() {
        return tenantId;
    }

    /**
     * @return The current status of the job
     */
    @JsonProperty("status")
    public AccountUpdaterJobStatus getStatus() {
        return status;
    }

    /**
     * @return Pre-signed URL for uploading job data
     */
    @JsonProperty("uploadUrl")
    public String getUploadUrl() {
        return uploadUrl;
    }

    /**
     * @return Application id that created the job
     */
    @JsonProperty("createdBy")
    public String getCreatedBy() {
        return createdBy;
    }

    /**
     * @return Date and time when the job was created
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return Date and time when the job expires if no data is uploaded
     */
    @JsonProperty("expiresAt")
    public Optional<OffsetDateTime> getExpiresAt() {
        return expiresAt;
    }

    /**
     * @return List of errors encountered during processing
     */
    @JsonProperty("errors")
    public Optional<List<String>> getErrors() {
        return errors;
    }

    /**
     * @return Total number of requests processed
     */
    @JsonProperty("requests")
    public Optional<Integer> getRequests() {
        return requests;
    }

    /**
     * @return Summary count breakdown by result code for all processed rows
     */
    @JsonProperty("results")
    public Optional<Map<String, Integer>> getResults() {
        return results;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AccountUpdaterJob && equalTo((AccountUpdaterJob) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AccountUpdaterJob other) {
        return id.equals(other.id)
                && tenantId.equals(other.tenantId)
                && status.equals(other.status)
                && uploadUrl.equals(other.uploadUrl)
                && createdBy.equals(other.createdBy)
                && createdAt.equals(other.createdAt)
                && expiresAt.equals(other.expiresAt)
                && errors.equals(other.errors)
                && requests.equals(other.requests)
                && results.equals(other.results);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.tenantId,
                this.status,
                this.uploadUrl,
                this.createdBy,
                this.createdAt,
                this.expiresAt,
                this.errors,
                this.requests,
                this.results);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        TenantIdStage id(@NotNull String id);

        Builder from(AccountUpdaterJob other);
    }

    public interface TenantIdStage {
        StatusStage tenantId(@NotNull String tenantId);
    }

    public interface StatusStage {
        /**
         * <p>The current status of the job</p>
         */
        UploadUrlStage status(@NotNull AccountUpdaterJobStatus status);
    }

    public interface UploadUrlStage {
        /**
         * <p>Pre-signed URL for uploading job data</p>
         */
        CreatedByStage uploadUrl(@NotNull String uploadUrl);
    }

    public interface CreatedByStage {
        /**
         * <p>Application id that created the job</p>
         */
        CreatedAtStage createdBy(@NotNull String createdBy);
    }

    public interface CreatedAtStage {
        /**
         * <p>Date and time when the job was created</p>
         */
        _FinalStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface _FinalStage {
        AccountUpdaterJob build();

        /**
         * <p>Date and time when the job expires if no data is uploaded</p>
         */
        _FinalStage expiresAt(Optional<OffsetDateTime> expiresAt);

        _FinalStage expiresAt(OffsetDateTime expiresAt);

        /**
         * <p>List of errors encountered during processing</p>
         */
        _FinalStage errors(Optional<List<String>> errors);

        _FinalStage errors(List<String> errors);

        /**
         * <p>Total number of requests processed</p>
         */
        _FinalStage requests(Optional<Integer> requests);

        _FinalStage requests(Integer requests);

        /**
         * <p>Summary count breakdown by result code for all processed rows</p>
         */
        _FinalStage results(Optional<Map<String, Integer>> results);

        _FinalStage results(Map<String, Integer> results);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    TenantIdStage,
                    StatusStage,
                    UploadUrlStage,
                    CreatedByStage,
                    CreatedAtStage,
                    _FinalStage {
        private String id;

        private String tenantId;

        private AccountUpdaterJobStatus status;

        private String uploadUrl;

        private String createdBy;

        private OffsetDateTime createdAt;

        private Optional<Map<String, Integer>> results = Optional.empty();

        private Optional<Integer> requests = Optional.empty();

        private Optional<List<String>> errors = Optional.empty();

        private Optional<OffsetDateTime> expiresAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AccountUpdaterJob other) {
            id(other.getId());
            tenantId(other.getTenantId());
            status(other.getStatus());
            uploadUrl(other.getUploadUrl());
            createdBy(other.getCreatedBy());
            createdAt(other.getCreatedAt());
            expiresAt(other.getExpiresAt());
            errors(other.getErrors());
            requests(other.getRequests());
            results(other.getResults());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public TenantIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("tenantId")
        public StatusStage tenantId(@NotNull String tenantId) {
            this.tenantId = Objects.requireNonNull(tenantId, "tenantId must not be null");
            return this;
        }

        /**
         * <p>The current status of the job</p>
         * <p>The current status of the job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public UploadUrlStage status(@NotNull AccountUpdaterJobStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>Pre-signed URL for uploading job data</p>
         * <p>Pre-signed URL for uploading job data</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("uploadUrl")
        public CreatedByStage uploadUrl(@NotNull String uploadUrl) {
            this.uploadUrl = Objects.requireNonNull(uploadUrl, "uploadUrl must not be null");
            return this;
        }

        /**
         * <p>Application id that created the job</p>
         * <p>Application id that created the job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdBy")
        public CreatedAtStage createdBy(@NotNull String createdBy) {
            this.createdBy = Objects.requireNonNull(createdBy, "createdBy must not be null");
            return this;
        }

        /**
         * <p>Date and time when the job was created</p>
         * <p>Date and time when the job was created</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public _FinalStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>Summary count breakdown by result code for all processed rows</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage results(Map<String, Integer> results) {
            this.results = Optional.ofNullable(results);
            return this;
        }

        /**
         * <p>Summary count breakdown by result code for all processed rows</p>
         */
        @java.lang.Override
        @JsonSetter(value = "results", nulls = Nulls.SKIP)
        public _FinalStage results(Optional<Map<String, Integer>> results) {
            this.results = results;
            return this;
        }

        /**
         * <p>Total number of requests processed</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage requests(Integer requests) {
            this.requests = Optional.ofNullable(requests);
            return this;
        }

        /**
         * <p>Total number of requests processed</p>
         */
        @java.lang.Override
        @JsonSetter(value = "requests", nulls = Nulls.SKIP)
        public _FinalStage requests(Optional<Integer> requests) {
            this.requests = requests;
            return this;
        }

        /**
         * <p>List of errors encountered during processing</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage errors(List<String> errors) {
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        /**
         * <p>List of errors encountered during processing</p>
         */
        @java.lang.Override
        @JsonSetter(value = "errors", nulls = Nulls.SKIP)
        public _FinalStage errors(Optional<List<String>> errors) {
            this.errors = errors;
            return this;
        }

        /**
         * <p>Date and time when the job expires if no data is uploaded</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage expiresAt(OffsetDateTime expiresAt) {
            this.expiresAt = Optional.ofNullable(expiresAt);
            return this;
        }

        /**
         * <p>Date and time when the job expires if no data is uploaded</p>
         */
        @java.lang.Override
        @JsonSetter(value = "expiresAt", nulls = Nulls.SKIP)
        public _FinalStage expiresAt(Optional<OffsetDateTime> expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        @java.lang.Override
        public AccountUpdaterJob build() {
            return new AccountUpdaterJob(
                    id,
                    tenantId,
                    status,
                    uploadUrl,
                    createdBy,
                    createdAt,
                    expiresAt,
                    errors,
                    requests,
                    results,
                    additionalProperties);
        }
    }
}
