/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ThreeDsCardholderAccountInfo.Builder.class)
public final class ThreeDsCardholderAccountInfo {
    private final Optional<String> accountAge;

    private final Optional<String> accountLastChanged;

    private final Optional<String> accountChangeDate;

    private final Optional<String> accountCreatedDate;

    private final Optional<String> accountPwdLastChanged;

    private final Optional<String> accountPwdChangeDate;

    private final Optional<String> purchaseCountHalfYear;

    private final Optional<String> transactionCountDay;

    private final Optional<String> paymentAccountAge;

    private final Optional<String> transactionCountYear;

    private final Optional<String> paymentAccountCreated;

    private final Optional<String> shippingAddressFirstUsed;

    private final Optional<String> shippingAddressUsageDate;

    private final Optional<Boolean> shippingAccountNameMatch;

    private final Optional<Boolean> suspiciousActivityObserved;

    private final Map<String, Object> additionalProperties;

    private ThreeDsCardholderAccountInfo(
            Optional<String> accountAge,
            Optional<String> accountLastChanged,
            Optional<String> accountChangeDate,
            Optional<String> accountCreatedDate,
            Optional<String> accountPwdLastChanged,
            Optional<String> accountPwdChangeDate,
            Optional<String> purchaseCountHalfYear,
            Optional<String> transactionCountDay,
            Optional<String> paymentAccountAge,
            Optional<String> transactionCountYear,
            Optional<String> paymentAccountCreated,
            Optional<String> shippingAddressFirstUsed,
            Optional<String> shippingAddressUsageDate,
            Optional<Boolean> shippingAccountNameMatch,
            Optional<Boolean> suspiciousActivityObserved,
            Map<String, Object> additionalProperties) {
        this.accountAge = accountAge;
        this.accountLastChanged = accountLastChanged;
        this.accountChangeDate = accountChangeDate;
        this.accountCreatedDate = accountCreatedDate;
        this.accountPwdLastChanged = accountPwdLastChanged;
        this.accountPwdChangeDate = accountPwdChangeDate;
        this.purchaseCountHalfYear = purchaseCountHalfYear;
        this.transactionCountDay = transactionCountDay;
        this.paymentAccountAge = paymentAccountAge;
        this.transactionCountYear = transactionCountYear;
        this.paymentAccountCreated = paymentAccountCreated;
        this.shippingAddressFirstUsed = shippingAddressFirstUsed;
        this.shippingAddressUsageDate = shippingAddressUsageDate;
        this.shippingAccountNameMatch = shippingAccountNameMatch;
        this.suspiciousActivityObserved = suspiciousActivityObserved;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("account_age")
    public Optional<String> getAccountAge() {
        return accountAge;
    }

    @JsonProperty("account_last_changed")
    public Optional<String> getAccountLastChanged() {
        return accountLastChanged;
    }

    @JsonProperty("account_change_date")
    public Optional<String> getAccountChangeDate() {
        return accountChangeDate;
    }

    @JsonProperty("account_created_date")
    public Optional<String> getAccountCreatedDate() {
        return accountCreatedDate;
    }

    @JsonProperty("account_pwd_last_changed")
    public Optional<String> getAccountPwdLastChanged() {
        return accountPwdLastChanged;
    }

    @JsonProperty("account_pwd_change_date")
    public Optional<String> getAccountPwdChangeDate() {
        return accountPwdChangeDate;
    }

    @JsonProperty("purchase_count_half_year")
    public Optional<String> getPurchaseCountHalfYear() {
        return purchaseCountHalfYear;
    }

    @JsonProperty("transaction_count_day")
    public Optional<String> getTransactionCountDay() {
        return transactionCountDay;
    }

    @JsonProperty("payment_account_age")
    public Optional<String> getPaymentAccountAge() {
        return paymentAccountAge;
    }

    @JsonProperty("transaction_count_year")
    public Optional<String> getTransactionCountYear() {
        return transactionCountYear;
    }

    @JsonProperty("payment_account_created")
    public Optional<String> getPaymentAccountCreated() {
        return paymentAccountCreated;
    }

    @JsonProperty("shipping_address_first_used")
    public Optional<String> getShippingAddressFirstUsed() {
        return shippingAddressFirstUsed;
    }

    @JsonProperty("shipping_address_usage_date")
    public Optional<String> getShippingAddressUsageDate() {
        return shippingAddressUsageDate;
    }

    @JsonProperty("shipping_account_name_match")
    public Optional<Boolean> getShippingAccountNameMatch() {
        return shippingAccountNameMatch;
    }

    @JsonProperty("suspicious_activity_observed")
    public Optional<Boolean> getSuspiciousActivityObserved() {
        return suspiciousActivityObserved;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ThreeDsCardholderAccountInfo && equalTo((ThreeDsCardholderAccountInfo) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ThreeDsCardholderAccountInfo other) {
        return accountAge.equals(other.accountAge)
                && accountLastChanged.equals(other.accountLastChanged)
                && accountChangeDate.equals(other.accountChangeDate)
                && accountCreatedDate.equals(other.accountCreatedDate)
                && accountPwdLastChanged.equals(other.accountPwdLastChanged)
                && accountPwdChangeDate.equals(other.accountPwdChangeDate)
                && purchaseCountHalfYear.equals(other.purchaseCountHalfYear)
                && transactionCountDay.equals(other.transactionCountDay)
                && paymentAccountAge.equals(other.paymentAccountAge)
                && transactionCountYear.equals(other.transactionCountYear)
                && paymentAccountCreated.equals(other.paymentAccountCreated)
                && shippingAddressFirstUsed.equals(other.shippingAddressFirstUsed)
                && shippingAddressUsageDate.equals(other.shippingAddressUsageDate)
                && shippingAccountNameMatch.equals(other.shippingAccountNameMatch)
                && suspiciousActivityObserved.equals(other.suspiciousActivityObserved);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.accountAge,
                this.accountLastChanged,
                this.accountChangeDate,
                this.accountCreatedDate,
                this.accountPwdLastChanged,
                this.accountPwdChangeDate,
                this.purchaseCountHalfYear,
                this.transactionCountDay,
                this.paymentAccountAge,
                this.transactionCountYear,
                this.paymentAccountCreated,
                this.shippingAddressFirstUsed,
                this.shippingAddressUsageDate,
                this.shippingAccountNameMatch,
                this.suspiciousActivityObserved);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> accountAge = Optional.empty();

        private Optional<String> accountLastChanged = Optional.empty();

        private Optional<String> accountChangeDate = Optional.empty();

        private Optional<String> accountCreatedDate = Optional.empty();

        private Optional<String> accountPwdLastChanged = Optional.empty();

        private Optional<String> accountPwdChangeDate = Optional.empty();

        private Optional<String> purchaseCountHalfYear = Optional.empty();

        private Optional<String> transactionCountDay = Optional.empty();

        private Optional<String> paymentAccountAge = Optional.empty();

        private Optional<String> transactionCountYear = Optional.empty();

        private Optional<String> paymentAccountCreated = Optional.empty();

        private Optional<String> shippingAddressFirstUsed = Optional.empty();

        private Optional<String> shippingAddressUsageDate = Optional.empty();

        private Optional<Boolean> shippingAccountNameMatch = Optional.empty();

        private Optional<Boolean> suspiciousActivityObserved = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ThreeDsCardholderAccountInfo other) {
            accountAge(other.getAccountAge());
            accountLastChanged(other.getAccountLastChanged());
            accountChangeDate(other.getAccountChangeDate());
            accountCreatedDate(other.getAccountCreatedDate());
            accountPwdLastChanged(other.getAccountPwdLastChanged());
            accountPwdChangeDate(other.getAccountPwdChangeDate());
            purchaseCountHalfYear(other.getPurchaseCountHalfYear());
            transactionCountDay(other.getTransactionCountDay());
            paymentAccountAge(other.getPaymentAccountAge());
            transactionCountYear(other.getTransactionCountYear());
            paymentAccountCreated(other.getPaymentAccountCreated());
            shippingAddressFirstUsed(other.getShippingAddressFirstUsed());
            shippingAddressUsageDate(other.getShippingAddressUsageDate());
            shippingAccountNameMatch(other.getShippingAccountNameMatch());
            suspiciousActivityObserved(other.getSuspiciousActivityObserved());
            return this;
        }

        @JsonSetter(value = "account_age", nulls = Nulls.SKIP)
        public Builder accountAge(Optional<String> accountAge) {
            this.accountAge = accountAge;
            return this;
        }

        public Builder accountAge(String accountAge) {
            this.accountAge = Optional.ofNullable(accountAge);
            return this;
        }

        @JsonSetter(value = "account_last_changed", nulls = Nulls.SKIP)
        public Builder accountLastChanged(Optional<String> accountLastChanged) {
            this.accountLastChanged = accountLastChanged;
            return this;
        }

        public Builder accountLastChanged(String accountLastChanged) {
            this.accountLastChanged = Optional.ofNullable(accountLastChanged);
            return this;
        }

        @JsonSetter(value = "account_change_date", nulls = Nulls.SKIP)
        public Builder accountChangeDate(Optional<String> accountChangeDate) {
            this.accountChangeDate = accountChangeDate;
            return this;
        }

        public Builder accountChangeDate(String accountChangeDate) {
            this.accountChangeDate = Optional.ofNullable(accountChangeDate);
            return this;
        }

        @JsonSetter(value = "account_created_date", nulls = Nulls.SKIP)
        public Builder accountCreatedDate(Optional<String> accountCreatedDate) {
            this.accountCreatedDate = accountCreatedDate;
            return this;
        }

        public Builder accountCreatedDate(String accountCreatedDate) {
            this.accountCreatedDate = Optional.ofNullable(accountCreatedDate);
            return this;
        }

        @JsonSetter(value = "account_pwd_last_changed", nulls = Nulls.SKIP)
        public Builder accountPwdLastChanged(Optional<String> accountPwdLastChanged) {
            this.accountPwdLastChanged = accountPwdLastChanged;
            return this;
        }

        public Builder accountPwdLastChanged(String accountPwdLastChanged) {
            this.accountPwdLastChanged = Optional.ofNullable(accountPwdLastChanged);
            return this;
        }

        @JsonSetter(value = "account_pwd_change_date", nulls = Nulls.SKIP)
        public Builder accountPwdChangeDate(Optional<String> accountPwdChangeDate) {
            this.accountPwdChangeDate = accountPwdChangeDate;
            return this;
        }

        public Builder accountPwdChangeDate(String accountPwdChangeDate) {
            this.accountPwdChangeDate = Optional.ofNullable(accountPwdChangeDate);
            return this;
        }

        @JsonSetter(value = "purchase_count_half_year", nulls = Nulls.SKIP)
        public Builder purchaseCountHalfYear(Optional<String> purchaseCountHalfYear) {
            this.purchaseCountHalfYear = purchaseCountHalfYear;
            return this;
        }

        public Builder purchaseCountHalfYear(String purchaseCountHalfYear) {
            this.purchaseCountHalfYear = Optional.ofNullable(purchaseCountHalfYear);
            return this;
        }

        @JsonSetter(value = "transaction_count_day", nulls = Nulls.SKIP)
        public Builder transactionCountDay(Optional<String> transactionCountDay) {
            this.transactionCountDay = transactionCountDay;
            return this;
        }

        public Builder transactionCountDay(String transactionCountDay) {
            this.transactionCountDay = Optional.ofNullable(transactionCountDay);
            return this;
        }

        @JsonSetter(value = "payment_account_age", nulls = Nulls.SKIP)
        public Builder paymentAccountAge(Optional<String> paymentAccountAge) {
            this.paymentAccountAge = paymentAccountAge;
            return this;
        }

        public Builder paymentAccountAge(String paymentAccountAge) {
            this.paymentAccountAge = Optional.ofNullable(paymentAccountAge);
            return this;
        }

        @JsonSetter(value = "transaction_count_year", nulls = Nulls.SKIP)
        public Builder transactionCountYear(Optional<String> transactionCountYear) {
            this.transactionCountYear = transactionCountYear;
            return this;
        }

        public Builder transactionCountYear(String transactionCountYear) {
            this.transactionCountYear = Optional.ofNullable(transactionCountYear);
            return this;
        }

        @JsonSetter(value = "payment_account_created", nulls = Nulls.SKIP)
        public Builder paymentAccountCreated(Optional<String> paymentAccountCreated) {
            this.paymentAccountCreated = paymentAccountCreated;
            return this;
        }

        public Builder paymentAccountCreated(String paymentAccountCreated) {
            this.paymentAccountCreated = Optional.ofNullable(paymentAccountCreated);
            return this;
        }

        @JsonSetter(value = "shipping_address_first_used", nulls = Nulls.SKIP)
        public Builder shippingAddressFirstUsed(Optional<String> shippingAddressFirstUsed) {
            this.shippingAddressFirstUsed = shippingAddressFirstUsed;
            return this;
        }

        public Builder shippingAddressFirstUsed(String shippingAddressFirstUsed) {
            this.shippingAddressFirstUsed = Optional.ofNullable(shippingAddressFirstUsed);
            return this;
        }

        @JsonSetter(value = "shipping_address_usage_date", nulls = Nulls.SKIP)
        public Builder shippingAddressUsageDate(Optional<String> shippingAddressUsageDate) {
            this.shippingAddressUsageDate = shippingAddressUsageDate;
            return this;
        }

        public Builder shippingAddressUsageDate(String shippingAddressUsageDate) {
            this.shippingAddressUsageDate = Optional.ofNullable(shippingAddressUsageDate);
            return this;
        }

        @JsonSetter(value = "shipping_account_name_match", nulls = Nulls.SKIP)
        public Builder shippingAccountNameMatch(Optional<Boolean> shippingAccountNameMatch) {
            this.shippingAccountNameMatch = shippingAccountNameMatch;
            return this;
        }

        public Builder shippingAccountNameMatch(Boolean shippingAccountNameMatch) {
            this.shippingAccountNameMatch = Optional.ofNullable(shippingAccountNameMatch);
            return this;
        }

        @JsonSetter(value = "suspicious_activity_observed", nulls = Nulls.SKIP)
        public Builder suspiciousActivityObserved(Optional<Boolean> suspiciousActivityObserved) {
            this.suspiciousActivityObserved = suspiciousActivityObserved;
            return this;
        }

        public Builder suspiciousActivityObserved(Boolean suspiciousActivityObserved) {
            this.suspiciousActivityObserved = Optional.ofNullable(suspiciousActivityObserved);
            return this;
        }

        public ThreeDsCardholderAccountInfo build() {
            return new ThreeDsCardholderAccountInfo(
                    accountAge,
                    accountLastChanged,
                    accountChangeDate,
                    accountCreatedDate,
                    accountPwdLastChanged,
                    accountPwdChangeDate,
                    purchaseCountHalfYear,
                    transactionCountDay,
                    paymentAccountAge,
                    transactionCountYear,
                    paymentAccountCreated,
                    shippingAddressFirstUsed,
                    shippingAddressUsageDate,
                    shippingAccountNameMatch,
                    suspiciousActivityObserved,
                    additionalProperties);
        }
    }
}
