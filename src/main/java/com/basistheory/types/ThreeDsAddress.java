/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ThreeDsAddress.Builder.class)
public final class ThreeDsAddress {
    private final Optional<String> line1;

    private final Optional<String> line2;

    private final Optional<String> line3;

    private final Optional<String> postalCode;

    private final Optional<String> city;

    private final Optional<String> stateCode;

    private final Optional<String> countryCode;

    private final Map<String, Object> additionalProperties;

    private ThreeDsAddress(
            Optional<String> line1,
            Optional<String> line2,
            Optional<String> line3,
            Optional<String> postalCode,
            Optional<String> city,
            Optional<String> stateCode,
            Optional<String> countryCode,
            Map<String, Object> additionalProperties) {
        this.line1 = line1;
        this.line2 = line2;
        this.line3 = line3;
        this.postalCode = postalCode;
        this.city = city;
        this.stateCode = stateCode;
        this.countryCode = countryCode;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("line1")
    public Optional<String> getLine1() {
        return line1;
    }

    @JsonProperty("line2")
    public Optional<String> getLine2() {
        return line2;
    }

    @JsonProperty("line3")
    public Optional<String> getLine3() {
        return line3;
    }

    @JsonProperty("postal_code")
    public Optional<String> getPostalCode() {
        return postalCode;
    }

    @JsonProperty("city")
    public Optional<String> getCity() {
        return city;
    }

    @JsonProperty("state_code")
    public Optional<String> getStateCode() {
        return stateCode;
    }

    @JsonProperty("country_code")
    public Optional<String> getCountryCode() {
        return countryCode;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ThreeDsAddress && equalTo((ThreeDsAddress) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ThreeDsAddress other) {
        return line1.equals(other.line1)
                && line2.equals(other.line2)
                && line3.equals(other.line3)
                && postalCode.equals(other.postalCode)
                && city.equals(other.city)
                && stateCode.equals(other.stateCode)
                && countryCode.equals(other.countryCode);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.line1, this.line2, this.line3, this.postalCode, this.city, this.stateCode, this.countryCode);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> line1 = Optional.empty();

        private Optional<String> line2 = Optional.empty();

        private Optional<String> line3 = Optional.empty();

        private Optional<String> postalCode = Optional.empty();

        private Optional<String> city = Optional.empty();

        private Optional<String> stateCode = Optional.empty();

        private Optional<String> countryCode = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ThreeDsAddress other) {
            line1(other.getLine1());
            line2(other.getLine2());
            line3(other.getLine3());
            postalCode(other.getPostalCode());
            city(other.getCity());
            stateCode(other.getStateCode());
            countryCode(other.getCountryCode());
            return this;
        }

        @JsonSetter(value = "line1", nulls = Nulls.SKIP)
        public Builder line1(Optional<String> line1) {
            this.line1 = line1;
            return this;
        }

        public Builder line1(String line1) {
            this.line1 = Optional.ofNullable(line1);
            return this;
        }

        @JsonSetter(value = "line2", nulls = Nulls.SKIP)
        public Builder line2(Optional<String> line2) {
            this.line2 = line2;
            return this;
        }

        public Builder line2(String line2) {
            this.line2 = Optional.ofNullable(line2);
            return this;
        }

        @JsonSetter(value = "line3", nulls = Nulls.SKIP)
        public Builder line3(Optional<String> line3) {
            this.line3 = line3;
            return this;
        }

        public Builder line3(String line3) {
            this.line3 = Optional.ofNullable(line3);
            return this;
        }

        @JsonSetter(value = "postal_code", nulls = Nulls.SKIP)
        public Builder postalCode(Optional<String> postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public Builder postalCode(String postalCode) {
            this.postalCode = Optional.ofNullable(postalCode);
            return this;
        }

        @JsonSetter(value = "city", nulls = Nulls.SKIP)
        public Builder city(Optional<String> city) {
            this.city = city;
            return this;
        }

        public Builder city(String city) {
            this.city = Optional.ofNullable(city);
            return this;
        }

        @JsonSetter(value = "state_code", nulls = Nulls.SKIP)
        public Builder stateCode(Optional<String> stateCode) {
            this.stateCode = stateCode;
            return this;
        }

        public Builder stateCode(String stateCode) {
            this.stateCode = Optional.ofNullable(stateCode);
            return this;
        }

        @JsonSetter(value = "country_code", nulls = Nulls.SKIP)
        public Builder countryCode(Optional<String> countryCode) {
            this.countryCode = countryCode;
            return this;
        }

        public Builder countryCode(String countryCode) {
            this.countryCode = Optional.ofNullable(countryCode);
            return this;
        }

        public ThreeDsAddress build() {
            return new ThreeDsAddress(
                    line1, line2, line3, postalCode, city, stateCode, countryCode, additionalProperties);
        }
    }
}
