/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Pagination.Builder.class)
public final class Pagination {
    private final Optional<Integer> totalItems;

    private final Optional<Integer> pageNumber;

    private final Optional<Integer> pageSize;

    private final Optional<Integer> totalPages;

    private final Optional<String> after;

    private final Optional<String> next;

    private final Map<String, Object> additionalProperties;

    private Pagination(
            Optional<Integer> totalItems,
            Optional<Integer> pageNumber,
            Optional<Integer> pageSize,
            Optional<Integer> totalPages,
            Optional<String> after,
            Optional<String> next,
            Map<String, Object> additionalProperties) {
        this.totalItems = totalItems;
        this.pageNumber = pageNumber;
        this.pageSize = pageSize;
        this.totalPages = totalPages;
        this.after = after;
        this.next = next;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("total_items")
    public Optional<Integer> getTotalItems() {
        return totalItems;
    }

    @JsonProperty("page_number")
    public Optional<Integer> getPageNumber() {
        return pageNumber;
    }

    @JsonProperty("page_size")
    public Optional<Integer> getPageSize() {
        return pageSize;
    }

    @JsonProperty("total_pages")
    public Optional<Integer> getTotalPages() {
        return totalPages;
    }

    @JsonProperty("after")
    public Optional<String> getAfter() {
        return after;
    }

    @JsonProperty("next")
    public Optional<String> getNext() {
        return next;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Pagination && equalTo((Pagination) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Pagination other) {
        return totalItems.equals(other.totalItems)
                && pageNumber.equals(other.pageNumber)
                && pageSize.equals(other.pageSize)
                && totalPages.equals(other.totalPages)
                && after.equals(other.after)
                && next.equals(other.next);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.totalItems, this.pageNumber, this.pageSize, this.totalPages, this.after, this.next);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> totalItems = Optional.empty();

        private Optional<Integer> pageNumber = Optional.empty();

        private Optional<Integer> pageSize = Optional.empty();

        private Optional<Integer> totalPages = Optional.empty();

        private Optional<String> after = Optional.empty();

        private Optional<String> next = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Pagination other) {
            totalItems(other.getTotalItems());
            pageNumber(other.getPageNumber());
            pageSize(other.getPageSize());
            totalPages(other.getTotalPages());
            after(other.getAfter());
            next(other.getNext());
            return this;
        }

        @JsonSetter(value = "total_items", nulls = Nulls.SKIP)
        public Builder totalItems(Optional<Integer> totalItems) {
            this.totalItems = totalItems;
            return this;
        }

        public Builder totalItems(Integer totalItems) {
            this.totalItems = Optional.ofNullable(totalItems);
            return this;
        }

        @JsonSetter(value = "page_number", nulls = Nulls.SKIP)
        public Builder pageNumber(Optional<Integer> pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }

        public Builder pageNumber(Integer pageNumber) {
            this.pageNumber = Optional.ofNullable(pageNumber);
            return this;
        }

        @JsonSetter(value = "page_size", nulls = Nulls.SKIP)
        public Builder pageSize(Optional<Integer> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        public Builder pageSize(Integer pageSize) {
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        @JsonSetter(value = "total_pages", nulls = Nulls.SKIP)
        public Builder totalPages(Optional<Integer> totalPages) {
            this.totalPages = totalPages;
            return this;
        }

        public Builder totalPages(Integer totalPages) {
            this.totalPages = Optional.ofNullable(totalPages);
            return this;
        }

        @JsonSetter(value = "after", nulls = Nulls.SKIP)
        public Builder after(Optional<String> after) {
            this.after = after;
            return this;
        }

        public Builder after(String after) {
            this.after = Optional.ofNullable(after);
            return this;
        }

        @JsonSetter(value = "next", nulls = Nulls.SKIP)
        public Builder next(Optional<String> next) {
            this.next = next;
            return this;
        }

        public Builder next(String next) {
            this.next = Optional.ofNullable(next);
            return this;
        }

        public Pagination build() {
            return new Pagination(totalItems, pageNumber, pageSize, totalPages, after, next, additionalProperties);
        }
    }
}
