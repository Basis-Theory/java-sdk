/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApplePaySessionRequest.Builder.class)
public final class ApplePaySessionRequest {
    private final Optional<String> validationUrl;

    private final Optional<String> displayName;

    private final Optional<String> domain;

    private final Map<String, Object> additionalProperties;

    private ApplePaySessionRequest(
            Optional<String> validationUrl,
            Optional<String> displayName,
            Optional<String> domain,
            Map<String, Object> additionalProperties) {
        this.validationUrl = validationUrl;
        this.displayName = displayName;
        this.domain = domain;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("validation_url")
    public Optional<String> getValidationUrl() {
        return validationUrl;
    }

    @JsonProperty("display_name")
    public Optional<String> getDisplayName() {
        return displayName;
    }

    @JsonProperty("domain")
    public Optional<String> getDomain() {
        return domain;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApplePaySessionRequest && equalTo((ApplePaySessionRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApplePaySessionRequest other) {
        return validationUrl.equals(other.validationUrl)
                && displayName.equals(other.displayName)
                && domain.equals(other.domain);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.validationUrl, this.displayName, this.domain);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> validationUrl = Optional.empty();

        private Optional<String> displayName = Optional.empty();

        private Optional<String> domain = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ApplePaySessionRequest other) {
            validationUrl(other.getValidationUrl());
            displayName(other.getDisplayName());
            domain(other.getDomain());
            return this;
        }

        @JsonSetter(value = "validation_url", nulls = Nulls.SKIP)
        public Builder validationUrl(Optional<String> validationUrl) {
            this.validationUrl = validationUrl;
            return this;
        }

        public Builder validationUrl(String validationUrl) {
            this.validationUrl = Optional.ofNullable(validationUrl);
            return this;
        }

        @JsonSetter(value = "display_name", nulls = Nulls.SKIP)
        public Builder displayName(Optional<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            this.displayName = Optional.ofNullable(displayName);
            return this;
        }

        @JsonSetter(value = "domain", nulls = Nulls.SKIP)
        public Builder domain(Optional<String> domain) {
            this.domain = domain;
            return this;
        }

        public Builder domain(String domain) {
            this.domain = Optional.ofNullable(domain);
            return this;
        }

        public ApplePaySessionRequest build() {
            return new ApplePaySessionRequest(validationUrl, displayName, domain, additionalProperties);
        }
    }
}
