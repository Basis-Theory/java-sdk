/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = WebhookList.Builder.class)
public final class WebhookList {
    private final WebhookListPagination pagination;

    private final List<Webhook> data;

    private final Map<String, Object> additionalProperties;

    private WebhookList(
            WebhookListPagination pagination, List<Webhook> data, Map<String, Object> additionalProperties) {
        this.pagination = pagination;
        this.data = data;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("pagination")
    public WebhookListPagination getPagination() {
        return pagination;
    }

    @JsonProperty("data")
    public List<Webhook> getData() {
        return data;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof WebhookList && equalTo((WebhookList) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(WebhookList other) {
        return pagination.equals(other.pagination) && data.equals(other.data);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.pagination, this.data);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PaginationStage builder() {
        return new Builder();
    }

    public interface PaginationStage {
        _FinalStage pagination(@NotNull WebhookListPagination pagination);

        Builder from(WebhookList other);
    }

    public interface _FinalStage {
        WebhookList build();

        _FinalStage data(List<Webhook> data);

        _FinalStage addData(Webhook data);

        _FinalStage addAllData(List<Webhook> data);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements PaginationStage, _FinalStage {
        private WebhookListPagination pagination;

        private List<Webhook> data = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(WebhookList other) {
            pagination(other.getPagination());
            data(other.getData());
            return this;
        }

        @java.lang.Override
        @JsonSetter("pagination")
        public _FinalStage pagination(@NotNull WebhookListPagination pagination) {
            this.pagination = Objects.requireNonNull(pagination, "pagination must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllData(List<Webhook> data) {
            this.data.addAll(data);
            return this;
        }

        @java.lang.Override
        public _FinalStage addData(Webhook data) {
            this.data.add(data);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public _FinalStage data(List<Webhook> data) {
            this.data.clear();
            this.data.addAll(data);
            return this;
        }

        @java.lang.Override
        public WebhookList build() {
            return new WebhookList(pagination, data, additionalProperties);
        }
    }
}
