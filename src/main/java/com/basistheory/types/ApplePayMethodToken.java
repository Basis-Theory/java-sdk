/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApplePayMethodToken.Builder.class)
public final class ApplePayMethodToken {
    private final Optional<PaymentData> paymentData;

    private final Optional<String> transactionIdentifier;

    private final Map<String, Object> additionalProperties;

    private ApplePayMethodToken(
            Optional<PaymentData> paymentData,
            Optional<String> transactionIdentifier,
            Map<String, Object> additionalProperties) {
        this.paymentData = paymentData;
        this.transactionIdentifier = transactionIdentifier;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("paymentData")
    public Optional<PaymentData> getPaymentData() {
        return paymentData;
    }

    @JsonProperty("transactionIdentifier")
    public Optional<String> getTransactionIdentifier() {
        return transactionIdentifier;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApplePayMethodToken && equalTo((ApplePayMethodToken) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApplePayMethodToken other) {
        return paymentData.equals(other.paymentData) && transactionIdentifier.equals(other.transactionIdentifier);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.paymentData, this.transactionIdentifier);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<PaymentData> paymentData = Optional.empty();

        private Optional<String> transactionIdentifier = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ApplePayMethodToken other) {
            paymentData(other.getPaymentData());
            transactionIdentifier(other.getTransactionIdentifier());
            return this;
        }

        @JsonSetter(value = "paymentData", nulls = Nulls.SKIP)
        public Builder paymentData(Optional<PaymentData> paymentData) {
            this.paymentData = paymentData;
            return this;
        }

        public Builder paymentData(PaymentData paymentData) {
            this.paymentData = Optional.ofNullable(paymentData);
            return this;
        }

        @JsonSetter(value = "transactionIdentifier", nulls = Nulls.SKIP)
        public Builder transactionIdentifier(Optional<String> transactionIdentifier) {
            this.transactionIdentifier = transactionIdentifier;
            return this;
        }

        public Builder transactionIdentifier(String transactionIdentifier) {
            this.transactionIdentifier = Optional.ofNullable(transactionIdentifier);
            return this;
        }

        public ApplePayMethodToken build() {
            return new ApplePayMethodToken(paymentData, transactionIdentifier, additionalProperties);
        }
    }
}
