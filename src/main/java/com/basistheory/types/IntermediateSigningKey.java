/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = IntermediateSigningKey.Builder.class)
public final class IntermediateSigningKey {
    private final Optional<String> signedKey;

    private final Optional<List<String>> signatures;

    private final Map<String, Object> additionalProperties;

    private IntermediateSigningKey(
            Optional<String> signedKey, Optional<List<String>> signatures, Map<String, Object> additionalProperties) {
        this.signedKey = signedKey;
        this.signatures = signatures;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("signedKey")
    public Optional<String> getSignedKey() {
        return signedKey;
    }

    @JsonProperty("signatures")
    public Optional<List<String>> getSignatures() {
        return signatures;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof IntermediateSigningKey && equalTo((IntermediateSigningKey) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(IntermediateSigningKey other) {
        return signedKey.equals(other.signedKey) && signatures.equals(other.signatures);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.signedKey, this.signatures);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> signedKey = Optional.empty();

        private Optional<List<String>> signatures = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(IntermediateSigningKey other) {
            signedKey(other.getSignedKey());
            signatures(other.getSignatures());
            return this;
        }

        @JsonSetter(value = "signedKey", nulls = Nulls.SKIP)
        public Builder signedKey(Optional<String> signedKey) {
            this.signedKey = signedKey;
            return this;
        }

        public Builder signedKey(String signedKey) {
            this.signedKey = Optional.ofNullable(signedKey);
            return this;
        }

        @JsonSetter(value = "signatures", nulls = Nulls.SKIP)
        public Builder signatures(Optional<List<String>> signatures) {
            this.signatures = signatures;
            return this;
        }

        public Builder signatures(List<String> signatures) {
            this.signatures = Optional.ofNullable(signatures);
            return this;
        }

        public IntermediateSigningKey build() {
            return new IntermediateSigningKey(signedKey, signatures, additionalProperties);
        }
    }
}
