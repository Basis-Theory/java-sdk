/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AccessRule.Builder.class)
public final class AccessRule {
    private final Optional<String> description;

    private final Optional<Integer> priority;

    private final Optional<String> container;

    private final Optional<String> transform;

    private final Optional<List<Condition>> conditions;

    private final Optional<List<String>> permissions;

    private final Map<String, Object> additionalProperties;

    private AccessRule(
            Optional<String> description,
            Optional<Integer> priority,
            Optional<String> container,
            Optional<String> transform,
            Optional<List<Condition>> conditions,
            Optional<List<String>> permissions,
            Map<String, Object> additionalProperties) {
        this.description = description;
        this.priority = priority;
        this.container = container;
        this.transform = transform;
        this.conditions = conditions;
        this.permissions = permissions;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @JsonProperty("priority")
    public Optional<Integer> getPriority() {
        return priority;
    }

    @JsonProperty("container")
    public Optional<String> getContainer() {
        return container;
    }

    @JsonProperty("transform")
    public Optional<String> getTransform() {
        return transform;
    }

    @JsonProperty("conditions")
    public Optional<List<Condition>> getConditions() {
        return conditions;
    }

    @JsonProperty("permissions")
    public Optional<List<String>> getPermissions() {
        return permissions;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AccessRule && equalTo((AccessRule) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AccessRule other) {
        return description.equals(other.description)
                && priority.equals(other.priority)
                && container.equals(other.container)
                && transform.equals(other.transform)
                && conditions.equals(other.conditions)
                && permissions.equals(other.permissions);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.description, this.priority, this.container, this.transform, this.conditions, this.permissions);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> description = Optional.empty();

        private Optional<Integer> priority = Optional.empty();

        private Optional<String> container = Optional.empty();

        private Optional<String> transform = Optional.empty();

        private Optional<List<Condition>> conditions = Optional.empty();

        private Optional<List<String>> permissions = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AccessRule other) {
            description(other.getDescription());
            priority(other.getPriority());
            container(other.getContainer());
            transform(other.getTransform());
            conditions(other.getConditions());
            permissions(other.getPermissions());
            return this;
        }

        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @JsonSetter(value = "priority", nulls = Nulls.SKIP)
        public Builder priority(Optional<Integer> priority) {
            this.priority = priority;
            return this;
        }

        public Builder priority(Integer priority) {
            this.priority = Optional.ofNullable(priority);
            return this;
        }

        @JsonSetter(value = "container", nulls = Nulls.SKIP)
        public Builder container(Optional<String> container) {
            this.container = container;
            return this;
        }

        public Builder container(String container) {
            this.container = Optional.ofNullable(container);
            return this;
        }

        @JsonSetter(value = "transform", nulls = Nulls.SKIP)
        public Builder transform(Optional<String> transform) {
            this.transform = transform;
            return this;
        }

        public Builder transform(String transform) {
            this.transform = Optional.ofNullable(transform);
            return this;
        }

        @JsonSetter(value = "conditions", nulls = Nulls.SKIP)
        public Builder conditions(Optional<List<Condition>> conditions) {
            this.conditions = conditions;
            return this;
        }

        public Builder conditions(List<Condition> conditions) {
            this.conditions = Optional.ofNullable(conditions);
            return this;
        }

        @JsonSetter(value = "permissions", nulls = Nulls.SKIP)
        public Builder permissions(Optional<List<String>> permissions) {
            this.permissions = permissions;
            return this;
        }

        public Builder permissions(List<String> permissions) {
            this.permissions = Optional.ofNullable(permissions);
            return this;
        }

        public AccessRule build() {
            return new AccessRule(
                    description, priority, container, transform, conditions, permissions, additionalProperties);
        }
    }
}
