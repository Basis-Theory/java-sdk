/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = NetworkTokenCryptogram.Builder.class)
public final class NetworkTokenCryptogram {
    private final Optional<String> cryptogram;

    private final Optional<String> eci;

    private final Map<String, Object> additionalProperties;

    private NetworkTokenCryptogram(
            Optional<String> cryptogram, Optional<String> eci, Map<String, Object> additionalProperties) {
        this.cryptogram = cryptogram;
        this.eci = eci;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("cryptogram")
    public Optional<String> getCryptogram() {
        return cryptogram;
    }

    @JsonProperty("eci")
    public Optional<String> getEci() {
        return eci;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NetworkTokenCryptogram && equalTo((NetworkTokenCryptogram) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NetworkTokenCryptogram other) {
        return cryptogram.equals(other.cryptogram) && eci.equals(other.eci);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.cryptogram, this.eci);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> cryptogram = Optional.empty();

        private Optional<String> eci = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(NetworkTokenCryptogram other) {
            cryptogram(other.getCryptogram());
            eci(other.getEci());
            return this;
        }

        @JsonSetter(value = "cryptogram", nulls = Nulls.SKIP)
        public Builder cryptogram(Optional<String> cryptogram) {
            this.cryptogram = cryptogram;
            return this;
        }

        public Builder cryptogram(String cryptogram) {
            this.cryptogram = Optional.ofNullable(cryptogram);
            return this;
        }

        @JsonSetter(value = "eci", nulls = Nulls.SKIP)
        public Builder eci(Optional<String> eci) {
            this.eci = eci;
            return this;
        }

        public Builder eci(String eci) {
            this.eci = Optional.ofNullable(eci);
            return this;
        }

        public NetworkTokenCryptogram build() {
            return new NetworkTokenCryptogram(cryptogram, eci, additionalProperties);
        }
    }
}
