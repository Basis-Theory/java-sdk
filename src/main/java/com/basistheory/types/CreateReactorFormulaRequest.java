/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateReactorFormulaRequest.Builder.class)
public final class CreateReactorFormulaRequest {
    private final Optional<String> id;

    private final String type;

    private final String name;

    private final Optional<String> description;

    private final Optional<String> icon;

    private final Optional<String> code;

    private final Optional<List<ReactorFormulaConfiguration>> configuration;

    private final Optional<List<ReactorFormulaRequestParameter>> requestParameters;

    private final Map<String, Object> additionalProperties;

    private CreateReactorFormulaRequest(
            Optional<String> id,
            String type,
            String name,
            Optional<String> description,
            Optional<String> icon,
            Optional<String> code,
            Optional<List<ReactorFormulaConfiguration>> configuration,
            Optional<List<ReactorFormulaRequestParameter>> requestParameters,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.type = type;
        this.name = name;
        this.description = description;
        this.icon = icon;
        this.code = code;
        this.configuration = configuration;
        this.requestParameters = requestParameters;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    @JsonProperty("type")
    public String getType() {
        return type;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @JsonProperty("icon")
    public Optional<String> getIcon() {
        return icon;
    }

    @JsonProperty("code")
    public Optional<String> getCode() {
        return code;
    }

    @JsonProperty("configuration")
    public Optional<List<ReactorFormulaConfiguration>> getConfiguration() {
        return configuration;
    }

    @JsonProperty("request_parameters")
    public Optional<List<ReactorFormulaRequestParameter>> getRequestParameters() {
        return requestParameters;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateReactorFormulaRequest && equalTo((CreateReactorFormulaRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateReactorFormulaRequest other) {
        return id.equals(other.id)
                && type.equals(other.type)
                && name.equals(other.name)
                && description.equals(other.description)
                && icon.equals(other.icon)
                && code.equals(other.code)
                && configuration.equals(other.configuration)
                && requestParameters.equals(other.requestParameters);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.type,
                this.name,
                this.description,
                this.icon,
                this.code,
                this.configuration,
                this.requestParameters);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        NameStage type(@NotNull String type);

        Builder from(CreateReactorFormulaRequest other);
    }

    public interface NameStage {
        _FinalStage name(@NotNull String name);
    }

    public interface _FinalStage {
        CreateReactorFormulaRequest build();

        _FinalStage id(Optional<String> id);

        _FinalStage id(String id);

        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);

        _FinalStage icon(Optional<String> icon);

        _FinalStage icon(String icon);

        _FinalStage code(Optional<String> code);

        _FinalStage code(String code);

        _FinalStage configuration(Optional<List<ReactorFormulaConfiguration>> configuration);

        _FinalStage configuration(List<ReactorFormulaConfiguration> configuration);

        _FinalStage requestParameters(Optional<List<ReactorFormulaRequestParameter>> requestParameters);

        _FinalStage requestParameters(List<ReactorFormulaRequestParameter> requestParameters);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, NameStage, _FinalStage {
        private String type;

        private String name;

        private Optional<List<ReactorFormulaRequestParameter>> requestParameters = Optional.empty();

        private Optional<List<ReactorFormulaConfiguration>> configuration = Optional.empty();

        private Optional<String> code = Optional.empty();

        private Optional<String> icon = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> id = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateReactorFormulaRequest other) {
            id(other.getId());
            type(other.getType());
            name(other.getName());
            description(other.getDescription());
            icon(other.getIcon());
            code(other.getCode());
            configuration(other.getConfiguration());
            requestParameters(other.getRequestParameters());
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public NameStage type(@NotNull String type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage requestParameters(List<ReactorFormulaRequestParameter> requestParameters) {
            this.requestParameters = Optional.ofNullable(requestParameters);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "request_parameters", nulls = Nulls.SKIP)
        public _FinalStage requestParameters(Optional<List<ReactorFormulaRequestParameter>> requestParameters) {
            this.requestParameters = requestParameters;
            return this;
        }

        @java.lang.Override
        public _FinalStage configuration(List<ReactorFormulaConfiguration> configuration) {
            this.configuration = Optional.ofNullable(configuration);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "configuration", nulls = Nulls.SKIP)
        public _FinalStage configuration(Optional<List<ReactorFormulaConfiguration>> configuration) {
            this.configuration = configuration;
            return this;
        }

        @java.lang.Override
        public _FinalStage code(String code) {
            this.code = Optional.ofNullable(code);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "code", nulls = Nulls.SKIP)
        public _FinalStage code(Optional<String> code) {
            this.code = code;
            return this;
        }

        @java.lang.Override
        public _FinalStage icon(String icon) {
            this.icon = Optional.ofNullable(icon);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "icon", nulls = Nulls.SKIP)
        public _FinalStage icon(Optional<String> icon) {
            this.icon = icon;
            return this;
        }

        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        @java.lang.Override
        public _FinalStage id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage id(Optional<String> id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public CreateReactorFormulaRequest build() {
            return new CreateReactorFormulaRequest(
                    id, type, name, description, icon, code, configuration, requestParameters, additionalProperties);
        }
    }
}
