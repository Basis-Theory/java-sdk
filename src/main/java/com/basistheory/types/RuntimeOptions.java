/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RuntimeOptions.Builder.class)
public final class RuntimeOptions {
    private final Optional<Map<String, Optional<String>>> dependencies;

    private final Map<String, Object> additionalProperties;

    private RuntimeOptions(
            Optional<Map<String, Optional<String>>> dependencies, Map<String, Object> additionalProperties) {
        this.dependencies = dependencies;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("dependencies")
    public Optional<Map<String, Optional<String>>> getDependencies() {
        return dependencies;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RuntimeOptions && equalTo((RuntimeOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RuntimeOptions other) {
        return dependencies.equals(other.dependencies);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.dependencies);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Map<String, Optional<String>>> dependencies = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RuntimeOptions other) {
            dependencies(other.getDependencies());
            return this;
        }

        @JsonSetter(value = "dependencies", nulls = Nulls.SKIP)
        public Builder dependencies(Optional<Map<String, Optional<String>>> dependencies) {
            this.dependencies = dependencies;
            return this;
        }

        public Builder dependencies(Map<String, Optional<String>> dependencies) {
            this.dependencies = Optional.ofNullable(dependencies);
            return this;
        }

        public RuntimeOptions build() {
            return new RuntimeOptions(dependencies, additionalProperties);
        }
    }
}
