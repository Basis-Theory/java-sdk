/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TokenServiceProviderDetails.Builder.class)
public final class TokenServiceProviderDetails {
    private final Optional<String> tsp;

    private final Optional<String> authMethod;

    private final Optional<String> messageId;

    private final Optional<String> eciIndicator;

    private final Optional<AssuranceDetails> assuranceDetails;

    private final Optional<String> transactionId;

    private final Optional<String> currencyCode;

    private final Optional<Long> transactionAmount;

    private final Optional<String> cardholderName;

    private final Optional<String> deviceManufacturerIdentifier;

    private final Optional<String> paymentDataType;

    private final Optional<String> merchantTokenIdentifier;

    private final Optional<List<AuthenticationResponse>> authenticationResponses;

    private final Optional<String> status;

    private final Map<String, Object> additionalProperties;

    private TokenServiceProviderDetails(
            Optional<String> tsp,
            Optional<String> authMethod,
            Optional<String> messageId,
            Optional<String> eciIndicator,
            Optional<AssuranceDetails> assuranceDetails,
            Optional<String> transactionId,
            Optional<String> currencyCode,
            Optional<Long> transactionAmount,
            Optional<String> cardholderName,
            Optional<String> deviceManufacturerIdentifier,
            Optional<String> paymentDataType,
            Optional<String> merchantTokenIdentifier,
            Optional<List<AuthenticationResponse>> authenticationResponses,
            Optional<String> status,
            Map<String, Object> additionalProperties) {
        this.tsp = tsp;
        this.authMethod = authMethod;
        this.messageId = messageId;
        this.eciIndicator = eciIndicator;
        this.assuranceDetails = assuranceDetails;
        this.transactionId = transactionId;
        this.currencyCode = currencyCode;
        this.transactionAmount = transactionAmount;
        this.cardholderName = cardholderName;
        this.deviceManufacturerIdentifier = deviceManufacturerIdentifier;
        this.paymentDataType = paymentDataType;
        this.merchantTokenIdentifier = merchantTokenIdentifier;
        this.authenticationResponses = authenticationResponses;
        this.status = status;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("tsp")
    public Optional<String> getTsp() {
        return tsp;
    }

    @JsonProperty("auth_method")
    public Optional<String> getAuthMethod() {
        return authMethod;
    }

    @JsonProperty("message_id")
    public Optional<String> getMessageId() {
        return messageId;
    }

    @JsonProperty("eci_indicator")
    public Optional<String> getEciIndicator() {
        return eciIndicator;
    }

    @JsonProperty("assurance_details")
    public Optional<AssuranceDetails> getAssuranceDetails() {
        return assuranceDetails;
    }

    @JsonProperty("transaction_id")
    public Optional<String> getTransactionId() {
        return transactionId;
    }

    @JsonProperty("currency_code")
    public Optional<String> getCurrencyCode() {
        return currencyCode;
    }

    @JsonProperty("transaction_amount")
    public Optional<Long> getTransactionAmount() {
        return transactionAmount;
    }

    @JsonProperty("cardholder_name")
    public Optional<String> getCardholderName() {
        return cardholderName;
    }

    @JsonProperty("device_manufacturer_identifier")
    public Optional<String> getDeviceManufacturerIdentifier() {
        return deviceManufacturerIdentifier;
    }

    @JsonProperty("payment_data_type")
    public Optional<String> getPaymentDataType() {
        return paymentDataType;
    }

    @JsonProperty("merchant_token_identifier")
    public Optional<String> getMerchantTokenIdentifier() {
        return merchantTokenIdentifier;
    }

    @JsonProperty("authentication_responses")
    public Optional<List<AuthenticationResponse>> getAuthenticationResponses() {
        return authenticationResponses;
    }

    @JsonProperty("status")
    public Optional<String> getStatus() {
        return status;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TokenServiceProviderDetails && equalTo((TokenServiceProviderDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TokenServiceProviderDetails other) {
        return tsp.equals(other.tsp)
                && authMethod.equals(other.authMethod)
                && messageId.equals(other.messageId)
                && eciIndicator.equals(other.eciIndicator)
                && assuranceDetails.equals(other.assuranceDetails)
                && transactionId.equals(other.transactionId)
                && currencyCode.equals(other.currencyCode)
                && transactionAmount.equals(other.transactionAmount)
                && cardholderName.equals(other.cardholderName)
                && deviceManufacturerIdentifier.equals(other.deviceManufacturerIdentifier)
                && paymentDataType.equals(other.paymentDataType)
                && merchantTokenIdentifier.equals(other.merchantTokenIdentifier)
                && authenticationResponses.equals(other.authenticationResponses)
                && status.equals(other.status);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.tsp,
                this.authMethod,
                this.messageId,
                this.eciIndicator,
                this.assuranceDetails,
                this.transactionId,
                this.currencyCode,
                this.transactionAmount,
                this.cardholderName,
                this.deviceManufacturerIdentifier,
                this.paymentDataType,
                this.merchantTokenIdentifier,
                this.authenticationResponses,
                this.status);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> tsp = Optional.empty();

        private Optional<String> authMethod = Optional.empty();

        private Optional<String> messageId = Optional.empty();

        private Optional<String> eciIndicator = Optional.empty();

        private Optional<AssuranceDetails> assuranceDetails = Optional.empty();

        private Optional<String> transactionId = Optional.empty();

        private Optional<String> currencyCode = Optional.empty();

        private Optional<Long> transactionAmount = Optional.empty();

        private Optional<String> cardholderName = Optional.empty();

        private Optional<String> deviceManufacturerIdentifier = Optional.empty();

        private Optional<String> paymentDataType = Optional.empty();

        private Optional<String> merchantTokenIdentifier = Optional.empty();

        private Optional<List<AuthenticationResponse>> authenticationResponses = Optional.empty();

        private Optional<String> status = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TokenServiceProviderDetails other) {
            tsp(other.getTsp());
            authMethod(other.getAuthMethod());
            messageId(other.getMessageId());
            eciIndicator(other.getEciIndicator());
            assuranceDetails(other.getAssuranceDetails());
            transactionId(other.getTransactionId());
            currencyCode(other.getCurrencyCode());
            transactionAmount(other.getTransactionAmount());
            cardholderName(other.getCardholderName());
            deviceManufacturerIdentifier(other.getDeviceManufacturerIdentifier());
            paymentDataType(other.getPaymentDataType());
            merchantTokenIdentifier(other.getMerchantTokenIdentifier());
            authenticationResponses(other.getAuthenticationResponses());
            status(other.getStatus());
            return this;
        }

        @JsonSetter(value = "tsp", nulls = Nulls.SKIP)
        public Builder tsp(Optional<String> tsp) {
            this.tsp = tsp;
            return this;
        }

        public Builder tsp(String tsp) {
            this.tsp = Optional.ofNullable(tsp);
            return this;
        }

        @JsonSetter(value = "auth_method", nulls = Nulls.SKIP)
        public Builder authMethod(Optional<String> authMethod) {
            this.authMethod = authMethod;
            return this;
        }

        public Builder authMethod(String authMethod) {
            this.authMethod = Optional.ofNullable(authMethod);
            return this;
        }

        @JsonSetter(value = "message_id", nulls = Nulls.SKIP)
        public Builder messageId(Optional<String> messageId) {
            this.messageId = messageId;
            return this;
        }

        public Builder messageId(String messageId) {
            this.messageId = Optional.ofNullable(messageId);
            return this;
        }

        @JsonSetter(value = "eci_indicator", nulls = Nulls.SKIP)
        public Builder eciIndicator(Optional<String> eciIndicator) {
            this.eciIndicator = eciIndicator;
            return this;
        }

        public Builder eciIndicator(String eciIndicator) {
            this.eciIndicator = Optional.ofNullable(eciIndicator);
            return this;
        }

        @JsonSetter(value = "assurance_details", nulls = Nulls.SKIP)
        public Builder assuranceDetails(Optional<AssuranceDetails> assuranceDetails) {
            this.assuranceDetails = assuranceDetails;
            return this;
        }

        public Builder assuranceDetails(AssuranceDetails assuranceDetails) {
            this.assuranceDetails = Optional.ofNullable(assuranceDetails);
            return this;
        }

        @JsonSetter(value = "transaction_id", nulls = Nulls.SKIP)
        public Builder transactionId(Optional<String> transactionId) {
            this.transactionId = transactionId;
            return this;
        }

        public Builder transactionId(String transactionId) {
            this.transactionId = Optional.ofNullable(transactionId);
            return this;
        }

        @JsonSetter(value = "currency_code", nulls = Nulls.SKIP)
        public Builder currencyCode(Optional<String> currencyCode) {
            this.currencyCode = currencyCode;
            return this;
        }

        public Builder currencyCode(String currencyCode) {
            this.currencyCode = Optional.ofNullable(currencyCode);
            return this;
        }

        @JsonSetter(value = "transaction_amount", nulls = Nulls.SKIP)
        public Builder transactionAmount(Optional<Long> transactionAmount) {
            this.transactionAmount = transactionAmount;
            return this;
        }

        public Builder transactionAmount(Long transactionAmount) {
            this.transactionAmount = Optional.ofNullable(transactionAmount);
            return this;
        }

        @JsonSetter(value = "cardholder_name", nulls = Nulls.SKIP)
        public Builder cardholderName(Optional<String> cardholderName) {
            this.cardholderName = cardholderName;
            return this;
        }

        public Builder cardholderName(String cardholderName) {
            this.cardholderName = Optional.ofNullable(cardholderName);
            return this;
        }

        @JsonSetter(value = "device_manufacturer_identifier", nulls = Nulls.SKIP)
        public Builder deviceManufacturerIdentifier(Optional<String> deviceManufacturerIdentifier) {
            this.deviceManufacturerIdentifier = deviceManufacturerIdentifier;
            return this;
        }

        public Builder deviceManufacturerIdentifier(String deviceManufacturerIdentifier) {
            this.deviceManufacturerIdentifier = Optional.ofNullable(deviceManufacturerIdentifier);
            return this;
        }

        @JsonSetter(value = "payment_data_type", nulls = Nulls.SKIP)
        public Builder paymentDataType(Optional<String> paymentDataType) {
            this.paymentDataType = paymentDataType;
            return this;
        }

        public Builder paymentDataType(String paymentDataType) {
            this.paymentDataType = Optional.ofNullable(paymentDataType);
            return this;
        }

        @JsonSetter(value = "merchant_token_identifier", nulls = Nulls.SKIP)
        public Builder merchantTokenIdentifier(Optional<String> merchantTokenIdentifier) {
            this.merchantTokenIdentifier = merchantTokenIdentifier;
            return this;
        }

        public Builder merchantTokenIdentifier(String merchantTokenIdentifier) {
            this.merchantTokenIdentifier = Optional.ofNullable(merchantTokenIdentifier);
            return this;
        }

        @JsonSetter(value = "authentication_responses", nulls = Nulls.SKIP)
        public Builder authenticationResponses(Optional<List<AuthenticationResponse>> authenticationResponses) {
            this.authenticationResponses = authenticationResponses;
            return this;
        }

        public Builder authenticationResponses(List<AuthenticationResponse> authenticationResponses) {
            this.authenticationResponses = Optional.ofNullable(authenticationResponses);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(String status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        public TokenServiceProviderDetails build() {
            return new TokenServiceProviderDetails(
                    tsp,
                    authMethod,
                    messageId,
                    eciIndicator,
                    assuranceDetails,
                    transactionId,
                    currencyCode,
                    transactionAmount,
                    cardholderName,
                    deviceManufacturerIdentifier,
                    paymentDataType,
                    merchantTokenIdentifier,
                    authenticationResponses,
                    status,
                    additionalProperties);
        }
    }
}
