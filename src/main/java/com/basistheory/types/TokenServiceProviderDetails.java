/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TokenServiceProviderDetails.Builder.class)
public final class TokenServiceProviderDetails {
    private final Optional<String> tsp;

    private final Optional<String> authMethod;

    private final Optional<String> messageId;

    private final Optional<String> eciIndicator;

    private final Optional<AssuranceDetails> assuranceDetails;

    private final Map<String, Object> additionalProperties;

    private TokenServiceProviderDetails(
            Optional<String> tsp,
            Optional<String> authMethod,
            Optional<String> messageId,
            Optional<String> eciIndicator,
            Optional<AssuranceDetails> assuranceDetails,
            Map<String, Object> additionalProperties) {
        this.tsp = tsp;
        this.authMethod = authMethod;
        this.messageId = messageId;
        this.eciIndicator = eciIndicator;
        this.assuranceDetails = assuranceDetails;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("tsp")
    public Optional<String> getTsp() {
        return tsp;
    }

    @JsonProperty("auth_method")
    public Optional<String> getAuthMethod() {
        return authMethod;
    }

    @JsonProperty("message_id")
    public Optional<String> getMessageId() {
        return messageId;
    }

    @JsonProperty("eci_indicator")
    public Optional<String> getEciIndicator() {
        return eciIndicator;
    }

    @JsonProperty("assurance_details")
    public Optional<AssuranceDetails> getAssuranceDetails() {
        return assuranceDetails;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TokenServiceProviderDetails && equalTo((TokenServiceProviderDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TokenServiceProviderDetails other) {
        return tsp.equals(other.tsp)
                && authMethod.equals(other.authMethod)
                && messageId.equals(other.messageId)
                && eciIndicator.equals(other.eciIndicator)
                && assuranceDetails.equals(other.assuranceDetails);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.tsp, this.authMethod, this.messageId, this.eciIndicator, this.assuranceDetails);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> tsp = Optional.empty();

        private Optional<String> authMethod = Optional.empty();

        private Optional<String> messageId = Optional.empty();

        private Optional<String> eciIndicator = Optional.empty();

        private Optional<AssuranceDetails> assuranceDetails = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TokenServiceProviderDetails other) {
            tsp(other.getTsp());
            authMethod(other.getAuthMethod());
            messageId(other.getMessageId());
            eciIndicator(other.getEciIndicator());
            assuranceDetails(other.getAssuranceDetails());
            return this;
        }

        @JsonSetter(value = "tsp", nulls = Nulls.SKIP)
        public Builder tsp(Optional<String> tsp) {
            this.tsp = tsp;
            return this;
        }

        public Builder tsp(String tsp) {
            this.tsp = Optional.ofNullable(tsp);
            return this;
        }

        @JsonSetter(value = "auth_method", nulls = Nulls.SKIP)
        public Builder authMethod(Optional<String> authMethod) {
            this.authMethod = authMethod;
            return this;
        }

        public Builder authMethod(String authMethod) {
            this.authMethod = Optional.ofNullable(authMethod);
            return this;
        }

        @JsonSetter(value = "message_id", nulls = Nulls.SKIP)
        public Builder messageId(Optional<String> messageId) {
            this.messageId = messageId;
            return this;
        }

        public Builder messageId(String messageId) {
            this.messageId = Optional.ofNullable(messageId);
            return this;
        }

        @JsonSetter(value = "eci_indicator", nulls = Nulls.SKIP)
        public Builder eciIndicator(Optional<String> eciIndicator) {
            this.eciIndicator = eciIndicator;
            return this;
        }

        public Builder eciIndicator(String eciIndicator) {
            this.eciIndicator = Optional.ofNullable(eciIndicator);
            return this;
        }

        @JsonSetter(value = "assurance_details", nulls = Nulls.SKIP)
        public Builder assuranceDetails(Optional<AssuranceDetails> assuranceDetails) {
            this.assuranceDetails = assuranceDetails;
            return this;
        }

        public Builder assuranceDetails(AssuranceDetails assuranceDetails) {
            this.assuranceDetails = Optional.ofNullable(assuranceDetails);
            return this;
        }

        public TokenServiceProviderDetails build() {
            return new TokenServiceProviderDetails(
                    tsp, authMethod, messageId, eciIndicator, assuranceDetails, additionalProperties);
        }
    }
}
