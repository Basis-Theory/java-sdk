/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GooglePayTokenizeRequest.Builder.class)
public final class GooglePayTokenizeRequest {
    private final Optional<GooglePaymentMethodToken> googlePaymentMethodToken;

    private final Map<String, Object> additionalProperties;

    private GooglePayTokenizeRequest(
            Optional<GooglePaymentMethodToken> googlePaymentMethodToken, Map<String, Object> additionalProperties) {
        this.googlePaymentMethodToken = googlePaymentMethodToken;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("google_payment_method_token")
    public Optional<GooglePaymentMethodToken> getGooglePaymentMethodToken() {
        return googlePaymentMethodToken;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GooglePayTokenizeRequest && equalTo((GooglePayTokenizeRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GooglePayTokenizeRequest other) {
        return googlePaymentMethodToken.equals(other.googlePaymentMethodToken);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.googlePaymentMethodToken);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<GooglePaymentMethodToken> googlePaymentMethodToken = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GooglePayTokenizeRequest other) {
            googlePaymentMethodToken(other.getGooglePaymentMethodToken());
            return this;
        }

        @JsonSetter(value = "google_payment_method_token", nulls = Nulls.SKIP)
        public Builder googlePaymentMethodToken(Optional<GooglePaymentMethodToken> googlePaymentMethodToken) {
            this.googlePaymentMethodToken = googlePaymentMethodToken;
            return this;
        }

        public Builder googlePaymentMethodToken(GooglePaymentMethodToken googlePaymentMethodToken) {
            this.googlePaymentMethodToken = Optional.ofNullable(googlePaymentMethodToken);
            return this;
        }

        public GooglePayTokenizeRequest build() {
            return new GooglePayTokenizeRequest(googlePaymentMethodToken, additionalProperties);
        }
    }
}
