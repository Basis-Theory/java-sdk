/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ProxyTransformOptions.Builder.class)
public final class ProxyTransformOptions {
    private final Optional<CreateTokenRequest> token;

    private final Optional<String> identifier;

    private final Optional<String> value;

    private final Optional<String> location;

    private final Optional<String> runtime;

    private final Optional<Map<String, Optional<String>>> dependencies;

    private final Map<String, Object> additionalProperties;

    private ProxyTransformOptions(
            Optional<CreateTokenRequest> token,
            Optional<String> identifier,
            Optional<String> value,
            Optional<String> location,
            Optional<String> runtime,
            Optional<Map<String, Optional<String>>> dependencies,
            Map<String, Object> additionalProperties) {
        this.token = token;
        this.identifier = identifier;
        this.value = value;
        this.location = location;
        this.runtime = runtime;
        this.dependencies = dependencies;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("token")
    public Optional<CreateTokenRequest> getToken() {
        return token;
    }

    @JsonProperty("identifier")
    public Optional<String> getIdentifier() {
        return identifier;
    }

    @JsonProperty("value")
    public Optional<String> getValue() {
        return value;
    }

    @JsonProperty("location")
    public Optional<String> getLocation() {
        return location;
    }

    @JsonProperty("runtime")
    public Optional<String> getRuntime() {
        return runtime;
    }

    @JsonProperty("dependencies")
    public Optional<Map<String, Optional<String>>> getDependencies() {
        return dependencies;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProxyTransformOptions && equalTo((ProxyTransformOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProxyTransformOptions other) {
        return token.equals(other.token)
                && identifier.equals(other.identifier)
                && value.equals(other.value)
                && location.equals(other.location)
                && runtime.equals(other.runtime)
                && dependencies.equals(other.dependencies);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.token, this.identifier, this.value, this.location, this.runtime, this.dependencies);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<CreateTokenRequest> token = Optional.empty();

        private Optional<String> identifier = Optional.empty();

        private Optional<String> value = Optional.empty();

        private Optional<String> location = Optional.empty();

        private Optional<String> runtime = Optional.empty();

        private Optional<Map<String, Optional<String>>> dependencies = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ProxyTransformOptions other) {
            token(other.getToken());
            identifier(other.getIdentifier());
            value(other.getValue());
            location(other.getLocation());
            runtime(other.getRuntime());
            dependencies(other.getDependencies());
            return this;
        }

        @JsonSetter(value = "token", nulls = Nulls.SKIP)
        public Builder token(Optional<CreateTokenRequest> token) {
            this.token = token;
            return this;
        }

        public Builder token(CreateTokenRequest token) {
            this.token = Optional.ofNullable(token);
            return this;
        }

        @JsonSetter(value = "identifier", nulls = Nulls.SKIP)
        public Builder identifier(Optional<String> identifier) {
            this.identifier = identifier;
            return this;
        }

        public Builder identifier(String identifier) {
            this.identifier = Optional.ofNullable(identifier);
            return this;
        }

        @JsonSetter(value = "value", nulls = Nulls.SKIP)
        public Builder value(Optional<String> value) {
            this.value = value;
            return this;
        }

        public Builder value(String value) {
            this.value = Optional.ofNullable(value);
            return this;
        }

        @JsonSetter(value = "location", nulls = Nulls.SKIP)
        public Builder location(Optional<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(String location) {
            this.location = Optional.ofNullable(location);
            return this;
        }

        @JsonSetter(value = "runtime", nulls = Nulls.SKIP)
        public Builder runtime(Optional<String> runtime) {
            this.runtime = runtime;
            return this;
        }

        public Builder runtime(String runtime) {
            this.runtime = Optional.ofNullable(runtime);
            return this;
        }

        @JsonSetter(value = "dependencies", nulls = Nulls.SKIP)
        public Builder dependencies(Optional<Map<String, Optional<String>>> dependencies) {
            this.dependencies = dependencies;
            return this;
        }

        public Builder dependencies(Map<String, Optional<String>> dependencies) {
            this.dependencies = Optional.ofNullable(dependencies);
            return this;
        }

        public ProxyTransformOptions build() {
            return new ProxyTransformOptions(
                    token, identifier, value, location, runtime, dependencies, additionalProperties);
        }
    }
}
