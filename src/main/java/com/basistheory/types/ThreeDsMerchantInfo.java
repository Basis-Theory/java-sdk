/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ThreeDsMerchantInfo.Builder.class)
public final class ThreeDsMerchantInfo {
    private final Optional<String> mid;

    private final Optional<String> acquirerBin;

    private final Optional<String> name;

    private final Optional<String> countryCode;

    private final Optional<String> categoryCode;

    private final Optional<String> url;

    private final Optional<ThreeDsMerchantRiskInfo> riskInfo;

    private final Map<String, Object> additionalProperties;

    private ThreeDsMerchantInfo(
            Optional<String> mid,
            Optional<String> acquirerBin,
            Optional<String> name,
            Optional<String> countryCode,
            Optional<String> categoryCode,
            Optional<String> url,
            Optional<ThreeDsMerchantRiskInfo> riskInfo,
            Map<String, Object> additionalProperties) {
        this.mid = mid;
        this.acquirerBin = acquirerBin;
        this.name = name;
        this.countryCode = countryCode;
        this.categoryCode = categoryCode;
        this.url = url;
        this.riskInfo = riskInfo;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("mid")
    public Optional<String> getMid() {
        return mid;
    }

    @JsonProperty("acquirer_bin")
    public Optional<String> getAcquirerBin() {
        return acquirerBin;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("country_code")
    public Optional<String> getCountryCode() {
        return countryCode;
    }

    @JsonProperty("category_code")
    public Optional<String> getCategoryCode() {
        return categoryCode;
    }

    @JsonProperty("url")
    public Optional<String> getUrl() {
        return url;
    }

    @JsonProperty("risk_info")
    public Optional<ThreeDsMerchantRiskInfo> getRiskInfo() {
        return riskInfo;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ThreeDsMerchantInfo && equalTo((ThreeDsMerchantInfo) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ThreeDsMerchantInfo other) {
        return mid.equals(other.mid)
                && acquirerBin.equals(other.acquirerBin)
                && name.equals(other.name)
                && countryCode.equals(other.countryCode)
                && categoryCode.equals(other.categoryCode)
                && url.equals(other.url)
                && riskInfo.equals(other.riskInfo);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.mid, this.acquirerBin, this.name, this.countryCode, this.categoryCode, this.url, this.riskInfo);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> mid = Optional.empty();

        private Optional<String> acquirerBin = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> countryCode = Optional.empty();

        private Optional<String> categoryCode = Optional.empty();

        private Optional<String> url = Optional.empty();

        private Optional<ThreeDsMerchantRiskInfo> riskInfo = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ThreeDsMerchantInfo other) {
            mid(other.getMid());
            acquirerBin(other.getAcquirerBin());
            name(other.getName());
            countryCode(other.getCountryCode());
            categoryCode(other.getCategoryCode());
            url(other.getUrl());
            riskInfo(other.getRiskInfo());
            return this;
        }

        @JsonSetter(value = "mid", nulls = Nulls.SKIP)
        public Builder mid(Optional<String> mid) {
            this.mid = mid;
            return this;
        }

        public Builder mid(String mid) {
            this.mid = Optional.ofNullable(mid);
            return this;
        }

        @JsonSetter(value = "acquirer_bin", nulls = Nulls.SKIP)
        public Builder acquirerBin(Optional<String> acquirerBin) {
            this.acquirerBin = acquirerBin;
            return this;
        }

        public Builder acquirerBin(String acquirerBin) {
            this.acquirerBin = Optional.ofNullable(acquirerBin);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "country_code", nulls = Nulls.SKIP)
        public Builder countryCode(Optional<String> countryCode) {
            this.countryCode = countryCode;
            return this;
        }

        public Builder countryCode(String countryCode) {
            this.countryCode = Optional.ofNullable(countryCode);
            return this;
        }

        @JsonSetter(value = "category_code", nulls = Nulls.SKIP)
        public Builder categoryCode(Optional<String> categoryCode) {
            this.categoryCode = categoryCode;
            return this;
        }

        public Builder categoryCode(String categoryCode) {
            this.categoryCode = Optional.ofNullable(categoryCode);
            return this;
        }

        @JsonSetter(value = "url", nulls = Nulls.SKIP)
        public Builder url(Optional<String> url) {
            this.url = url;
            return this;
        }

        public Builder url(String url) {
            this.url = Optional.ofNullable(url);
            return this;
        }

        @JsonSetter(value = "risk_info", nulls = Nulls.SKIP)
        public Builder riskInfo(Optional<ThreeDsMerchantRiskInfo> riskInfo) {
            this.riskInfo = riskInfo;
            return this;
        }

        public Builder riskInfo(ThreeDsMerchantRiskInfo riskInfo) {
            this.riskInfo = Optional.ofNullable(riskInfo);
            return this;
        }

        public ThreeDsMerchantInfo build() {
            return new ThreeDsMerchantInfo(
                    mid, acquirerBin, name, countryCode, categoryCode, url, riskInfo, additionalProperties);
        }
    }
}
