/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CardDetailsResponse.Builder.class)
public final class CardDetailsResponse {
    private final Optional<String> brand;

    private final Optional<String> funding;

    private final Optional<String> segment;

    private final Optional<CardIssuerDetails> issuer;

    private final Optional<List<AdditionalCardDetail>> additional;

    private final Map<String, Object> additionalProperties;

    private CardDetailsResponse(
            Optional<String> brand,
            Optional<String> funding,
            Optional<String> segment,
            Optional<CardIssuerDetails> issuer,
            Optional<List<AdditionalCardDetail>> additional,
            Map<String, Object> additionalProperties) {
        this.brand = brand;
        this.funding = funding;
        this.segment = segment;
        this.issuer = issuer;
        this.additional = additional;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("brand")
    public Optional<String> getBrand() {
        return brand;
    }

    @JsonProperty("funding")
    public Optional<String> getFunding() {
        return funding;
    }

    @JsonProperty("segment")
    public Optional<String> getSegment() {
        return segment;
    }

    @JsonProperty("issuer")
    public Optional<CardIssuerDetails> getIssuer() {
        return issuer;
    }

    @JsonProperty("additional")
    public Optional<List<AdditionalCardDetail>> getAdditional() {
        return additional;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CardDetailsResponse && equalTo((CardDetailsResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CardDetailsResponse other) {
        return brand.equals(other.brand)
                && funding.equals(other.funding)
                && segment.equals(other.segment)
                && issuer.equals(other.issuer)
                && additional.equals(other.additional);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.brand, this.funding, this.segment, this.issuer, this.additional);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> brand = Optional.empty();

        private Optional<String> funding = Optional.empty();

        private Optional<String> segment = Optional.empty();

        private Optional<CardIssuerDetails> issuer = Optional.empty();

        private Optional<List<AdditionalCardDetail>> additional = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CardDetailsResponse other) {
            brand(other.getBrand());
            funding(other.getFunding());
            segment(other.getSegment());
            issuer(other.getIssuer());
            additional(other.getAdditional());
            return this;
        }

        @JsonSetter(value = "brand", nulls = Nulls.SKIP)
        public Builder brand(Optional<String> brand) {
            this.brand = brand;
            return this;
        }

        public Builder brand(String brand) {
            this.brand = Optional.ofNullable(brand);
            return this;
        }

        @JsonSetter(value = "funding", nulls = Nulls.SKIP)
        public Builder funding(Optional<String> funding) {
            this.funding = funding;
            return this;
        }

        public Builder funding(String funding) {
            this.funding = Optional.ofNullable(funding);
            return this;
        }

        @JsonSetter(value = "segment", nulls = Nulls.SKIP)
        public Builder segment(Optional<String> segment) {
            this.segment = segment;
            return this;
        }

        public Builder segment(String segment) {
            this.segment = Optional.ofNullable(segment);
            return this;
        }

        @JsonSetter(value = "issuer", nulls = Nulls.SKIP)
        public Builder issuer(Optional<CardIssuerDetails> issuer) {
            this.issuer = issuer;
            return this;
        }

        public Builder issuer(CardIssuerDetails issuer) {
            this.issuer = Optional.ofNullable(issuer);
            return this;
        }

        @JsonSetter(value = "additional", nulls = Nulls.SKIP)
        public Builder additional(Optional<List<AdditionalCardDetail>> additional) {
            this.additional = additional;
            return this;
        }

        public Builder additional(List<AdditionalCardDetail> additional) {
            this.additional = Optional.ofNullable(additional);
            return this;
        }

        public CardDetailsResponse build() {
            return new CardDetailsResponse(brand, funding, segment, issuer, additional, additionalProperties);
        }
    }
}
