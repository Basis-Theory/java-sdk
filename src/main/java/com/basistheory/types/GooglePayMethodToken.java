/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GooglePayMethodToken.Builder.class)
public final class GooglePayMethodToken {
    private final Optional<String> protocolVersion;

    private final Optional<String> signature;

    private final Optional<IntermediateSigningKey> intermediateSigningKey;

    private final Optional<String> signedMessage;

    private final Map<String, Object> additionalProperties;

    private GooglePayMethodToken(
            Optional<String> protocolVersion,
            Optional<String> signature,
            Optional<IntermediateSigningKey> intermediateSigningKey,
            Optional<String> signedMessage,
            Map<String, Object> additionalProperties) {
        this.protocolVersion = protocolVersion;
        this.signature = signature;
        this.intermediateSigningKey = intermediateSigningKey;
        this.signedMessage = signedMessage;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("protocolVersion")
    public Optional<String> getProtocolVersion() {
        return protocolVersion;
    }

    @JsonProperty("signature")
    public Optional<String> getSignature() {
        return signature;
    }

    @JsonProperty("intermediateSigningKey")
    public Optional<IntermediateSigningKey> getIntermediateSigningKey() {
        return intermediateSigningKey;
    }

    @JsonProperty("signedMessage")
    public Optional<String> getSignedMessage() {
        return signedMessage;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GooglePayMethodToken && equalTo((GooglePayMethodToken) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GooglePayMethodToken other) {
        return protocolVersion.equals(other.protocolVersion)
                && signature.equals(other.signature)
                && intermediateSigningKey.equals(other.intermediateSigningKey)
                && signedMessage.equals(other.signedMessage);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.protocolVersion, this.signature, this.intermediateSigningKey, this.signedMessage);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> protocolVersion = Optional.empty();

        private Optional<String> signature = Optional.empty();

        private Optional<IntermediateSigningKey> intermediateSigningKey = Optional.empty();

        private Optional<String> signedMessage = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GooglePayMethodToken other) {
            protocolVersion(other.getProtocolVersion());
            signature(other.getSignature());
            intermediateSigningKey(other.getIntermediateSigningKey());
            signedMessage(other.getSignedMessage());
            return this;
        }

        @JsonSetter(value = "protocolVersion", nulls = Nulls.SKIP)
        public Builder protocolVersion(Optional<String> protocolVersion) {
            this.protocolVersion = protocolVersion;
            return this;
        }

        public Builder protocolVersion(String protocolVersion) {
            this.protocolVersion = Optional.ofNullable(protocolVersion);
            return this;
        }

        @JsonSetter(value = "signature", nulls = Nulls.SKIP)
        public Builder signature(Optional<String> signature) {
            this.signature = signature;
            return this;
        }

        public Builder signature(String signature) {
            this.signature = Optional.ofNullable(signature);
            return this;
        }

        @JsonSetter(value = "intermediateSigningKey", nulls = Nulls.SKIP)
        public Builder intermediateSigningKey(Optional<IntermediateSigningKey> intermediateSigningKey) {
            this.intermediateSigningKey = intermediateSigningKey;
            return this;
        }

        public Builder intermediateSigningKey(IntermediateSigningKey intermediateSigningKey) {
            this.intermediateSigningKey = Optional.ofNullable(intermediateSigningKey);
            return this;
        }

        @JsonSetter(value = "signedMessage", nulls = Nulls.SKIP)
        public Builder signedMessage(Optional<String> signedMessage) {
            this.signedMessage = signedMessage;
            return this;
        }

        public Builder signedMessage(String signedMessage) {
            this.signedMessage = Optional.ofNullable(signedMessage);
            return this;
        }

        public GooglePayMethodToken build() {
            return new GooglePayMethodToken(
                    protocolVersion, signature, intermediateSigningKey, signedMessage, additionalProperties);
        }
    }
}
