/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Authentication.Builder.class)
public final class Authentication {
    private final Optional<String> threedsCryptogram;

    private final Optional<String> eciIndicator;

    private final Optional<List<SubmerchantAuthenticationResponse>> authenticationResponses;

    private final Map<String, Object> additionalProperties;

    private Authentication(
            Optional<String> threedsCryptogram,
            Optional<String> eciIndicator,
            Optional<List<SubmerchantAuthenticationResponse>> authenticationResponses,
            Map<String, Object> additionalProperties) {
        this.threedsCryptogram = threedsCryptogram;
        this.eciIndicator = eciIndicator;
        this.authenticationResponses = authenticationResponses;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("threeds_cryptogram")
    public Optional<String> getThreedsCryptogram() {
        return threedsCryptogram;
    }

    @JsonProperty("eci_indicator")
    public Optional<String> getEciIndicator() {
        return eciIndicator;
    }

    @JsonProperty("authentication_responses")
    public Optional<List<SubmerchantAuthenticationResponse>> getAuthenticationResponses() {
        return authenticationResponses;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Authentication && equalTo((Authentication) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Authentication other) {
        return threedsCryptogram.equals(other.threedsCryptogram)
                && eciIndicator.equals(other.eciIndicator)
                && authenticationResponses.equals(other.authenticationResponses);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.threedsCryptogram, this.eciIndicator, this.authenticationResponses);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> threedsCryptogram = Optional.empty();

        private Optional<String> eciIndicator = Optional.empty();

        private Optional<List<SubmerchantAuthenticationResponse>> authenticationResponses = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Authentication other) {
            threedsCryptogram(other.getThreedsCryptogram());
            eciIndicator(other.getEciIndicator());
            authenticationResponses(other.getAuthenticationResponses());
            return this;
        }

        @JsonSetter(value = "threeds_cryptogram", nulls = Nulls.SKIP)
        public Builder threedsCryptogram(Optional<String> threedsCryptogram) {
            this.threedsCryptogram = threedsCryptogram;
            return this;
        }

        public Builder threedsCryptogram(String threedsCryptogram) {
            this.threedsCryptogram = Optional.ofNullable(threedsCryptogram);
            return this;
        }

        @JsonSetter(value = "eci_indicator", nulls = Nulls.SKIP)
        public Builder eciIndicator(Optional<String> eciIndicator) {
            this.eciIndicator = eciIndicator;
            return this;
        }

        public Builder eciIndicator(String eciIndicator) {
            this.eciIndicator = Optional.ofNullable(eciIndicator);
            return this;
        }

        @JsonSetter(value = "authentication_responses", nulls = Nulls.SKIP)
        public Builder authenticationResponses(
                Optional<List<SubmerchantAuthenticationResponse>> authenticationResponses) {
            this.authenticationResponses = authenticationResponses;
            return this;
        }

        public Builder authenticationResponses(List<SubmerchantAuthenticationResponse> authenticationResponses) {
            this.authenticationResponses = Optional.ofNullable(authenticationResponses);
            return this;
        }

        public Authentication build() {
            return new Authentication(threedsCryptogram, eciIndicator, authenticationResponses, additionalProperties);
        }
    }
}
