/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Proxy.Builder.class)
public final class Proxy {
    private final Optional<String> id;

    private final Optional<String> key;

    private final Optional<String> tenantId;

    private final Optional<String> name;

    private final Optional<String> destinationUrl;

    private final Optional<String> requestReactorId;

    private final Optional<String> responseReactorId;

    private final Optional<Boolean> requireAuth;

    private final Optional<ProxyTransform> requestTransform;

    private final Optional<ProxyTransform> responseTransform;

    private final Optional<String> applicationId;

    private final Optional<Map<String, Optional<String>>> configuration;

    private final Optional<String> proxyHost;

    private final Optional<Integer> timeout;

    private final Optional<String> clientCertificate;

    private final Optional<String> createdBy;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<String> modifiedBy;

    private final Optional<OffsetDateTime> modifiedAt;

    private final Map<String, Object> additionalProperties;

    private Proxy(
            Optional<String> id,
            Optional<String> key,
            Optional<String> tenantId,
            Optional<String> name,
            Optional<String> destinationUrl,
            Optional<String> requestReactorId,
            Optional<String> responseReactorId,
            Optional<Boolean> requireAuth,
            Optional<ProxyTransform> requestTransform,
            Optional<ProxyTransform> responseTransform,
            Optional<String> applicationId,
            Optional<Map<String, Optional<String>>> configuration,
            Optional<String> proxyHost,
            Optional<Integer> timeout,
            Optional<String> clientCertificate,
            Optional<String> createdBy,
            Optional<OffsetDateTime> createdAt,
            Optional<String> modifiedBy,
            Optional<OffsetDateTime> modifiedAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.key = key;
        this.tenantId = tenantId;
        this.name = name;
        this.destinationUrl = destinationUrl;
        this.requestReactorId = requestReactorId;
        this.responseReactorId = responseReactorId;
        this.requireAuth = requireAuth;
        this.requestTransform = requestTransform;
        this.responseTransform = responseTransform;
        this.applicationId = applicationId;
        this.configuration = configuration;
        this.proxyHost = proxyHost;
        this.timeout = timeout;
        this.clientCertificate = clientCertificate;
        this.createdBy = createdBy;
        this.createdAt = createdAt;
        this.modifiedBy = modifiedBy;
        this.modifiedAt = modifiedAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    @JsonProperty("key")
    public Optional<String> getKey() {
        return key;
    }

    @JsonProperty("tenant_id")
    public Optional<String> getTenantId() {
        return tenantId;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("destination_url")
    public Optional<String> getDestinationUrl() {
        return destinationUrl;
    }

    @JsonProperty("request_reactor_id")
    public Optional<String> getRequestReactorId() {
        return requestReactorId;
    }

    @JsonProperty("response_reactor_id")
    public Optional<String> getResponseReactorId() {
        return responseReactorId;
    }

    @JsonProperty("require_auth")
    public Optional<Boolean> getRequireAuth() {
        return requireAuth;
    }

    @JsonProperty("request_transform")
    public Optional<ProxyTransform> getRequestTransform() {
        return requestTransform;
    }

    @JsonProperty("response_transform")
    public Optional<ProxyTransform> getResponseTransform() {
        return responseTransform;
    }

    @JsonProperty("application_id")
    public Optional<String> getApplicationId() {
        return applicationId;
    }

    @JsonProperty("configuration")
    public Optional<Map<String, Optional<String>>> getConfiguration() {
        return configuration;
    }

    @JsonProperty("proxy_host")
    public Optional<String> getProxyHost() {
        return proxyHost;
    }

    @JsonProperty("timeout")
    public Optional<Integer> getTimeout() {
        return timeout;
    }

    @JsonProperty("client_certificate")
    public Optional<String> getClientCertificate() {
        return clientCertificate;
    }

    @JsonProperty("created_by")
    public Optional<String> getCreatedBy() {
        return createdBy;
    }

    @JsonProperty("created_at")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("modified_by")
    public Optional<String> getModifiedBy() {
        return modifiedBy;
    }

    @JsonProperty("modified_at")
    public Optional<OffsetDateTime> getModifiedAt() {
        return modifiedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Proxy && equalTo((Proxy) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Proxy other) {
        return id.equals(other.id)
                && key.equals(other.key)
                && tenantId.equals(other.tenantId)
                && name.equals(other.name)
                && destinationUrl.equals(other.destinationUrl)
                && requestReactorId.equals(other.requestReactorId)
                && responseReactorId.equals(other.responseReactorId)
                && requireAuth.equals(other.requireAuth)
                && requestTransform.equals(other.requestTransform)
                && responseTransform.equals(other.responseTransform)
                && applicationId.equals(other.applicationId)
                && configuration.equals(other.configuration)
                && proxyHost.equals(other.proxyHost)
                && timeout.equals(other.timeout)
                && clientCertificate.equals(other.clientCertificate)
                && createdBy.equals(other.createdBy)
                && createdAt.equals(other.createdAt)
                && modifiedBy.equals(other.modifiedBy)
                && modifiedAt.equals(other.modifiedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.key,
                this.tenantId,
                this.name,
                this.destinationUrl,
                this.requestReactorId,
                this.responseReactorId,
                this.requireAuth,
                this.requestTransform,
                this.responseTransform,
                this.applicationId,
                this.configuration,
                this.proxyHost,
                this.timeout,
                this.clientCertificate,
                this.createdBy,
                this.createdAt,
                this.modifiedBy,
                this.modifiedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> key = Optional.empty();

        private Optional<String> tenantId = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> destinationUrl = Optional.empty();

        private Optional<String> requestReactorId = Optional.empty();

        private Optional<String> responseReactorId = Optional.empty();

        private Optional<Boolean> requireAuth = Optional.empty();

        private Optional<ProxyTransform> requestTransform = Optional.empty();

        private Optional<ProxyTransform> responseTransform = Optional.empty();

        private Optional<String> applicationId = Optional.empty();

        private Optional<Map<String, Optional<String>>> configuration = Optional.empty();

        private Optional<String> proxyHost = Optional.empty();

        private Optional<Integer> timeout = Optional.empty();

        private Optional<String> clientCertificate = Optional.empty();

        private Optional<String> createdBy = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<String> modifiedBy = Optional.empty();

        private Optional<OffsetDateTime> modifiedAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Proxy other) {
            id(other.getId());
            key(other.getKey());
            tenantId(other.getTenantId());
            name(other.getName());
            destinationUrl(other.getDestinationUrl());
            requestReactorId(other.getRequestReactorId());
            responseReactorId(other.getResponseReactorId());
            requireAuth(other.getRequireAuth());
            requestTransform(other.getRequestTransform());
            responseTransform(other.getResponseTransform());
            applicationId(other.getApplicationId());
            configuration(other.getConfiguration());
            proxyHost(other.getProxyHost());
            timeout(other.getTimeout());
            clientCertificate(other.getClientCertificate());
            createdBy(other.getCreatedBy());
            createdAt(other.getCreatedAt());
            modifiedBy(other.getModifiedBy());
            modifiedAt(other.getModifiedAt());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "key", nulls = Nulls.SKIP)
        public Builder key(Optional<String> key) {
            this.key = key;
            return this;
        }

        public Builder key(String key) {
            this.key = Optional.ofNullable(key);
            return this;
        }

        @JsonSetter(value = "tenant_id", nulls = Nulls.SKIP)
        public Builder tenantId(Optional<String> tenantId) {
            this.tenantId = tenantId;
            return this;
        }

        public Builder tenantId(String tenantId) {
            this.tenantId = Optional.ofNullable(tenantId);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "destination_url", nulls = Nulls.SKIP)
        public Builder destinationUrl(Optional<String> destinationUrl) {
            this.destinationUrl = destinationUrl;
            return this;
        }

        public Builder destinationUrl(String destinationUrl) {
            this.destinationUrl = Optional.ofNullable(destinationUrl);
            return this;
        }

        @JsonSetter(value = "request_reactor_id", nulls = Nulls.SKIP)
        public Builder requestReactorId(Optional<String> requestReactorId) {
            this.requestReactorId = requestReactorId;
            return this;
        }

        public Builder requestReactorId(String requestReactorId) {
            this.requestReactorId = Optional.ofNullable(requestReactorId);
            return this;
        }

        @JsonSetter(value = "response_reactor_id", nulls = Nulls.SKIP)
        public Builder responseReactorId(Optional<String> responseReactorId) {
            this.responseReactorId = responseReactorId;
            return this;
        }

        public Builder responseReactorId(String responseReactorId) {
            this.responseReactorId = Optional.ofNullable(responseReactorId);
            return this;
        }

        @JsonSetter(value = "require_auth", nulls = Nulls.SKIP)
        public Builder requireAuth(Optional<Boolean> requireAuth) {
            this.requireAuth = requireAuth;
            return this;
        }

        public Builder requireAuth(Boolean requireAuth) {
            this.requireAuth = Optional.ofNullable(requireAuth);
            return this;
        }

        @JsonSetter(value = "request_transform", nulls = Nulls.SKIP)
        public Builder requestTransform(Optional<ProxyTransform> requestTransform) {
            this.requestTransform = requestTransform;
            return this;
        }

        public Builder requestTransform(ProxyTransform requestTransform) {
            this.requestTransform = Optional.ofNullable(requestTransform);
            return this;
        }

        @JsonSetter(value = "response_transform", nulls = Nulls.SKIP)
        public Builder responseTransform(Optional<ProxyTransform> responseTransform) {
            this.responseTransform = responseTransform;
            return this;
        }

        public Builder responseTransform(ProxyTransform responseTransform) {
            this.responseTransform = Optional.ofNullable(responseTransform);
            return this;
        }

        @JsonSetter(value = "application_id", nulls = Nulls.SKIP)
        public Builder applicationId(Optional<String> applicationId) {
            this.applicationId = applicationId;
            return this;
        }

        public Builder applicationId(String applicationId) {
            this.applicationId = Optional.ofNullable(applicationId);
            return this;
        }

        @JsonSetter(value = "configuration", nulls = Nulls.SKIP)
        public Builder configuration(Optional<Map<String, Optional<String>>> configuration) {
            this.configuration = configuration;
            return this;
        }

        public Builder configuration(Map<String, Optional<String>> configuration) {
            this.configuration = Optional.ofNullable(configuration);
            return this;
        }

        @JsonSetter(value = "proxy_host", nulls = Nulls.SKIP)
        public Builder proxyHost(Optional<String> proxyHost) {
            this.proxyHost = proxyHost;
            return this;
        }

        public Builder proxyHost(String proxyHost) {
            this.proxyHost = Optional.ofNullable(proxyHost);
            return this;
        }

        @JsonSetter(value = "timeout", nulls = Nulls.SKIP)
        public Builder timeout(Optional<Integer> timeout) {
            this.timeout = timeout;
            return this;
        }

        public Builder timeout(Integer timeout) {
            this.timeout = Optional.ofNullable(timeout);
            return this;
        }

        @JsonSetter(value = "client_certificate", nulls = Nulls.SKIP)
        public Builder clientCertificate(Optional<String> clientCertificate) {
            this.clientCertificate = clientCertificate;
            return this;
        }

        public Builder clientCertificate(String clientCertificate) {
            this.clientCertificate = Optional.ofNullable(clientCertificate);
            return this;
        }

        @JsonSetter(value = "created_by", nulls = Nulls.SKIP)
        public Builder createdBy(Optional<String> createdBy) {
            this.createdBy = createdBy;
            return this;
        }

        public Builder createdBy(String createdBy) {
            this.createdBy = Optional.ofNullable(createdBy);
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "modified_by", nulls = Nulls.SKIP)
        public Builder modifiedBy(Optional<String> modifiedBy) {
            this.modifiedBy = modifiedBy;
            return this;
        }

        public Builder modifiedBy(String modifiedBy) {
            this.modifiedBy = Optional.ofNullable(modifiedBy);
            return this;
        }

        @JsonSetter(value = "modified_at", nulls = Nulls.SKIP)
        public Builder modifiedAt(Optional<OffsetDateTime> modifiedAt) {
            this.modifiedAt = modifiedAt;
            return this;
        }

        public Builder modifiedAt(OffsetDateTime modifiedAt) {
            this.modifiedAt = Optional.ofNullable(modifiedAt);
            return this;
        }

        public Proxy build() {
            return new Proxy(
                    id,
                    key,
                    tenantId,
                    name,
                    destinationUrl,
                    requestReactorId,
                    responseReactorId,
                    requireAuth,
                    requestTransform,
                    responseTransform,
                    applicationId,
                    configuration,
                    proxyHost,
                    timeout,
                    clientCertificate,
                    createdBy,
                    createdAt,
                    modifiedBy,
                    modifiedAt,
                    additionalProperties);
        }
    }
}
