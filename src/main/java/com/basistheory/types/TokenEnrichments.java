/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.types;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TokenEnrichments.Builder.class)
public final class TokenEnrichments {
    private final Optional<BinDetails> binDetails;

    private final Optional<TokenEnrichmentsCardDetails> cardDetails;

    private final Map<String, Object> additionalProperties;

    private TokenEnrichments(
            Optional<BinDetails> binDetails,
            Optional<TokenEnrichmentsCardDetails> cardDetails,
            Map<String, Object> additionalProperties) {
        this.binDetails = binDetails;
        this.cardDetails = cardDetails;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("bin_details")
    public Optional<BinDetails> getBinDetails() {
        return binDetails;
    }

    @JsonProperty("card_details")
    public Optional<TokenEnrichmentsCardDetails> getCardDetails() {
        return cardDetails;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TokenEnrichments && equalTo((TokenEnrichments) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TokenEnrichments other) {
        return binDetails.equals(other.binDetails) && cardDetails.equals(other.cardDetails);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.binDetails, this.cardDetails);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<BinDetails> binDetails = Optional.empty();

        private Optional<TokenEnrichmentsCardDetails> cardDetails = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TokenEnrichments other) {
            binDetails(other.getBinDetails());
            cardDetails(other.getCardDetails());
            return this;
        }

        @JsonSetter(value = "bin_details", nulls = Nulls.SKIP)
        public Builder binDetails(Optional<BinDetails> binDetails) {
            this.binDetails = binDetails;
            return this;
        }

        public Builder binDetails(BinDetails binDetails) {
            this.binDetails = Optional.ofNullable(binDetails);
            return this;
        }

        @JsonSetter(value = "card_details", nulls = Nulls.SKIP)
        public Builder cardDetails(Optional<TokenEnrichmentsCardDetails> cardDetails) {
            this.cardDetails = cardDetails;
            return this;
        }

        public Builder cardDetails(TokenEnrichmentsCardDetails cardDetails) {
            this.cardDetails = Optional.ofNullable(cardDetails);
            return this;
        }

        public TokenEnrichments build() {
            return new TokenEnrichments(binDetails, cardDetails, additionalProperties);
        }
    }
}
