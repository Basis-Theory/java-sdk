/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory;

import com.basistheory.core.ClientOptions;
import com.basistheory.core.Suppliers;
import com.basistheory.resources.accountupdater.AsyncAccountUpdaterClient;
import com.basistheory.resources.applepay.AsyncApplePayClient;
import com.basistheory.resources.applicationkeys.AsyncApplicationKeysClient;
import com.basistheory.resources.applications.AsyncApplicationsClient;
import com.basistheory.resources.applicationtemplates.AsyncApplicationTemplatesClient;
import com.basistheory.resources.connections.AsyncConnectionsClient;
import com.basistheory.resources.enrichments.AsyncEnrichmentsClient;
import com.basistheory.resources.googlepay.AsyncGooglepayClient;
import com.basistheory.resources.keys.AsyncKeysClient;
import com.basistheory.resources.logs.AsyncLogsClient;
import com.basistheory.resources.networktokens.AsyncNetworkTokensClient;
import com.basistheory.resources.permissions.AsyncPermissionsClient;
import com.basistheory.resources.proxies.AsyncProxiesClient;
import com.basistheory.resources.reactors.AsyncReactorsClient;
import com.basistheory.resources.roles.AsyncRolesClient;
import com.basistheory.resources.sessions.AsyncSessionsClient;
import com.basistheory.resources.tenants.AsyncTenantsClient;
import com.basistheory.resources.threeds.AsyncThreedsClient;
import com.basistheory.resources.tokenintents.AsyncTokenIntentsClient;
import com.basistheory.resources.tokens.AsyncTokensClient;
import com.basistheory.resources.webhooks.AsyncWebhooksClient;
import java.util.function.Supplier;

public class AsyncBasisTheoryApiClient {
    protected final ClientOptions clientOptions;

    protected final Supplier<AsyncApplicationsClient> applicationsClient;

    protected final Supplier<AsyncApplicationKeysClient> applicationKeysClient;

    protected final Supplier<AsyncApplicationTemplatesClient> applicationTemplatesClient;

    protected final Supplier<AsyncApplePayClient> applePayClient;

    protected final Supplier<AsyncTokensClient> tokensClient;

    protected final Supplier<AsyncEnrichmentsClient> enrichmentsClient;

    protected final Supplier<AsyncGooglepayClient> googlepayClient;

    protected final Supplier<AsyncKeysClient> keysClient;

    protected final Supplier<AsyncLogsClient> logsClient;

    protected final Supplier<AsyncNetworkTokensClient> networkTokensClient;

    protected final Supplier<AsyncPermissionsClient> permissionsClient;

    protected final Supplier<AsyncProxiesClient> proxiesClient;

    protected final Supplier<AsyncReactorsClient> reactorsClient;

    protected final Supplier<AsyncRolesClient> rolesClient;

    protected final Supplier<AsyncSessionsClient> sessionsClient;

    protected final Supplier<AsyncTokenIntentsClient> tokenIntentsClient;

    protected final Supplier<AsyncWebhooksClient> webhooksClient;

    protected final Supplier<AsyncAccountUpdaterClient> accountUpdaterClient;

    protected final Supplier<AsyncConnectionsClient> connectionsClient;

    protected final Supplier<AsyncTenantsClient> tenantsClient;

    protected final Supplier<AsyncThreedsClient> threedsClient;

    public AsyncBasisTheoryApiClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.applicationsClient = Suppliers.memoize(() -> new AsyncApplicationsClient(clientOptions));
        this.applicationKeysClient = Suppliers.memoize(() -> new AsyncApplicationKeysClient(clientOptions));
        this.applicationTemplatesClient = Suppliers.memoize(() -> new AsyncApplicationTemplatesClient(clientOptions));
        this.applePayClient = Suppliers.memoize(() -> new AsyncApplePayClient(clientOptions));
        this.tokensClient = Suppliers.memoize(() -> new AsyncTokensClient(clientOptions));
        this.enrichmentsClient = Suppliers.memoize(() -> new AsyncEnrichmentsClient(clientOptions));
        this.googlepayClient = Suppliers.memoize(() -> new AsyncGooglepayClient(clientOptions));
        this.keysClient = Suppliers.memoize(() -> new AsyncKeysClient(clientOptions));
        this.logsClient = Suppliers.memoize(() -> new AsyncLogsClient(clientOptions));
        this.networkTokensClient = Suppliers.memoize(() -> new AsyncNetworkTokensClient(clientOptions));
        this.permissionsClient = Suppliers.memoize(() -> new AsyncPermissionsClient(clientOptions));
        this.proxiesClient = Suppliers.memoize(() -> new AsyncProxiesClient(clientOptions));
        this.reactorsClient = Suppliers.memoize(() -> new AsyncReactorsClient(clientOptions));
        this.rolesClient = Suppliers.memoize(() -> new AsyncRolesClient(clientOptions));
        this.sessionsClient = Suppliers.memoize(() -> new AsyncSessionsClient(clientOptions));
        this.tokenIntentsClient = Suppliers.memoize(() -> new AsyncTokenIntentsClient(clientOptions));
        this.webhooksClient = Suppliers.memoize(() -> new AsyncWebhooksClient(clientOptions));
        this.accountUpdaterClient = Suppliers.memoize(() -> new AsyncAccountUpdaterClient(clientOptions));
        this.connectionsClient = Suppliers.memoize(() -> new AsyncConnectionsClient(clientOptions));
        this.tenantsClient = Suppliers.memoize(() -> new AsyncTenantsClient(clientOptions));
        this.threedsClient = Suppliers.memoize(() -> new AsyncThreedsClient(clientOptions));
    }

    public AsyncApplicationsClient applications() {
        return this.applicationsClient.get();
    }

    public AsyncApplicationKeysClient applicationKeys() {
        return this.applicationKeysClient.get();
    }

    public AsyncApplicationTemplatesClient applicationTemplates() {
        return this.applicationTemplatesClient.get();
    }

    public AsyncApplePayClient applePay() {
        return this.applePayClient.get();
    }

    public AsyncTokensClient tokens() {
        return this.tokensClient.get();
    }

    public AsyncEnrichmentsClient enrichments() {
        return this.enrichmentsClient.get();
    }

    public AsyncGooglepayClient googlepay() {
        return this.googlepayClient.get();
    }

    public AsyncKeysClient keys() {
        return this.keysClient.get();
    }

    public AsyncLogsClient logs() {
        return this.logsClient.get();
    }

    public AsyncNetworkTokensClient networkTokens() {
        return this.networkTokensClient.get();
    }

    public AsyncPermissionsClient permissions() {
        return this.permissionsClient.get();
    }

    public AsyncProxiesClient proxies() {
        return this.proxiesClient.get();
    }

    public AsyncReactorsClient reactors() {
        return this.reactorsClient.get();
    }

    public AsyncRolesClient roles() {
        return this.rolesClient.get();
    }

    public AsyncSessionsClient sessions() {
        return this.sessionsClient.get();
    }

    public AsyncTokenIntentsClient tokenIntents() {
        return this.tokenIntentsClient.get();
    }

    public AsyncWebhooksClient webhooks() {
        return this.webhooksClient.get();
    }

    public AsyncAccountUpdaterClient accountUpdater() {
        return this.accountUpdaterClient.get();
    }

    public AsyncConnectionsClient connections() {
        return this.connectionsClient.get();
    }

    public AsyncTenantsClient tenants() {
        return this.tenantsClient.get();
    }

    public AsyncThreedsClient threeds() {
        return this.threedsClient.get();
    }

    public static AsyncBasisTheoryApiClientBuilder builder() {
        return new AsyncBasisTheoryApiClientBuilder();
    }
}
