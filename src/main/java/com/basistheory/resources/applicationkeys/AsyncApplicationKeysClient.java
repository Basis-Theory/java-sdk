/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.applicationkeys;

import com.basistheory.core.ClientOptions;
import com.basistheory.core.IdempotentRequestOptions;
import com.basistheory.core.RequestOptions;
import com.basistheory.resources.applicationkeys.requests.ApplicationKeysListRequest;
import com.basistheory.types.ApplicationKey;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class AsyncApplicationKeysClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawApplicationKeysClient rawClient;

    public AsyncApplicationKeysClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawApplicationKeysClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawApplicationKeysClient withRawResponse() {
        return this.rawClient;
    }

    public CompletableFuture<List<ApplicationKey>> list(String id) {
        return this.rawClient.list(id).thenApply(response -> response.body());
    }

    public CompletableFuture<List<ApplicationKey>> list(String id, ApplicationKeysListRequest request) {
        return this.rawClient.list(id, request).thenApply(response -> response.body());
    }

    public CompletableFuture<List<ApplicationKey>> list(
            String id, ApplicationKeysListRequest request, RequestOptions requestOptions) {
        return this.rawClient.list(id, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<ApplicationKey> create(String id) {
        return this.rawClient.create(id).thenApply(response -> response.body());
    }

    public CompletableFuture<ApplicationKey> create(String id, IdempotentRequestOptions requestOptions) {
        return this.rawClient.create(id, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<ApplicationKey> get(String id, String keyId) {
        return this.rawClient.get(id, keyId).thenApply(response -> response.body());
    }

    public CompletableFuture<ApplicationKey> get(String id, String keyId, RequestOptions requestOptions) {
        return this.rawClient.get(id, keyId, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> delete(String id, String keyId) {
        return this.rawClient.delete(id, keyId).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> delete(String id, String keyId, RequestOptions requestOptions) {
        return this.rawClient.delete(id, keyId, requestOptions).thenApply(response -> response.body());
    }
}
