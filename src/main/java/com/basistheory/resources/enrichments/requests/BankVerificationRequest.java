/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.enrichments.requests;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BankVerificationRequest.Builder.class)
public final class BankVerificationRequest {
    private final String tokenId;

    private final Optional<String> countryCode;

    private final Optional<String> routingNumber;

    private final Map<String, Object> additionalProperties;

    private BankVerificationRequest(
            String tokenId,
            Optional<String> countryCode,
            Optional<String> routingNumber,
            Map<String, Object> additionalProperties) {
        this.tokenId = tokenId;
        this.countryCode = countryCode;
        this.routingNumber = routingNumber;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("token_id")
    public String getTokenId() {
        return tokenId;
    }

    @JsonProperty("country_code")
    public Optional<String> getCountryCode() {
        return countryCode;
    }

    @JsonProperty("routing_number")
    public Optional<String> getRoutingNumber() {
        return routingNumber;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BankVerificationRequest && equalTo((BankVerificationRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BankVerificationRequest other) {
        return tokenId.equals(other.tokenId)
                && countryCode.equals(other.countryCode)
                && routingNumber.equals(other.routingNumber);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.tokenId, this.countryCode, this.routingNumber);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TokenIdStage builder() {
        return new Builder();
    }

    public interface TokenIdStage {
        _FinalStage tokenId(@NotNull String tokenId);

        Builder from(BankVerificationRequest other);
    }

    public interface _FinalStage {
        BankVerificationRequest build();

        _FinalStage countryCode(Optional<String> countryCode);

        _FinalStage countryCode(String countryCode);

        _FinalStage routingNumber(Optional<String> routingNumber);

        _FinalStage routingNumber(String routingNumber);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TokenIdStage, _FinalStage {
        private String tokenId;

        private Optional<String> routingNumber = Optional.empty();

        private Optional<String> countryCode = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BankVerificationRequest other) {
            tokenId(other.getTokenId());
            countryCode(other.getCountryCode());
            routingNumber(other.getRoutingNumber());
            return this;
        }

        @java.lang.Override
        @JsonSetter("token_id")
        public _FinalStage tokenId(@NotNull String tokenId) {
            this.tokenId = Objects.requireNonNull(tokenId, "tokenId must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage routingNumber(String routingNumber) {
            this.routingNumber = Optional.ofNullable(routingNumber);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "routing_number", nulls = Nulls.SKIP)
        public _FinalStage routingNumber(Optional<String> routingNumber) {
            this.routingNumber = routingNumber;
            return this;
        }

        @java.lang.Override
        public _FinalStage countryCode(String countryCode) {
            this.countryCode = Optional.ofNullable(countryCode);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "country_code", nulls = Nulls.SKIP)
        public _FinalStage countryCode(Optional<String> countryCode) {
            this.countryCode = countryCode;
            return this;
        }

        @java.lang.Override
        public BankVerificationRequest build() {
            return new BankVerificationRequest(tokenId, countryCode, routingNumber, additionalProperties);
        }
    }
}
