/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.accountupdater.realtime.requests;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AccountUpdaterRealTimeRequest.Builder.class)
public final class AccountUpdaterRealTimeRequest {
    private final String tokenId;

    private final Optional<Integer> expirationYear;

    private final Optional<Integer> expirationMonth;

    private final Map<String, Object> additionalProperties;

    private AccountUpdaterRealTimeRequest(
            String tokenId,
            Optional<Integer> expirationYear,
            Optional<Integer> expirationMonth,
            Map<String, Object> additionalProperties) {
        this.tokenId = tokenId;
        this.expirationYear = expirationYear;
        this.expirationMonth = expirationMonth;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Card Token identifier
     */
    @JsonProperty("token_id")
    public String getTokenId() {
        return tokenId;
    }

    /**
     * @return The 4-digit expiration year of the account number. Not required if the card token already stores this value.
     */
    @JsonProperty("expiration_year")
    public Optional<Integer> getExpirationYear() {
        return expirationYear;
    }

    /**
     * @return The 2-digit expiration month of the account number. Not required if the card token already stores this value.
     */
    @JsonProperty("expiration_month")
    public Optional<Integer> getExpirationMonth() {
        return expirationMonth;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AccountUpdaterRealTimeRequest && equalTo((AccountUpdaterRealTimeRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AccountUpdaterRealTimeRequest other) {
        return tokenId.equals(other.tokenId)
                && expirationYear.equals(other.expirationYear)
                && expirationMonth.equals(other.expirationMonth);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.tokenId, this.expirationYear, this.expirationMonth);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TokenIdStage builder() {
        return new Builder();
    }

    public interface TokenIdStage {
        _FinalStage tokenId(@NotNull String tokenId);

        Builder from(AccountUpdaterRealTimeRequest other);
    }

    public interface _FinalStage {
        AccountUpdaterRealTimeRequest build();

        _FinalStage expirationYear(Optional<Integer> expirationYear);

        _FinalStage expirationYear(Integer expirationYear);

        _FinalStage expirationMonth(Optional<Integer> expirationMonth);

        _FinalStage expirationMonth(Integer expirationMonth);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TokenIdStage, _FinalStage {
        private String tokenId;

        private Optional<Integer> expirationMonth = Optional.empty();

        private Optional<Integer> expirationYear = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AccountUpdaterRealTimeRequest other) {
            tokenId(other.getTokenId());
            expirationYear(other.getExpirationYear());
            expirationMonth(other.getExpirationMonth());
            return this;
        }

        /**
         * <p>Card Token identifier</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("token_id")
        public _FinalStage tokenId(@NotNull String tokenId) {
            this.tokenId = Objects.requireNonNull(tokenId, "tokenId must not be null");
            return this;
        }

        /**
         * <p>The 2-digit expiration month of the account number. Not required if the card token already stores this value.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage expirationMonth(Integer expirationMonth) {
            this.expirationMonth = Optional.ofNullable(expirationMonth);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "expiration_month", nulls = Nulls.SKIP)
        public _FinalStage expirationMonth(Optional<Integer> expirationMonth) {
            this.expirationMonth = expirationMonth;
            return this;
        }

        /**
         * <p>The 4-digit expiration year of the account number. Not required if the card token already stores this value.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage expirationYear(Integer expirationYear) {
            this.expirationYear = Optional.ofNullable(expirationYear);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "expiration_year", nulls = Nulls.SKIP)
        public _FinalStage expirationYear(Optional<Integer> expirationYear) {
            this.expirationYear = expirationYear;
            return this;
        }

        @java.lang.Override
        public AccountUpdaterRealTimeRequest build() {
            return new AccountUpdaterRealTimeRequest(tokenId, expirationYear, expirationMonth, additionalProperties);
        }
    }
}
