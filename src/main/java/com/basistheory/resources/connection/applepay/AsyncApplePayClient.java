/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.connection.applepay;

import com.basistheory.core.ClientOptions;
import com.basistheory.core.RequestOptions;
import com.basistheory.core.Suppliers;
import com.basistheory.resources.connection.applepay.domain.AsyncDomainClient;
import com.basistheory.resources.connection.applepay.requests.ApplePayTokenizeRequest;
import com.basistheory.resources.connection.applepay.session.AsyncSessionClient;
import com.basistheory.types.ApplePayTokenizeResponse;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

public class AsyncApplePayClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawApplePayClient rawClient;

    protected final Supplier<AsyncDomainClient> domainClient;

    protected final Supplier<AsyncSessionClient> sessionClient;

    public AsyncApplePayClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawApplePayClient(clientOptions);
        this.domainClient = Suppliers.memoize(() -> new AsyncDomainClient(clientOptions));
        this.sessionClient = Suppliers.memoize(() -> new AsyncSessionClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawApplePayClient withRawResponse() {
        return this.rawClient;
    }

    public CompletableFuture<ApplePayTokenizeResponse> tokenize() {
        return this.rawClient.tokenize().thenApply(response -> response.body());
    }

    public CompletableFuture<ApplePayTokenizeResponse> tokenize(ApplePayTokenizeRequest request) {
        return this.rawClient.tokenize(request).thenApply(response -> response.body());
    }

    public CompletableFuture<ApplePayTokenizeResponse> tokenize(
            ApplePayTokenizeRequest request, RequestOptions requestOptions) {
        return this.rawClient.tokenize(request, requestOptions).thenApply(response -> response.body());
    }

    public AsyncDomainClient domain() {
        return this.domainClient.get();
    }

    public AsyncSessionClient session() {
        return this.sessionClient.get();
    }
}
