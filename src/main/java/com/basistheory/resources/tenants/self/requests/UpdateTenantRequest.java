/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.tenants.self.requests;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateTenantRequest.Builder.class)
public final class UpdateTenantRequest {
    private final String name;

    private final Optional<Map<String, Optional<String>>> settings;

    private final Map<String, Object> additionalProperties;

    private UpdateTenantRequest(
            String name, Optional<Map<String, Optional<String>>> settings, Map<String, Object> additionalProperties) {
        this.name = name;
        this.settings = settings;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("settings")
    public Optional<Map<String, Optional<String>>> getSettings() {
        return settings;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateTenantRequest && equalTo((UpdateTenantRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateTenantRequest other) {
        return name.equals(other.name) && settings.equals(other.settings);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.settings);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        _FinalStage name(@NotNull String name);

        Builder from(UpdateTenantRequest other);
    }

    public interface _FinalStage {
        UpdateTenantRequest build();

        _FinalStage settings(Optional<Map<String, Optional<String>>> settings);

        _FinalStage settings(Map<String, Optional<String>> settings);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, _FinalStage {
        private String name;

        private Optional<Map<String, Optional<String>>> settings = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UpdateTenantRequest other) {
            name(other.getName());
            settings(other.getSettings());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage settings(Map<String, Optional<String>> settings) {
            this.settings = Optional.ofNullable(settings);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "settings", nulls = Nulls.SKIP)
        public _FinalStage settings(Optional<Map<String, Optional<String>>> settings) {
            this.settings = settings;
            return this;
        }

        @java.lang.Override
        public UpdateTenantRequest build() {
            return new UpdateTenantRequest(name, settings, additionalProperties);
        }
    }
}
