/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.tenants.invitations;

import com.basistheory.core.ClientOptions;
import com.basistheory.core.IdempotentRequestOptions;
import com.basistheory.core.RequestOptions;
import com.basistheory.core.pagination.SyncPagingIterable;
import com.basistheory.resources.tenants.invitations.requests.CreateTenantInvitationRequest;
import com.basistheory.resources.tenants.invitations.requests.InvitationsListRequest;
import com.basistheory.types.TenantInvitationResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncInvitationsClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawInvitationsClient rawClient;

    public AsyncInvitationsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawInvitationsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawInvitationsClient withRawResponse() {
        return this.rawClient;
    }

    public CompletableFuture<SyncPagingIterable<TenantInvitationResponse>> list() {
        return this.rawClient.list().thenApply(response -> response.body());
    }

    public CompletableFuture<SyncPagingIterable<TenantInvitationResponse>> list(InvitationsListRequest request) {
        return this.rawClient.list(request).thenApply(response -> response.body());
    }

    public CompletableFuture<SyncPagingIterable<TenantInvitationResponse>> list(
            InvitationsListRequest request, RequestOptions requestOptions) {
        return this.rawClient.list(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<TenantInvitationResponse> create(CreateTenantInvitationRequest request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    public CompletableFuture<TenantInvitationResponse> create(
            CreateTenantInvitationRequest request, IdempotentRequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<TenantInvitationResponse> resend(String invitationId) {
        return this.rawClient.resend(invitationId).thenApply(response -> response.body());
    }

    public CompletableFuture<TenantInvitationResponse> resend(
            String invitationId, IdempotentRequestOptions requestOptions) {
        return this.rawClient.resend(invitationId, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<TenantInvitationResponse> get(String invitationId) {
        return this.rawClient.get(invitationId).thenApply(response -> response.body());
    }

    public CompletableFuture<TenantInvitationResponse> get(String invitationId, RequestOptions requestOptions) {
        return this.rawClient.get(invitationId, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> delete(String invitationId) {
        return this.rawClient.delete(invitationId).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> delete(String invitationId, RequestOptions requestOptions) {
        return this.rawClient.delete(invitationId, requestOptions).thenApply(response -> response.body());
    }
}
