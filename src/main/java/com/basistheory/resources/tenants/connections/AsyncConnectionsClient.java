/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.tenants.connections;

import com.basistheory.core.ClientOptions;
import com.basistheory.core.IdempotentRequestOptions;
import com.basistheory.core.RequestOptions;
import com.basistheory.resources.tenants.connections.requests.CreateTenantConnectionRequest;
import com.basistheory.types.CreateTenantConnectionResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncConnectionsClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawConnectionsClient rawClient;

    public AsyncConnectionsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawConnectionsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawConnectionsClient withRawResponse() {
        return this.rawClient;
    }

    public CompletableFuture<CreateTenantConnectionResponse> create(CreateTenantConnectionRequest request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    public CompletableFuture<CreateTenantConnectionResponse> create(
            CreateTenantConnectionRequest request, IdempotentRequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<CreateTenantConnectionResponse> delete() {
        return this.rawClient.delete().thenApply(response -> response.body());
    }

    public CompletableFuture<CreateTenantConnectionResponse> delete(RequestOptions requestOptions) {
        return this.rawClient.delete(requestOptions).thenApply(response -> response.body());
    }
}
