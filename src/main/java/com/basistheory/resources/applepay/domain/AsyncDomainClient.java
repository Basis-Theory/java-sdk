/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.applepay.domain;

import com.basistheory.core.ClientOptions;
import com.basistheory.core.RequestOptions;
import com.basistheory.resources.applepay.domain.requests.ApplePayDomainDeregistrationRequest;
import com.basistheory.resources.applepay.domain.requests.ApplePayDomainRegistrationRequest;
import com.basistheory.types.ApplePayDomainRegistrationResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncDomainClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawDomainClient rawClient;

    public AsyncDomainClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawDomainClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawDomainClient withRawResponse() {
        return this.rawClient;
    }

    public CompletableFuture<Void> deregister(ApplePayDomainDeregistrationRequest request) {
        return this.rawClient.deregister(request).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> deregister(
            ApplePayDomainDeregistrationRequest request, RequestOptions requestOptions) {
        return this.rawClient.deregister(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<ApplePayDomainRegistrationResponse> get() {
        return this.rawClient.get().thenApply(response -> response.body());
    }

    public CompletableFuture<ApplePayDomainRegistrationResponse> get(RequestOptions requestOptions) {
        return this.rawClient.get(requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<ApplePayDomainRegistrationResponse> register(ApplePayDomainRegistrationRequest request) {
        return this.rawClient.register(request).thenApply(response -> response.body());
    }

    public CompletableFuture<ApplePayDomainRegistrationResponse> register(
            ApplePayDomainRegistrationRequest request, RequestOptions requestOptions) {
        return this.rawClient.register(request, requestOptions).thenApply(response -> response.body());
    }
}
