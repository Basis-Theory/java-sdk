/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.applepay;

import com.basistheory.core.ClientOptions;
import com.basistheory.core.RequestOptions;
import com.basistheory.core.Suppliers;
import com.basistheory.resources.applepay.domain.DomainClient;
import com.basistheory.resources.applepay.requests.ApplePayTokenizeRequest;
import com.basistheory.resources.applepay.session.SessionClient;
import com.basistheory.types.ApplePayTokenizeResponse;
import java.util.function.Supplier;

public class ApplePayClient {
    protected final ClientOptions clientOptions;

    private final RawApplePayClient rawClient;

    protected final Supplier<DomainClient> domainClient;

    protected final Supplier<SessionClient> sessionClient;

    public ApplePayClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawApplePayClient(clientOptions);
        this.domainClient = Suppliers.memoize(() -> new DomainClient(clientOptions));
        this.sessionClient = Suppliers.memoize(() -> new SessionClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawApplePayClient withRawResponse() {
        return this.rawClient;
    }

    public ApplePayTokenizeResponse tokenize() {
        return this.rawClient.tokenize().body();
    }

    public ApplePayTokenizeResponse tokenize(ApplePayTokenizeRequest request) {
        return this.rawClient.tokenize(request).body();
    }

    public ApplePayTokenizeResponse tokenize(ApplePayTokenizeRequest request, RequestOptions requestOptions) {
        return this.rawClient.tokenize(request, requestOptions).body();
    }

    public DomainClient domain() {
        return this.domainClient.get();
    }

    public SessionClient session() {
        return this.sessionClient.get();
    }
}
