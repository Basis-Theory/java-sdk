/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.googlepay;

import com.basistheory.core.ClientOptions;
import com.basistheory.core.RequestOptions;
import com.basistheory.resources.googlepay.requests.GooglePayCreateRequest;
import com.basistheory.types.GooglePayCreateResponse;
import com.basistheory.types.GooglePayToken;
import java.util.concurrent.CompletableFuture;

public class AsyncGooglePayClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawGooglePayClient rawClient;

    public AsyncGooglePayClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawGooglePayClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawGooglePayClient withRawResponse() {
        return this.rawClient;
    }

    public CompletableFuture<GooglePayCreateResponse> create() {
        return this.rawClient.create().thenApply(response -> response.body());
    }

    public CompletableFuture<GooglePayCreateResponse> create(GooglePayCreateRequest request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    public CompletableFuture<GooglePayCreateResponse> create(
            GooglePayCreateRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<GooglePayToken> get(String id) {
        return this.rawClient.get(id).thenApply(response -> response.body());
    }

    public CompletableFuture<GooglePayToken> get(String id, RequestOptions requestOptions) {
        return this.rawClient.get(id, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<String> delete(String id) {
        return this.rawClient.delete(id).thenApply(response -> response.body());
    }

    public CompletableFuture<String> delete(String id, RequestOptions requestOptions) {
        return this.rawClient.delete(id, requestOptions).thenApply(response -> response.body());
    }
}
