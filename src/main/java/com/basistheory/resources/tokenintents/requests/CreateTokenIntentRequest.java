/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.tokenintents.requests;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateTokenIntentRequest.Builder.class)
public final class CreateTokenIntentRequest {
    private final String type;

    private final Object data;

    private final Map<String, Object> additionalProperties;

    private CreateTokenIntentRequest(String type, Object data, Map<String, Object> additionalProperties) {
        this.type = type;
        this.data = data;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("type")
    public String getType() {
        return type;
    }

    @JsonProperty("data")
    public Object getData() {
        return data;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateTokenIntentRequest && equalTo((CreateTokenIntentRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateTokenIntentRequest other) {
        return type.equals(other.type) && data.equals(other.data);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.data);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        DataStage type(@NotNull String type);

        Builder from(CreateTokenIntentRequest other);
    }

    public interface DataStage {
        _FinalStage data(Object data);
    }

    public interface _FinalStage {
        CreateTokenIntentRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, DataStage, _FinalStage {
        private String type;

        private Object data;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateTokenIntentRequest other) {
            type(other.getType());
            data(other.getData());
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public DataStage type(@NotNull String type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("data")
        public _FinalStage data(Object data) {
            this.data = data;
            return this;
        }

        @java.lang.Override
        public CreateTokenIntentRequest build() {
            return new CreateTokenIntentRequest(type, data, additionalProperties);
        }
    }
}
