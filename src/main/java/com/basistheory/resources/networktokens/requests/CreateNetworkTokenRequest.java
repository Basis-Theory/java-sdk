/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.networktokens.requests;

import com.basistheory.core.ObjectMappers;
import com.basistheory.types.Card;
import com.basistheory.types.CardholderInfo;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateNetworkTokenRequest.Builder.class)
public final class CreateNetworkTokenRequest {
    private final Optional<Card> data;

    private final Optional<String> tokenId;

    private final Optional<String> tokenIntentId;

    private final Optional<CardholderInfo> cardholderInfo;

    private final Map<String, Object> additionalProperties;

    private CreateNetworkTokenRequest(
            Optional<Card> data,
            Optional<String> tokenId,
            Optional<String> tokenIntentId,
            Optional<CardholderInfo> cardholderInfo,
            Map<String, Object> additionalProperties) {
        this.data = data;
        this.tokenId = tokenId;
        this.tokenIntentId = tokenIntentId;
        this.cardholderInfo = cardholderInfo;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("data")
    public Optional<Card> getData() {
        return data;
    }

    @JsonProperty("token_id")
    public Optional<String> getTokenId() {
        return tokenId;
    }

    @JsonProperty("token_intent_id")
    public Optional<String> getTokenIntentId() {
        return tokenIntentId;
    }

    @JsonProperty("cardholder_info")
    public Optional<CardholderInfo> getCardholderInfo() {
        return cardholderInfo;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateNetworkTokenRequest && equalTo((CreateNetworkTokenRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateNetworkTokenRequest other) {
        return data.equals(other.data)
                && tokenId.equals(other.tokenId)
                && tokenIntentId.equals(other.tokenIntentId)
                && cardholderInfo.equals(other.cardholderInfo);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.data, this.tokenId, this.tokenIntentId, this.cardholderInfo);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Card> data = Optional.empty();

        private Optional<String> tokenId = Optional.empty();

        private Optional<String> tokenIntentId = Optional.empty();

        private Optional<CardholderInfo> cardholderInfo = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CreateNetworkTokenRequest other) {
            data(other.getData());
            tokenId(other.getTokenId());
            tokenIntentId(other.getTokenIntentId());
            cardholderInfo(other.getCardholderInfo());
            return this;
        }

        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public Builder data(Optional<Card> data) {
            this.data = data;
            return this;
        }

        public Builder data(Card data) {
            this.data = Optional.ofNullable(data);
            return this;
        }

        @JsonSetter(value = "token_id", nulls = Nulls.SKIP)
        public Builder tokenId(Optional<String> tokenId) {
            this.tokenId = tokenId;
            return this;
        }

        public Builder tokenId(String tokenId) {
            this.tokenId = Optional.ofNullable(tokenId);
            return this;
        }

        @JsonSetter(value = "token_intent_id", nulls = Nulls.SKIP)
        public Builder tokenIntentId(Optional<String> tokenIntentId) {
            this.tokenIntentId = tokenIntentId;
            return this;
        }

        public Builder tokenIntentId(String tokenIntentId) {
            this.tokenIntentId = Optional.ofNullable(tokenIntentId);
            return this;
        }

        @JsonSetter(value = "cardholder_info", nulls = Nulls.SKIP)
        public Builder cardholderInfo(Optional<CardholderInfo> cardholderInfo) {
            this.cardholderInfo = cardholderInfo;
            return this;
        }

        public Builder cardholderInfo(CardholderInfo cardholderInfo) {
            this.cardholderInfo = Optional.ofNullable(cardholderInfo);
            return this;
        }

        public CreateNetworkTokenRequest build() {
            return new CreateNetworkTokenRequest(data, tokenId, tokenIntentId, cardholderInfo, additionalProperties);
        }
    }
}
