/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.tokens.requests;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchTokensRequestV2.Builder.class)
public final class SearchTokensRequestV2 {
    private final Optional<String> query;

    private final Optional<String> start;

    private final Optional<Integer> size;

    private final Map<String, Object> additionalProperties;

    private SearchTokensRequestV2(
            Optional<String> query,
            Optional<String> start,
            Optional<Integer> size,
            Map<String, Object> additionalProperties) {
        this.query = query;
        this.start = start;
        this.size = size;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("query")
    public Optional<String> getQuery() {
        return query;
    }

    @JsonProperty("start")
    public Optional<String> getStart() {
        return start;
    }

    @JsonProperty("size")
    public Optional<Integer> getSize() {
        return size;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchTokensRequestV2 && equalTo((SearchTokensRequestV2) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchTokensRequestV2 other) {
        return query.equals(other.query) && start.equals(other.start) && size.equals(other.size);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.query, this.start, this.size);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> query = Optional.empty();

        private Optional<String> start = Optional.empty();

        private Optional<Integer> size = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SearchTokensRequestV2 other) {
            query(other.getQuery());
            start(other.getStart());
            size(other.getSize());
            return this;
        }

        @JsonSetter(value = "query", nulls = Nulls.SKIP)
        public Builder query(Optional<String> query) {
            this.query = query;
            return this;
        }

        public Builder query(String query) {
            this.query = Optional.ofNullable(query);
            return this;
        }

        @JsonSetter(value = "start", nulls = Nulls.SKIP)
        public Builder start(Optional<String> start) {
            this.start = start;
            return this;
        }

        public Builder start(String start) {
            this.start = Optional.ofNullable(start);
            return this;
        }

        @JsonSetter(value = "size", nulls = Nulls.SKIP)
        public Builder size(Optional<Integer> size) {
            this.size = size;
            return this;
        }

        public Builder size(Integer size) {
            this.size = Optional.ofNullable(size);
            return this;
        }

        public SearchTokensRequestV2 build() {
            return new SearchTokensRequestV2(query, start, size, additionalProperties);
        }
    }
}
