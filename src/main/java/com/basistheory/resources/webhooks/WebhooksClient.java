/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.webhooks;

import com.basistheory.core.ClientOptions;
import com.basistheory.core.RequestOptions;
import com.basistheory.core.Suppliers;
import com.basistheory.resources.webhooks.events.EventsClient;
import com.basistheory.resources.webhooks.requests.CreateWebhookRequest;
import com.basistheory.resources.webhooks.requests.UpdateWebhookRequest;
import com.basistheory.types.Webhook;
import com.basistheory.types.WebhookList;
import java.util.function.Supplier;

public class WebhooksClient {
    protected final ClientOptions clientOptions;

    private final RawWebhooksClient rawClient;

    protected final Supplier<EventsClient> eventsClient;

    public WebhooksClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawWebhooksClient(clientOptions);
        this.eventsClient = Suppliers.memoize(() -> new EventsClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawWebhooksClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Simple endpoint that can be utilized to verify the application is running
     */
    public void ping() {
        this.rawClient.ping().body();
    }

    /**
     * Simple endpoint that can be utilized to verify the application is running
     */
    public void ping(RequestOptions requestOptions) {
        this.rawClient.ping(requestOptions).body();
    }

    /**
     * Returns the webhook
     */
    public Webhook get(String id) {
        return this.rawClient.get(id).body();
    }

    /**
     * Returns the webhook
     */
    public Webhook get(String id, RequestOptions requestOptions) {
        return this.rawClient.get(id, requestOptions).body();
    }

    /**
     * Update a new webhook
     */
    public Webhook update(String id, UpdateWebhookRequest request) {
        return this.rawClient.update(id, request).body();
    }

    /**
     * Update a new webhook
     */
    public Webhook update(String id, UpdateWebhookRequest request, RequestOptions requestOptions) {
        return this.rawClient.update(id, request, requestOptions).body();
    }

    /**
     * Delete a new webhook
     */
    public void delete(String id) {
        this.rawClient.delete(id).body();
    }

    /**
     * Delete a new webhook
     */
    public void delete(String id, RequestOptions requestOptions) {
        this.rawClient.delete(id, requestOptions).body();
    }

    /**
     * Returns the configured webhooks
     */
    public WebhookList list() {
        return this.rawClient.list().body();
    }

    /**
     * Returns the configured webhooks
     */
    public WebhookList list(RequestOptions requestOptions) {
        return this.rawClient.list(requestOptions).body();
    }

    /**
     * Create a new webhook
     */
    public Webhook create(CreateWebhookRequest request) {
        return this.rawClient.create(request).body();
    }

    /**
     * Create a new webhook
     */
    public Webhook create(CreateWebhookRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).body();
    }

    public EventsClient events() {
        return this.eventsClient.get();
    }
}
