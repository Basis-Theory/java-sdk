/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.webhooks;

import com.basistheory.core.ClientOptions;
import com.basistheory.core.RequestOptions;
import com.basistheory.core.Suppliers;
import com.basistheory.resources.webhooks.events.AsyncEventsClient;
import com.basistheory.resources.webhooks.requests.CreateWebhookRequest;
import com.basistheory.resources.webhooks.requests.UpdateWebhookRequest;
import com.basistheory.types.Webhook;
import com.basistheory.types.WebhookList;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

public class AsyncWebhooksClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawWebhooksClient rawClient;

    protected final Supplier<AsyncEventsClient> eventsClient;

    public AsyncWebhooksClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawWebhooksClient(clientOptions);
        this.eventsClient = Suppliers.memoize(() -> new AsyncEventsClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawWebhooksClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Simple endpoint that can be utilized to verify the application is running
     */
    public CompletableFuture<Void> ping() {
        return this.rawClient.ping().thenApply(response -> response.body());
    }

    /**
     * Simple endpoint that can be utilized to verify the application is running
     */
    public CompletableFuture<Void> ping(RequestOptions requestOptions) {
        return this.rawClient.ping(requestOptions).thenApply(response -> response.body());
    }

    /**
     * Returns the webhook
     */
    public CompletableFuture<Webhook> get(String id) {
        return this.rawClient.get(id).thenApply(response -> response.body());
    }

    /**
     * Returns the webhook
     */
    public CompletableFuture<Webhook> get(String id, RequestOptions requestOptions) {
        return this.rawClient.get(id, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Update a new webhook
     */
    public CompletableFuture<Webhook> update(String id, UpdateWebhookRequest request) {
        return this.rawClient.update(id, request).thenApply(response -> response.body());
    }

    /**
     * Update a new webhook
     */
    public CompletableFuture<Webhook> update(String id, UpdateWebhookRequest request, RequestOptions requestOptions) {
        return this.rawClient.update(id, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Delete a new webhook
     */
    public CompletableFuture<Void> delete(String id) {
        return this.rawClient.delete(id).thenApply(response -> response.body());
    }

    /**
     * Delete a new webhook
     */
    public CompletableFuture<Void> delete(String id, RequestOptions requestOptions) {
        return this.rawClient.delete(id, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Returns the configured webhooks
     */
    public CompletableFuture<WebhookList> list() {
        return this.rawClient.list().thenApply(response -> response.body());
    }

    /**
     * Returns the configured webhooks
     */
    public CompletableFuture<WebhookList> list(RequestOptions requestOptions) {
        return this.rawClient.list(requestOptions).thenApply(response -> response.body());
    }

    /**
     * Create a new webhook
     */
    public CompletableFuture<Webhook> create(CreateWebhookRequest request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    /**
     * Create a new webhook
     */
    public CompletableFuture<Webhook> create(CreateWebhookRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }

    public AsyncEventsClient events() {
        return this.eventsClient.get();
    }
}
