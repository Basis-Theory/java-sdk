/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.threeds.sessions;

import com.basistheory.core.ClientOptions;
import com.basistheory.core.IdempotentRequestOptions;
import com.basistheory.core.RequestOptions;
import com.basistheory.resources.threeds.sessions.requests.AuthenticateThreeDsSessionRequest;
import com.basistheory.resources.threeds.sessions.requests.CreateThreeDsSessionRequest;
import com.basistheory.types.CreateThreeDsSessionResponse;
import com.basistheory.types.ThreeDsAuthentication;
import com.basistheory.types.ThreeDsSession;
import java.util.concurrent.CompletableFuture;

public class AsyncSessionsClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawSessionsClient rawClient;

    public AsyncSessionsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawSessionsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawSessionsClient withRawResponse() {
        return this.rawClient;
    }

    public CompletableFuture<CreateThreeDsSessionResponse> create() {
        return this.rawClient.create().thenApply(response -> response.body());
    }

    public CompletableFuture<CreateThreeDsSessionResponse> create(CreateThreeDsSessionRequest request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    public CompletableFuture<CreateThreeDsSessionResponse> create(
            CreateThreeDsSessionRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<ThreeDsAuthentication> authenticate(
            String sessionId, AuthenticateThreeDsSessionRequest request) {
        return this.rawClient.authenticate(sessionId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<ThreeDsAuthentication> authenticate(
            String sessionId, AuthenticateThreeDsSessionRequest request, IdempotentRequestOptions requestOptions) {
        return this.rawClient.authenticate(sessionId, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<ThreeDsAuthentication> getChallengeResult(String sessionId) {
        return this.rawClient.getChallengeResult(sessionId).thenApply(response -> response.body());
    }

    public CompletableFuture<ThreeDsAuthentication> getChallengeResult(
            String sessionId, RequestOptions requestOptions) {
        return this.rawClient.getChallengeResult(sessionId, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<ThreeDsSession> get(String id) {
        return this.rawClient.get(id).thenApply(response -> response.body());
    }

    public CompletableFuture<ThreeDsSession> get(String id, RequestOptions requestOptions) {
        return this.rawClient.get(id, requestOptions).thenApply(response -> response.body());
    }
}
