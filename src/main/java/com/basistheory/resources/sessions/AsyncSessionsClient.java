/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.sessions;

import com.basistheory.core.ClientOptions;
import com.basistheory.core.IdempotentRequestOptions;
import com.basistheory.resources.sessions.requests.AuthorizeSessionRequest;
import com.basistheory.types.CreateSessionResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncSessionsClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawSessionsClient rawClient;

    public AsyncSessionsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawSessionsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawSessionsClient withRawResponse() {
        return this.rawClient;
    }

    public CompletableFuture<CreateSessionResponse> create() {
        return this.rawClient.create().thenApply(response -> response.body());
    }

    public CompletableFuture<CreateSessionResponse> create(IdempotentRequestOptions requestOptions) {
        return this.rawClient.create(requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> authorize(AuthorizeSessionRequest request) {
        return this.rawClient.authorize(request).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> authorize(AuthorizeSessionRequest request, IdempotentRequestOptions requestOptions) {
        return this.rawClient.authorize(request, requestOptions).thenApply(response -> response.body());
    }
}
