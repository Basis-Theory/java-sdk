/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.reactors.requests;

import com.basistheory.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ReactRequest.Builder.class)
public final class ReactRequest {
    private final Optional<Object> args;

    private final Optional<String> callbackUrl;

    private final Map<String, Object> additionalProperties;

    private ReactRequest(
            Optional<Object> args, Optional<String> callbackUrl, Map<String, Object> additionalProperties) {
        this.args = args;
        this.callbackUrl = callbackUrl;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("args")
    public Optional<Object> getArgs() {
        return args;
    }

    @JsonProperty("callback_url")
    public Optional<String> getCallbackUrl() {
        return callbackUrl;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ReactRequest && equalTo((ReactRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ReactRequest other) {
        return args.equals(other.args) && callbackUrl.equals(other.callbackUrl);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.args, this.callbackUrl);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Object> args = Optional.empty();

        private Optional<String> callbackUrl = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ReactRequest other) {
            args(other.getArgs());
            callbackUrl(other.getCallbackUrl());
            return this;
        }

        @JsonSetter(value = "args", nulls = Nulls.SKIP)
        public Builder args(Optional<Object> args) {
            this.args = args;
            return this;
        }

        public Builder args(Object args) {
            this.args = Optional.ofNullable(args);
            return this;
        }

        @JsonSetter(value = "callback_url", nulls = Nulls.SKIP)
        public Builder callbackUrl(Optional<String> callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }

        public Builder callbackUrl(String callbackUrl) {
            this.callbackUrl = Optional.ofNullable(callbackUrl);
            return this;
        }

        public ReactRequest build() {
            return new ReactRequest(args, callbackUrl, additionalProperties);
        }
    }
}
