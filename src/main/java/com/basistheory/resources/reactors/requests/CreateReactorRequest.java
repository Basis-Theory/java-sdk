/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.reactors.requests;

import com.basistheory.core.ObjectMappers;
import com.basistheory.types.Application;
import com.basistheory.types.RuntimeOptions;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateReactorRequest.Builder.class)
public final class CreateReactorRequest {
    private final String name;

    private final String code;

    private final Optional<Application> application;

    private final Optional<Map<String, Optional<String>>> configuration;

    private final Optional<String> runtime;

    private final Optional<RuntimeOptions> options;

    private final Map<String, Object> additionalProperties;

    private CreateReactorRequest(
            String name,
            String code,
            Optional<Application> application,
            Optional<Map<String, Optional<String>>> configuration,
            Optional<String> runtime,
            Optional<RuntimeOptions> options,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.code = code;
        this.application = application;
        this.configuration = configuration;
        this.runtime = runtime;
        this.options = options;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("code")
    public String getCode() {
        return code;
    }

    @JsonProperty("application")
    public Optional<Application> getApplication() {
        return application;
    }

    @JsonProperty("configuration")
    public Optional<Map<String, Optional<String>>> getConfiguration() {
        return configuration;
    }

    @JsonProperty("runtime")
    public Optional<String> getRuntime() {
        return runtime;
    }

    @JsonProperty("options")
    public Optional<RuntimeOptions> getOptions() {
        return options;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateReactorRequest && equalTo((CreateReactorRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateReactorRequest other) {
        return name.equals(other.name)
                && code.equals(other.code)
                && application.equals(other.application)
                && configuration.equals(other.configuration)
                && runtime.equals(other.runtime)
                && options.equals(other.options);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.code, this.application, this.configuration, this.runtime, this.options);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        CodeStage name(@NotNull String name);

        Builder from(CreateReactorRequest other);
    }

    public interface CodeStage {
        _FinalStage code(@NotNull String code);
    }

    public interface _FinalStage {
        CreateReactorRequest build();

        _FinalStage application(Optional<Application> application);

        _FinalStage application(Application application);

        _FinalStage configuration(Optional<Map<String, Optional<String>>> configuration);

        _FinalStage configuration(Map<String, Optional<String>> configuration);

        _FinalStage runtime(Optional<String> runtime);

        _FinalStage runtime(String runtime);

        _FinalStage options(Optional<RuntimeOptions> options);

        _FinalStage options(RuntimeOptions options);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, CodeStage, _FinalStage {
        private String name;

        private String code;

        private Optional<RuntimeOptions> options = Optional.empty();

        private Optional<String> runtime = Optional.empty();

        private Optional<Map<String, Optional<String>>> configuration = Optional.empty();

        private Optional<Application> application = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateReactorRequest other) {
            name(other.getName());
            code(other.getCode());
            application(other.getApplication());
            configuration(other.getConfiguration());
            runtime(other.getRuntime());
            options(other.getOptions());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public CodeStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("code")
        public _FinalStage code(@NotNull String code) {
            this.code = Objects.requireNonNull(code, "code must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage options(RuntimeOptions options) {
            this.options = Optional.ofNullable(options);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "options", nulls = Nulls.SKIP)
        public _FinalStage options(Optional<RuntimeOptions> options) {
            this.options = options;
            return this;
        }

        @java.lang.Override
        public _FinalStage runtime(String runtime) {
            this.runtime = Optional.ofNullable(runtime);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "runtime", nulls = Nulls.SKIP)
        public _FinalStage runtime(Optional<String> runtime) {
            this.runtime = runtime;
            return this;
        }

        @java.lang.Override
        public _FinalStage configuration(Map<String, Optional<String>> configuration) {
            this.configuration = Optional.ofNullable(configuration);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "configuration", nulls = Nulls.SKIP)
        public _FinalStage configuration(Optional<Map<String, Optional<String>>> configuration) {
            this.configuration = configuration;
            return this;
        }

        @java.lang.Override
        public _FinalStage application(Application application) {
            this.application = Optional.ofNullable(application);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "application", nulls = Nulls.SKIP)
        public _FinalStage application(Optional<Application> application) {
            this.application = application;
            return this;
        }

        @java.lang.Override
        public CreateReactorRequest build() {
            return new CreateReactorRequest(
                    name, code, application, configuration, runtime, options, additionalProperties);
        }
    }
}
