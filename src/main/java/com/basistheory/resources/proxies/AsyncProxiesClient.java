/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.proxies;

import com.basistheory.core.ClientOptions;
import com.basistheory.core.IdempotentRequestOptions;
import com.basistheory.core.RequestOptions;
import com.basistheory.core.pagination.SyncPagingIterable;
import com.basistheory.resources.proxies.requests.CreateProxyRequest;
import com.basistheory.resources.proxies.requests.PatchProxyRequest;
import com.basistheory.resources.proxies.requests.ProxiesListRequest;
import com.basistheory.resources.proxies.requests.UpdateProxyRequest;
import com.basistheory.types.Proxy;
import java.util.concurrent.CompletableFuture;

public class AsyncProxiesClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawProxiesClient rawClient;

    public AsyncProxiesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawProxiesClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawProxiesClient withRawResponse() {
        return this.rawClient;
    }

    public CompletableFuture<SyncPagingIterable<Proxy>> list() {
        return this.rawClient.list().thenApply(response -> response.body());
    }

    public CompletableFuture<SyncPagingIterable<Proxy>> list(ProxiesListRequest request) {
        return this.rawClient.list(request).thenApply(response -> response.body());
    }

    public CompletableFuture<SyncPagingIterable<Proxy>> list(
            ProxiesListRequest request, RequestOptions requestOptions) {
        return this.rawClient.list(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Proxy> create(CreateProxyRequest request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    public CompletableFuture<Proxy> create(CreateProxyRequest request, IdempotentRequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Proxy> get(String id) {
        return this.rawClient.get(id).thenApply(response -> response.body());
    }

    public CompletableFuture<Proxy> get(String id, RequestOptions requestOptions) {
        return this.rawClient.get(id, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Proxy> update(String id, UpdateProxyRequest request) {
        return this.rawClient.update(id, request).thenApply(response -> response.body());
    }

    public CompletableFuture<Proxy> update(
            String id, UpdateProxyRequest request, IdempotentRequestOptions requestOptions) {
        return this.rawClient.update(id, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> delete(String id) {
        return this.rawClient.delete(id).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> delete(String id, RequestOptions requestOptions) {
        return this.rawClient.delete(id, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> patch(String id) {
        return this.rawClient.patch(id).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> patch(String id, PatchProxyRequest request) {
        return this.rawClient.patch(id, request).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> patch(
            String id, PatchProxyRequest request, IdempotentRequestOptions requestOptions) {
        return this.rawClient.patch(id, request, requestOptions).thenApply(response -> response.body());
    }
}
