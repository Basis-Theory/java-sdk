/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basistheory.resources.proxies.requests;

import com.basistheory.core.ObjectMappers;
import com.basistheory.types.Application;
import com.basistheory.types.ProxyTransform;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PatchProxyRequest.Builder.class)
public final class PatchProxyRequest {
    private final Optional<String> name;

    private final Optional<String> destinationUrl;

    private final Optional<ProxyTransform> requestTransform;

    private final Optional<ProxyTransform> responseTransform;

    private final Optional<List<ProxyTransform>> requestTransforms;

    private final Optional<List<ProxyTransform>> responseTransforms;

    private final Optional<Application> application;

    private final Optional<Map<String, Optional<String>>> configuration;

    private final Optional<Boolean> requireAuth;

    private final Map<String, Object> additionalProperties;

    private PatchProxyRequest(
            Optional<String> name,
            Optional<String> destinationUrl,
            Optional<ProxyTransform> requestTransform,
            Optional<ProxyTransform> responseTransform,
            Optional<List<ProxyTransform>> requestTransforms,
            Optional<List<ProxyTransform>> responseTransforms,
            Optional<Application> application,
            Optional<Map<String, Optional<String>>> configuration,
            Optional<Boolean> requireAuth,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.destinationUrl = destinationUrl;
        this.requestTransform = requestTransform;
        this.responseTransform = responseTransform;
        this.requestTransforms = requestTransforms;
        this.responseTransforms = responseTransforms;
        this.application = application;
        this.configuration = configuration;
        this.requireAuth = requireAuth;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("destination_url")
    public Optional<String> getDestinationUrl() {
        return destinationUrl;
    }

    @JsonProperty("request_transform")
    public Optional<ProxyTransform> getRequestTransform() {
        return requestTransform;
    }

    @JsonProperty("response_transform")
    public Optional<ProxyTransform> getResponseTransform() {
        return responseTransform;
    }

    @JsonProperty("request_transforms")
    public Optional<List<ProxyTransform>> getRequestTransforms() {
        return requestTransforms;
    }

    @JsonProperty("response_transforms")
    public Optional<List<ProxyTransform>> getResponseTransforms() {
        return responseTransforms;
    }

    @JsonProperty("application")
    public Optional<Application> getApplication() {
        return application;
    }

    @JsonProperty("configuration")
    public Optional<Map<String, Optional<String>>> getConfiguration() {
        return configuration;
    }

    @JsonProperty("require_auth")
    public Optional<Boolean> getRequireAuth() {
        return requireAuth;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PatchProxyRequest && equalTo((PatchProxyRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PatchProxyRequest other) {
        return name.equals(other.name)
                && destinationUrl.equals(other.destinationUrl)
                && requestTransform.equals(other.requestTransform)
                && responseTransform.equals(other.responseTransform)
                && requestTransforms.equals(other.requestTransforms)
                && responseTransforms.equals(other.responseTransforms)
                && application.equals(other.application)
                && configuration.equals(other.configuration)
                && requireAuth.equals(other.requireAuth);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.destinationUrl,
                this.requestTransform,
                this.responseTransform,
                this.requestTransforms,
                this.responseTransforms,
                this.application,
                this.configuration,
                this.requireAuth);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<String> destinationUrl = Optional.empty();

        private Optional<ProxyTransform> requestTransform = Optional.empty();

        private Optional<ProxyTransform> responseTransform = Optional.empty();

        private Optional<List<ProxyTransform>> requestTransforms = Optional.empty();

        private Optional<List<ProxyTransform>> responseTransforms = Optional.empty();

        private Optional<Application> application = Optional.empty();

        private Optional<Map<String, Optional<String>>> configuration = Optional.empty();

        private Optional<Boolean> requireAuth = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PatchProxyRequest other) {
            name(other.getName());
            destinationUrl(other.getDestinationUrl());
            requestTransform(other.getRequestTransform());
            responseTransform(other.getResponseTransform());
            requestTransforms(other.getRequestTransforms());
            responseTransforms(other.getResponseTransforms());
            application(other.getApplication());
            configuration(other.getConfiguration());
            requireAuth(other.getRequireAuth());
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "destination_url", nulls = Nulls.SKIP)
        public Builder destinationUrl(Optional<String> destinationUrl) {
            this.destinationUrl = destinationUrl;
            return this;
        }

        public Builder destinationUrl(String destinationUrl) {
            this.destinationUrl = Optional.ofNullable(destinationUrl);
            return this;
        }

        @JsonSetter(value = "request_transform", nulls = Nulls.SKIP)
        public Builder requestTransform(Optional<ProxyTransform> requestTransform) {
            this.requestTransform = requestTransform;
            return this;
        }

        public Builder requestTransform(ProxyTransform requestTransform) {
            this.requestTransform = Optional.ofNullable(requestTransform);
            return this;
        }

        @JsonSetter(value = "response_transform", nulls = Nulls.SKIP)
        public Builder responseTransform(Optional<ProxyTransform> responseTransform) {
            this.responseTransform = responseTransform;
            return this;
        }

        public Builder responseTransform(ProxyTransform responseTransform) {
            this.responseTransform = Optional.ofNullable(responseTransform);
            return this;
        }

        @JsonSetter(value = "request_transforms", nulls = Nulls.SKIP)
        public Builder requestTransforms(Optional<List<ProxyTransform>> requestTransforms) {
            this.requestTransforms = requestTransforms;
            return this;
        }

        public Builder requestTransforms(List<ProxyTransform> requestTransforms) {
            this.requestTransforms = Optional.ofNullable(requestTransforms);
            return this;
        }

        @JsonSetter(value = "response_transforms", nulls = Nulls.SKIP)
        public Builder responseTransforms(Optional<List<ProxyTransform>> responseTransforms) {
            this.responseTransforms = responseTransforms;
            return this;
        }

        public Builder responseTransforms(List<ProxyTransform> responseTransforms) {
            this.responseTransforms = Optional.ofNullable(responseTransforms);
            return this;
        }

        @JsonSetter(value = "application", nulls = Nulls.SKIP)
        public Builder application(Optional<Application> application) {
            this.application = application;
            return this;
        }

        public Builder application(Application application) {
            this.application = Optional.ofNullable(application);
            return this;
        }

        @JsonSetter(value = "configuration", nulls = Nulls.SKIP)
        public Builder configuration(Optional<Map<String, Optional<String>>> configuration) {
            this.configuration = configuration;
            return this;
        }

        public Builder configuration(Map<String, Optional<String>> configuration) {
            this.configuration = Optional.ofNullable(configuration);
            return this;
        }

        @JsonSetter(value = "require_auth", nulls = Nulls.SKIP)
        public Builder requireAuth(Optional<Boolean> requireAuth) {
            this.requireAuth = requireAuth;
            return this;
        }

        public Builder requireAuth(Boolean requireAuth) {
            this.requireAuth = Optional.ofNullable(requireAuth);
            return this;
        }

        public PatchProxyRequest build() {
            return new PatchProxyRequest(
                    name,
                    destinationUrl,
                    requestTransform,
                    responseTransform,
                    requestTransforms,
                    responseTransforms,
                    application,
                    configuration,
                    requireAuth,
                    additionalProperties);
        }
    }
}
