/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basis.theory.api.resources.threeds.requests;

import com.basis.theory.api.core.ObjectMappers;
import com.basis.theory.api.types.ThreeDsDeviceInfo;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateThreeDsSessionRequest.Builder.class)
public final class CreateThreeDsSessionRequest {
    private final Optional<String> pan;

    private final Optional<String> tokenId;

    private final Optional<String> tokenIntentId;

    private final Optional<String> type;

    private final Optional<String> device;

    private final Optional<ThreeDsDeviceInfo> deviceInfo;

    private final Map<String, Object> additionalProperties;

    private CreateThreeDsSessionRequest(
            Optional<String> pan,
            Optional<String> tokenId,
            Optional<String> tokenIntentId,
            Optional<String> type,
            Optional<String> device,
            Optional<ThreeDsDeviceInfo> deviceInfo,
            Map<String, Object> additionalProperties) {
        this.pan = pan;
        this.tokenId = tokenId;
        this.tokenIntentId = tokenIntentId;
        this.type = type;
        this.device = device;
        this.deviceInfo = deviceInfo;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("pan")
    public Optional<String> getPan() {
        return pan;
    }

    @JsonProperty("token_id")
    public Optional<String> getTokenId() {
        return tokenId;
    }

    @JsonProperty("token_intent_id")
    public Optional<String> getTokenIntentId() {
        return tokenIntentId;
    }

    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    @JsonProperty("device")
    public Optional<String> getDevice() {
        return device;
    }

    @JsonProperty("device_info")
    public Optional<ThreeDsDeviceInfo> getDeviceInfo() {
        return deviceInfo;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateThreeDsSessionRequest && equalTo((CreateThreeDsSessionRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateThreeDsSessionRequest other) {
        return pan.equals(other.pan)
                && tokenId.equals(other.tokenId)
                && tokenIntentId.equals(other.tokenIntentId)
                && type.equals(other.type)
                && device.equals(other.device)
                && deviceInfo.equals(other.deviceInfo);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.pan, this.tokenId, this.tokenIntentId, this.type, this.device, this.deviceInfo);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> pan = Optional.empty();

        private Optional<String> tokenId = Optional.empty();

        private Optional<String> tokenIntentId = Optional.empty();

        private Optional<String> type = Optional.empty();

        private Optional<String> device = Optional.empty();

        private Optional<ThreeDsDeviceInfo> deviceInfo = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CreateThreeDsSessionRequest other) {
            pan(other.getPan());
            tokenId(other.getTokenId());
            tokenIntentId(other.getTokenIntentId());
            type(other.getType());
            device(other.getDevice());
            deviceInfo(other.getDeviceInfo());
            return this;
        }

        @JsonSetter(value = "pan", nulls = Nulls.SKIP)
        public Builder pan(Optional<String> pan) {
            this.pan = pan;
            return this;
        }

        public Builder pan(String pan) {
            this.pan = Optional.ofNullable(pan);
            return this;
        }

        @JsonSetter(value = "token_id", nulls = Nulls.SKIP)
        public Builder tokenId(Optional<String> tokenId) {
            this.tokenId = tokenId;
            return this;
        }

        public Builder tokenId(String tokenId) {
            this.tokenId = Optional.ofNullable(tokenId);
            return this;
        }

        @JsonSetter(value = "token_intent_id", nulls = Nulls.SKIP)
        public Builder tokenIntentId(Optional<String> tokenIntentId) {
            this.tokenIntentId = tokenIntentId;
            return this;
        }

        public Builder tokenIntentId(String tokenIntentId) {
            this.tokenIntentId = Optional.ofNullable(tokenIntentId);
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        @JsonSetter(value = "device", nulls = Nulls.SKIP)
        public Builder device(Optional<String> device) {
            this.device = device;
            return this;
        }

        public Builder device(String device) {
            this.device = Optional.ofNullable(device);
            return this;
        }

        @JsonSetter(value = "device_info", nulls = Nulls.SKIP)
        public Builder deviceInfo(Optional<ThreeDsDeviceInfo> deviceInfo) {
            this.deviceInfo = deviceInfo;
            return this;
        }

        public Builder deviceInfo(ThreeDsDeviceInfo deviceInfo) {
            this.deviceInfo = Optional.ofNullable(deviceInfo);
            return this;
        }

        public CreateThreeDsSessionRequest build() {
            return new CreateThreeDsSessionRequest(
                    pan, tokenId, tokenIntentId, type, device, deviceInfo, additionalProperties);
        }
    }
}
