/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basis.theory.api.resources.tenants.connections.requests;

import com.basis.theory.api.core.ObjectMappers;
import com.basis.theory.api.types.TenantConnectionOptions;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateTenantConnectionRequest.Builder.class)
public final class CreateTenantConnectionRequest {
    private final String strategy;

    private final TenantConnectionOptions options;

    private final Map<String, Object> additionalProperties;

    private CreateTenantConnectionRequest(
            String strategy, TenantConnectionOptions options, Map<String, Object> additionalProperties) {
        this.strategy = strategy;
        this.options = options;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("strategy")
    public String getStrategy() {
        return strategy;
    }

    @JsonProperty("options")
    public TenantConnectionOptions getOptions() {
        return options;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateTenantConnectionRequest && equalTo((CreateTenantConnectionRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateTenantConnectionRequest other) {
        return strategy.equals(other.strategy) && options.equals(other.options);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.strategy, this.options);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StrategyStage builder() {
        return new Builder();
    }

    public interface StrategyStage {
        OptionsStage strategy(@NotNull String strategy);

        Builder from(CreateTenantConnectionRequest other);
    }

    public interface OptionsStage {
        _FinalStage options(@NotNull TenantConnectionOptions options);
    }

    public interface _FinalStage {
        CreateTenantConnectionRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements StrategyStage, OptionsStage, _FinalStage {
        private String strategy;

        private TenantConnectionOptions options;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateTenantConnectionRequest other) {
            strategy(other.getStrategy());
            options(other.getOptions());
            return this;
        }

        @java.lang.Override
        @JsonSetter("strategy")
        public OptionsStage strategy(@NotNull String strategy) {
            this.strategy = Objects.requireNonNull(strategy, "strategy must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("options")
        public _FinalStage options(@NotNull TenantConnectionOptions options) {
            this.options = Objects.requireNonNull(options, "options must not be null");
            return this;
        }

        @java.lang.Override
        public CreateTenantConnectionRequest build() {
            return new CreateTenantConnectionRequest(strategy, options, additionalProperties);
        }
    }
}
