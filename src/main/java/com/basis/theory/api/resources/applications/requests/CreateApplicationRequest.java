/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basis.theory.api.resources.applications.requests;

import com.basis.theory.api.core.ObjectMappers;
import com.basis.theory.api.types.AccessRule;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateApplicationRequest.Builder.class)
public final class CreateApplicationRequest {
    private final String name;

    private final String type;

    private final Optional<String> expiresAt;

    private final Optional<List<String>> permissions;

    private final Optional<List<AccessRule>> rules;

    private final Optional<Boolean> createKey;

    private final Map<String, Object> additionalProperties;

    private CreateApplicationRequest(
            String name,
            String type,
            Optional<String> expiresAt,
            Optional<List<String>> permissions,
            Optional<List<AccessRule>> rules,
            Optional<Boolean> createKey,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.type = type;
        this.expiresAt = expiresAt;
        this.permissions = permissions;
        this.rules = rules;
        this.createKey = createKey;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("type")
    public String getType() {
        return type;
    }

    @JsonProperty("expires_at")
    public Optional<String> getExpiresAt() {
        return expiresAt;
    }

    @JsonProperty("permissions")
    public Optional<List<String>> getPermissions() {
        return permissions;
    }

    @JsonProperty("rules")
    public Optional<List<AccessRule>> getRules() {
        return rules;
    }

    @JsonProperty("create_key")
    public Optional<Boolean> getCreateKey() {
        return createKey;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateApplicationRequest && equalTo((CreateApplicationRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateApplicationRequest other) {
        return name.equals(other.name)
                && type.equals(other.type)
                && expiresAt.equals(other.expiresAt)
                && permissions.equals(other.permissions)
                && rules.equals(other.rules)
                && createKey.equals(other.createKey);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.type, this.expiresAt, this.permissions, this.rules, this.createKey);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        TypeStage name(@NotNull String name);

        Builder from(CreateApplicationRequest other);
    }

    public interface TypeStage {
        _FinalStage type(@NotNull String type);
    }

    public interface _FinalStage {
        CreateApplicationRequest build();

        _FinalStage expiresAt(Optional<String> expiresAt);

        _FinalStage expiresAt(String expiresAt);

        _FinalStage permissions(Optional<List<String>> permissions);

        _FinalStage permissions(List<String> permissions);

        _FinalStage rules(Optional<List<AccessRule>> rules);

        _FinalStage rules(List<AccessRule> rules);

        _FinalStage createKey(Optional<Boolean> createKey);

        _FinalStage createKey(Boolean createKey);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, TypeStage, _FinalStage {
        private String name;

        private String type;

        private Optional<Boolean> createKey = Optional.empty();

        private Optional<List<AccessRule>> rules = Optional.empty();

        private Optional<List<String>> permissions = Optional.empty();

        private Optional<String> expiresAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateApplicationRequest other) {
            name(other.getName());
            type(other.getType());
            expiresAt(other.getExpiresAt());
            permissions(other.getPermissions());
            rules(other.getRules());
            createKey(other.getCreateKey());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public TypeStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(@NotNull String type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage createKey(Boolean createKey) {
            this.createKey = Optional.ofNullable(createKey);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "create_key", nulls = Nulls.SKIP)
        public _FinalStage createKey(Optional<Boolean> createKey) {
            this.createKey = createKey;
            return this;
        }

        @java.lang.Override
        public _FinalStage rules(List<AccessRule> rules) {
            this.rules = Optional.ofNullable(rules);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "rules", nulls = Nulls.SKIP)
        public _FinalStage rules(Optional<List<AccessRule>> rules) {
            this.rules = rules;
            return this;
        }

        @java.lang.Override
        public _FinalStage permissions(List<String> permissions) {
            this.permissions = Optional.ofNullable(permissions);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "permissions", nulls = Nulls.SKIP)
        public _FinalStage permissions(Optional<List<String>> permissions) {
            this.permissions = permissions;
            return this;
        }

        @java.lang.Override
        public _FinalStage expiresAt(String expiresAt) {
            this.expiresAt = Optional.ofNullable(expiresAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "expires_at", nulls = Nulls.SKIP)
        public _FinalStage expiresAt(Optional<String> expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        @java.lang.Override
        public CreateApplicationRequest build() {
            return new CreateApplicationRequest(
                    name, type, expiresAt, permissions, rules, createKey, additionalProperties);
        }
    }
}
