/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basis.theory.api.types;

import com.basis.theory.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Condition.Builder.class)
public final class Condition {
    private final Optional<String> attribute;

    private final Optional<String> operator;

    private final Optional<String> value;

    private final Map<String, Object> additionalProperties;

    private Condition(
            Optional<String> attribute,
            Optional<String> operator,
            Optional<String> value,
            Map<String, Object> additionalProperties) {
        this.attribute = attribute;
        this.operator = operator;
        this.value = value;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("attribute")
    public Optional<String> getAttribute() {
        return attribute;
    }

    @JsonProperty("operator")
    public Optional<String> getOperator() {
        return operator;
    }

    @JsonProperty("value")
    public Optional<String> getValue() {
        return value;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Condition && equalTo((Condition) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Condition other) {
        return attribute.equals(other.attribute) && operator.equals(other.operator) && value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.attribute, this.operator, this.value);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> attribute = Optional.empty();

        private Optional<String> operator = Optional.empty();

        private Optional<String> value = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Condition other) {
            attribute(other.getAttribute());
            operator(other.getOperator());
            value(other.getValue());
            return this;
        }

        @JsonSetter(value = "attribute", nulls = Nulls.SKIP)
        public Builder attribute(Optional<String> attribute) {
            this.attribute = attribute;
            return this;
        }

        public Builder attribute(String attribute) {
            this.attribute = Optional.ofNullable(attribute);
            return this;
        }

        @JsonSetter(value = "operator", nulls = Nulls.SKIP)
        public Builder operator(Optional<String> operator) {
            this.operator = operator;
            return this;
        }

        public Builder operator(String operator) {
            this.operator = Optional.ofNullable(operator);
            return this;
        }

        @JsonSetter(value = "value", nulls = Nulls.SKIP)
        public Builder value(Optional<String> value) {
            this.value = value;
            return this;
        }

        public Builder value(String value) {
            this.value = Optional.ofNullable(value);
            return this;
        }

        public Condition build() {
            return new Condition(attribute, operator, value, additionalProperties);
        }
    }
}
