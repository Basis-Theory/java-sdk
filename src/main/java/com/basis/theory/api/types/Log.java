/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basis.theory.api.types;

import com.basis.theory.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Log.Builder.class)
public final class Log {
    private final Optional<String> id;

    private final Optional<String> tenantId;

    private final Optional<String> actorId;

    private final Optional<String> actorType;

    private final Optional<String> entityType;

    private final Optional<String> entityId;

    private final Optional<String> operation;

    private final Optional<String> message;

    private final Optional<OffsetDateTime> createdAt;

    private final Map<String, Object> additionalProperties;

    private Log(
            Optional<String> id,
            Optional<String> tenantId,
            Optional<String> actorId,
            Optional<String> actorType,
            Optional<String> entityType,
            Optional<String> entityId,
            Optional<String> operation,
            Optional<String> message,
            Optional<OffsetDateTime> createdAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.tenantId = tenantId;
        this.actorId = actorId;
        this.actorType = actorType;
        this.entityType = entityType;
        this.entityId = entityId;
        this.operation = operation;
        this.message = message;
        this.createdAt = createdAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    @JsonProperty("tenant_id")
    public Optional<String> getTenantId() {
        return tenantId;
    }

    @JsonProperty("actor_id")
    public Optional<String> getActorId() {
        return actorId;
    }

    @JsonProperty("actor_type")
    public Optional<String> getActorType() {
        return actorType;
    }

    @JsonProperty("entity_type")
    public Optional<String> getEntityType() {
        return entityType;
    }

    @JsonProperty("entity_id")
    public Optional<String> getEntityId() {
        return entityId;
    }

    @JsonProperty("operation")
    public Optional<String> getOperation() {
        return operation;
    }

    @JsonProperty("message")
    public Optional<String> getMessage() {
        return message;
    }

    @JsonProperty("created_at")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Log && equalTo((Log) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Log other) {
        return id.equals(other.id)
                && tenantId.equals(other.tenantId)
                && actorId.equals(other.actorId)
                && actorType.equals(other.actorType)
                && entityType.equals(other.entityType)
                && entityId.equals(other.entityId)
                && operation.equals(other.operation)
                && message.equals(other.message)
                && createdAt.equals(other.createdAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.tenantId,
                this.actorId,
                this.actorType,
                this.entityType,
                this.entityId,
                this.operation,
                this.message,
                this.createdAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> tenantId = Optional.empty();

        private Optional<String> actorId = Optional.empty();

        private Optional<String> actorType = Optional.empty();

        private Optional<String> entityType = Optional.empty();

        private Optional<String> entityId = Optional.empty();

        private Optional<String> operation = Optional.empty();

        private Optional<String> message = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Log other) {
            id(other.getId());
            tenantId(other.getTenantId());
            actorId(other.getActorId());
            actorType(other.getActorType());
            entityType(other.getEntityType());
            entityId(other.getEntityId());
            operation(other.getOperation());
            message(other.getMessage());
            createdAt(other.getCreatedAt());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "tenant_id", nulls = Nulls.SKIP)
        public Builder tenantId(Optional<String> tenantId) {
            this.tenantId = tenantId;
            return this;
        }

        public Builder tenantId(String tenantId) {
            this.tenantId = Optional.ofNullable(tenantId);
            return this;
        }

        @JsonSetter(value = "actor_id", nulls = Nulls.SKIP)
        public Builder actorId(Optional<String> actorId) {
            this.actorId = actorId;
            return this;
        }

        public Builder actorId(String actorId) {
            this.actorId = Optional.ofNullable(actorId);
            return this;
        }

        @JsonSetter(value = "actor_type", nulls = Nulls.SKIP)
        public Builder actorType(Optional<String> actorType) {
            this.actorType = actorType;
            return this;
        }

        public Builder actorType(String actorType) {
            this.actorType = Optional.ofNullable(actorType);
            return this;
        }

        @JsonSetter(value = "entity_type", nulls = Nulls.SKIP)
        public Builder entityType(Optional<String> entityType) {
            this.entityType = entityType;
            return this;
        }

        public Builder entityType(String entityType) {
            this.entityType = Optional.ofNullable(entityType);
            return this;
        }

        @JsonSetter(value = "entity_id", nulls = Nulls.SKIP)
        public Builder entityId(Optional<String> entityId) {
            this.entityId = entityId;
            return this;
        }

        public Builder entityId(String entityId) {
            this.entityId = Optional.ofNullable(entityId);
            return this;
        }

        @JsonSetter(value = "operation", nulls = Nulls.SKIP)
        public Builder operation(Optional<String> operation) {
            this.operation = operation;
            return this;
        }

        public Builder operation(String operation) {
            this.operation = Optional.ofNullable(operation);
            return this;
        }

        @JsonSetter(value = "message", nulls = Nulls.SKIP)
        public Builder message(Optional<String> message) {
            this.message = message;
            return this;
        }

        public Builder message(String message) {
            this.message = Optional.ofNullable(message);
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Log build() {
            return new Log(
                    id,
                    tenantId,
                    actorId,
                    actorType,
                    entityType,
                    entityId,
                    operation,
                    message,
                    createdAt,
                    additionalProperties);
        }
    }
}
