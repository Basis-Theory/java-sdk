/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basis.theory.api.types;

import com.basis.theory.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ThreeDsCardholderInfo.Builder.class)
public final class ThreeDsCardholderInfo {
    private final Optional<String> accountId;

    private final Optional<String> accountType;

    private final Optional<ThreeDsCardholderAccountInfo> accountInfo;

    private final Optional<ThreeDsCardholderAuthenticationInfo> authenticationInfo;

    private final Optional<ThreeDsPriorAuthenticationInfo> priorAuthenticationInfo;

    private final Optional<String> name;

    private final Optional<String> email;

    private final Optional<ThreeDsCardholderPhoneNumber> phoneNumber;

    private final Optional<ThreeDsCardholderPhoneNumber> mobilePhoneNumber;

    private final Optional<ThreeDsCardholderPhoneNumber> workPhoneNumber;

    private final Optional<String> billingShippingAddressMatch;

    private final Optional<ThreeDsAddress> billingAddress;

    private final Optional<ThreeDsAddress> shippingAddress;

    private final Map<String, Object> additionalProperties;

    private ThreeDsCardholderInfo(
            Optional<String> accountId,
            Optional<String> accountType,
            Optional<ThreeDsCardholderAccountInfo> accountInfo,
            Optional<ThreeDsCardholderAuthenticationInfo> authenticationInfo,
            Optional<ThreeDsPriorAuthenticationInfo> priorAuthenticationInfo,
            Optional<String> name,
            Optional<String> email,
            Optional<ThreeDsCardholderPhoneNumber> phoneNumber,
            Optional<ThreeDsCardholderPhoneNumber> mobilePhoneNumber,
            Optional<ThreeDsCardholderPhoneNumber> workPhoneNumber,
            Optional<String> billingShippingAddressMatch,
            Optional<ThreeDsAddress> billingAddress,
            Optional<ThreeDsAddress> shippingAddress,
            Map<String, Object> additionalProperties) {
        this.accountId = accountId;
        this.accountType = accountType;
        this.accountInfo = accountInfo;
        this.authenticationInfo = authenticationInfo;
        this.priorAuthenticationInfo = priorAuthenticationInfo;
        this.name = name;
        this.email = email;
        this.phoneNumber = phoneNumber;
        this.mobilePhoneNumber = mobilePhoneNumber;
        this.workPhoneNumber = workPhoneNumber;
        this.billingShippingAddressMatch = billingShippingAddressMatch;
        this.billingAddress = billingAddress;
        this.shippingAddress = shippingAddress;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("account_id")
    public Optional<String> getAccountId() {
        return accountId;
    }

    @JsonProperty("account_type")
    public Optional<String> getAccountType() {
        return accountType;
    }

    @JsonProperty("account_info")
    public Optional<ThreeDsCardholderAccountInfo> getAccountInfo() {
        return accountInfo;
    }

    @JsonProperty("authentication_info")
    public Optional<ThreeDsCardholderAuthenticationInfo> getAuthenticationInfo() {
        return authenticationInfo;
    }

    @JsonProperty("prior_authentication_info")
    public Optional<ThreeDsPriorAuthenticationInfo> getPriorAuthenticationInfo() {
        return priorAuthenticationInfo;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    @JsonProperty("phone_number")
    public Optional<ThreeDsCardholderPhoneNumber> getPhoneNumber() {
        return phoneNumber;
    }

    @JsonProperty("mobile_phone_number")
    public Optional<ThreeDsCardholderPhoneNumber> getMobilePhoneNumber() {
        return mobilePhoneNumber;
    }

    @JsonProperty("work_phone_number")
    public Optional<ThreeDsCardholderPhoneNumber> getWorkPhoneNumber() {
        return workPhoneNumber;
    }

    @JsonProperty("billing_shipping_address_match")
    public Optional<String> getBillingShippingAddressMatch() {
        return billingShippingAddressMatch;
    }

    @JsonProperty("billing_address")
    public Optional<ThreeDsAddress> getBillingAddress() {
        return billingAddress;
    }

    @JsonProperty("shipping_address")
    public Optional<ThreeDsAddress> getShippingAddress() {
        return shippingAddress;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ThreeDsCardholderInfo && equalTo((ThreeDsCardholderInfo) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ThreeDsCardholderInfo other) {
        return accountId.equals(other.accountId)
                && accountType.equals(other.accountType)
                && accountInfo.equals(other.accountInfo)
                && authenticationInfo.equals(other.authenticationInfo)
                && priorAuthenticationInfo.equals(other.priorAuthenticationInfo)
                && name.equals(other.name)
                && email.equals(other.email)
                && phoneNumber.equals(other.phoneNumber)
                && mobilePhoneNumber.equals(other.mobilePhoneNumber)
                && workPhoneNumber.equals(other.workPhoneNumber)
                && billingShippingAddressMatch.equals(other.billingShippingAddressMatch)
                && billingAddress.equals(other.billingAddress)
                && shippingAddress.equals(other.shippingAddress);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.accountId,
                this.accountType,
                this.accountInfo,
                this.authenticationInfo,
                this.priorAuthenticationInfo,
                this.name,
                this.email,
                this.phoneNumber,
                this.mobilePhoneNumber,
                this.workPhoneNumber,
                this.billingShippingAddressMatch,
                this.billingAddress,
                this.shippingAddress);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> accountId = Optional.empty();

        private Optional<String> accountType = Optional.empty();

        private Optional<ThreeDsCardholderAccountInfo> accountInfo = Optional.empty();

        private Optional<ThreeDsCardholderAuthenticationInfo> authenticationInfo = Optional.empty();

        private Optional<ThreeDsPriorAuthenticationInfo> priorAuthenticationInfo = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<ThreeDsCardholderPhoneNumber> phoneNumber = Optional.empty();

        private Optional<ThreeDsCardholderPhoneNumber> mobilePhoneNumber = Optional.empty();

        private Optional<ThreeDsCardholderPhoneNumber> workPhoneNumber = Optional.empty();

        private Optional<String> billingShippingAddressMatch = Optional.empty();

        private Optional<ThreeDsAddress> billingAddress = Optional.empty();

        private Optional<ThreeDsAddress> shippingAddress = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ThreeDsCardholderInfo other) {
            accountId(other.getAccountId());
            accountType(other.getAccountType());
            accountInfo(other.getAccountInfo());
            authenticationInfo(other.getAuthenticationInfo());
            priorAuthenticationInfo(other.getPriorAuthenticationInfo());
            name(other.getName());
            email(other.getEmail());
            phoneNumber(other.getPhoneNumber());
            mobilePhoneNumber(other.getMobilePhoneNumber());
            workPhoneNumber(other.getWorkPhoneNumber());
            billingShippingAddressMatch(other.getBillingShippingAddressMatch());
            billingAddress(other.getBillingAddress());
            shippingAddress(other.getShippingAddress());
            return this;
        }

        @JsonSetter(value = "account_id", nulls = Nulls.SKIP)
        public Builder accountId(Optional<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            this.accountId = Optional.ofNullable(accountId);
            return this;
        }

        @JsonSetter(value = "account_type", nulls = Nulls.SKIP)
        public Builder accountType(Optional<String> accountType) {
            this.accountType = accountType;
            return this;
        }

        public Builder accountType(String accountType) {
            this.accountType = Optional.ofNullable(accountType);
            return this;
        }

        @JsonSetter(value = "account_info", nulls = Nulls.SKIP)
        public Builder accountInfo(Optional<ThreeDsCardholderAccountInfo> accountInfo) {
            this.accountInfo = accountInfo;
            return this;
        }

        public Builder accountInfo(ThreeDsCardholderAccountInfo accountInfo) {
            this.accountInfo = Optional.ofNullable(accountInfo);
            return this;
        }

        @JsonSetter(value = "authentication_info", nulls = Nulls.SKIP)
        public Builder authenticationInfo(Optional<ThreeDsCardholderAuthenticationInfo> authenticationInfo) {
            this.authenticationInfo = authenticationInfo;
            return this;
        }

        public Builder authenticationInfo(ThreeDsCardholderAuthenticationInfo authenticationInfo) {
            this.authenticationInfo = Optional.ofNullable(authenticationInfo);
            return this;
        }

        @JsonSetter(value = "prior_authentication_info", nulls = Nulls.SKIP)
        public Builder priorAuthenticationInfo(Optional<ThreeDsPriorAuthenticationInfo> priorAuthenticationInfo) {
            this.priorAuthenticationInfo = priorAuthenticationInfo;
            return this;
        }

        public Builder priorAuthenticationInfo(ThreeDsPriorAuthenticationInfo priorAuthenticationInfo) {
            this.priorAuthenticationInfo = Optional.ofNullable(priorAuthenticationInfo);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        @JsonSetter(value = "phone_number", nulls = Nulls.SKIP)
        public Builder phoneNumber(Optional<ThreeDsCardholderPhoneNumber> phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }

        public Builder phoneNumber(ThreeDsCardholderPhoneNumber phoneNumber) {
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        @JsonSetter(value = "mobile_phone_number", nulls = Nulls.SKIP)
        public Builder mobilePhoneNumber(Optional<ThreeDsCardholderPhoneNumber> mobilePhoneNumber) {
            this.mobilePhoneNumber = mobilePhoneNumber;
            return this;
        }

        public Builder mobilePhoneNumber(ThreeDsCardholderPhoneNumber mobilePhoneNumber) {
            this.mobilePhoneNumber = Optional.ofNullable(mobilePhoneNumber);
            return this;
        }

        @JsonSetter(value = "work_phone_number", nulls = Nulls.SKIP)
        public Builder workPhoneNumber(Optional<ThreeDsCardholderPhoneNumber> workPhoneNumber) {
            this.workPhoneNumber = workPhoneNumber;
            return this;
        }

        public Builder workPhoneNumber(ThreeDsCardholderPhoneNumber workPhoneNumber) {
            this.workPhoneNumber = Optional.ofNullable(workPhoneNumber);
            return this;
        }

        @JsonSetter(value = "billing_shipping_address_match", nulls = Nulls.SKIP)
        public Builder billingShippingAddressMatch(Optional<String> billingShippingAddressMatch) {
            this.billingShippingAddressMatch = billingShippingAddressMatch;
            return this;
        }

        public Builder billingShippingAddressMatch(String billingShippingAddressMatch) {
            this.billingShippingAddressMatch = Optional.ofNullable(billingShippingAddressMatch);
            return this;
        }

        @JsonSetter(value = "billing_address", nulls = Nulls.SKIP)
        public Builder billingAddress(Optional<ThreeDsAddress> billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }

        public Builder billingAddress(ThreeDsAddress billingAddress) {
            this.billingAddress = Optional.ofNullable(billingAddress);
            return this;
        }

        @JsonSetter(value = "shipping_address", nulls = Nulls.SKIP)
        public Builder shippingAddress(Optional<ThreeDsAddress> shippingAddress) {
            this.shippingAddress = shippingAddress;
            return this;
        }

        public Builder shippingAddress(ThreeDsAddress shippingAddress) {
            this.shippingAddress = Optional.ofNullable(shippingAddress);
            return this;
        }

        public ThreeDsCardholderInfo build() {
            return new ThreeDsCardholderInfo(
                    accountId,
                    accountType,
                    accountInfo,
                    authenticationInfo,
                    priorAuthenticationInfo,
                    name,
                    email,
                    phoneNumber,
                    mobilePhoneNumber,
                    workPhoneNumber,
                    billingShippingAddressMatch,
                    billingAddress,
                    shippingAddress,
                    additionalProperties);
        }
    }
}
