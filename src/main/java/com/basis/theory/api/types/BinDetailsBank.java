/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basis.theory.api.types;

import com.basis.theory.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BinDetailsBank.Builder.class)
public final class BinDetailsBank {
    private final Optional<String> name;

    private final Optional<String> phone;

    private final Optional<String> url;

    private final Optional<String> cleanName;

    private final Map<String, Object> additionalProperties;

    private BinDetailsBank(
            Optional<String> name,
            Optional<String> phone,
            Optional<String> url,
            Optional<String> cleanName,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.phone = phone;
        this.url = url;
        this.cleanName = cleanName;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("phone")
    public Optional<String> getPhone() {
        return phone;
    }

    @JsonProperty("url")
    public Optional<String> getUrl() {
        return url;
    }

    @JsonProperty("clean_name")
    public Optional<String> getCleanName() {
        return cleanName;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BinDetailsBank && equalTo((BinDetailsBank) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BinDetailsBank other) {
        return name.equals(other.name)
                && phone.equals(other.phone)
                && url.equals(other.url)
                && cleanName.equals(other.cleanName);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.phone, this.url, this.cleanName);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<String> phone = Optional.empty();

        private Optional<String> url = Optional.empty();

        private Optional<String> cleanName = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BinDetailsBank other) {
            name(other.getName());
            phone(other.getPhone());
            url(other.getUrl());
            cleanName(other.getCleanName());
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "phone", nulls = Nulls.SKIP)
        public Builder phone(Optional<String> phone) {
            this.phone = phone;
            return this;
        }

        public Builder phone(String phone) {
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        @JsonSetter(value = "url", nulls = Nulls.SKIP)
        public Builder url(Optional<String> url) {
            this.url = url;
            return this;
        }

        public Builder url(String url) {
            this.url = Optional.ofNullable(url);
            return this;
        }

        @JsonSetter(value = "clean_name", nulls = Nulls.SKIP)
        public Builder cleanName(Optional<String> cleanName) {
            this.cleanName = cleanName;
            return this;
        }

        public Builder cleanName(String cleanName) {
            this.cleanName = Optional.ofNullable(cleanName);
            return this;
        }

        public BinDetailsBank build() {
            return new BinDetailsBank(name, phone, url, cleanName, additionalProperties);
        }
    }
}
