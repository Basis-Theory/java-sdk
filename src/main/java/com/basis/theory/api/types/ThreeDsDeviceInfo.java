/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basis.theory.api.types;

import com.basis.theory.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ThreeDsDeviceInfo.Builder.class)
public final class ThreeDsDeviceInfo {
    private final Optional<String> browserAcceptHeader;

    private final Optional<String> browserIp;

    private final Optional<Boolean> browserJavascriptEnabled;

    private final Optional<Boolean> browserJavaEnabled;

    private final Optional<String> browserLanguage;

    private final Optional<String> browserColorDepth;

    private final Optional<String> browserScreenHeight;

    private final Optional<String> browserScreenWidth;

    private final Optional<String> browserTz;

    private final Optional<String> browserUserAgent;

    private final Optional<String> sdkTransactionId;

    private final Optional<String> sdkApplicationId;

    private final Optional<String> sdkEncryptionData;

    private final Optional<String> sdkEphemeralPublicKey;

    private final Optional<String> sdkMaxTimeout;

    private final Optional<String> sdkReferenceNumber;

    private final Optional<ThreeDsMobileSdkRenderOptions> sdkRenderOptions;

    private final Map<String, Object> additionalProperties;

    private ThreeDsDeviceInfo(
            Optional<String> browserAcceptHeader,
            Optional<String> browserIp,
            Optional<Boolean> browserJavascriptEnabled,
            Optional<Boolean> browserJavaEnabled,
            Optional<String> browserLanguage,
            Optional<String> browserColorDepth,
            Optional<String> browserScreenHeight,
            Optional<String> browserScreenWidth,
            Optional<String> browserTz,
            Optional<String> browserUserAgent,
            Optional<String> sdkTransactionId,
            Optional<String> sdkApplicationId,
            Optional<String> sdkEncryptionData,
            Optional<String> sdkEphemeralPublicKey,
            Optional<String> sdkMaxTimeout,
            Optional<String> sdkReferenceNumber,
            Optional<ThreeDsMobileSdkRenderOptions> sdkRenderOptions,
            Map<String, Object> additionalProperties) {
        this.browserAcceptHeader = browserAcceptHeader;
        this.browserIp = browserIp;
        this.browserJavascriptEnabled = browserJavascriptEnabled;
        this.browserJavaEnabled = browserJavaEnabled;
        this.browserLanguage = browserLanguage;
        this.browserColorDepth = browserColorDepth;
        this.browserScreenHeight = browserScreenHeight;
        this.browserScreenWidth = browserScreenWidth;
        this.browserTz = browserTz;
        this.browserUserAgent = browserUserAgent;
        this.sdkTransactionId = sdkTransactionId;
        this.sdkApplicationId = sdkApplicationId;
        this.sdkEncryptionData = sdkEncryptionData;
        this.sdkEphemeralPublicKey = sdkEphemeralPublicKey;
        this.sdkMaxTimeout = sdkMaxTimeout;
        this.sdkReferenceNumber = sdkReferenceNumber;
        this.sdkRenderOptions = sdkRenderOptions;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("browser_accept_header")
    public Optional<String> getBrowserAcceptHeader() {
        return browserAcceptHeader;
    }

    @JsonProperty("browser_ip")
    public Optional<String> getBrowserIp() {
        return browserIp;
    }

    @JsonProperty("browser_javascript_enabled")
    public Optional<Boolean> getBrowserJavascriptEnabled() {
        return browserJavascriptEnabled;
    }

    @JsonProperty("browser_java_enabled")
    public Optional<Boolean> getBrowserJavaEnabled() {
        return browserJavaEnabled;
    }

    @JsonProperty("browser_language")
    public Optional<String> getBrowserLanguage() {
        return browserLanguage;
    }

    @JsonProperty("browser_color_depth")
    public Optional<String> getBrowserColorDepth() {
        return browserColorDepth;
    }

    @JsonProperty("browser_screen_height")
    public Optional<String> getBrowserScreenHeight() {
        return browserScreenHeight;
    }

    @JsonProperty("browser_screen_width")
    public Optional<String> getBrowserScreenWidth() {
        return browserScreenWidth;
    }

    @JsonProperty("browser_tz")
    public Optional<String> getBrowserTz() {
        return browserTz;
    }

    @JsonProperty("browser_user_agent")
    public Optional<String> getBrowserUserAgent() {
        return browserUserAgent;
    }

    @JsonProperty("sdk_transaction_id")
    public Optional<String> getSdkTransactionId() {
        return sdkTransactionId;
    }

    @JsonProperty("sdk_application_id")
    public Optional<String> getSdkApplicationId() {
        return sdkApplicationId;
    }

    @JsonProperty("sdk_encryption_data")
    public Optional<String> getSdkEncryptionData() {
        return sdkEncryptionData;
    }

    @JsonProperty("sdk_ephemeral_public_key")
    public Optional<String> getSdkEphemeralPublicKey() {
        return sdkEphemeralPublicKey;
    }

    @JsonProperty("sdk_max_timeout")
    public Optional<String> getSdkMaxTimeout() {
        return sdkMaxTimeout;
    }

    @JsonProperty("sdk_reference_number")
    public Optional<String> getSdkReferenceNumber() {
        return sdkReferenceNumber;
    }

    @JsonProperty("sdk_render_options")
    public Optional<ThreeDsMobileSdkRenderOptions> getSdkRenderOptions() {
        return sdkRenderOptions;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ThreeDsDeviceInfo && equalTo((ThreeDsDeviceInfo) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ThreeDsDeviceInfo other) {
        return browserAcceptHeader.equals(other.browserAcceptHeader)
                && browserIp.equals(other.browserIp)
                && browserJavascriptEnabled.equals(other.browserJavascriptEnabled)
                && browserJavaEnabled.equals(other.browserJavaEnabled)
                && browserLanguage.equals(other.browserLanguage)
                && browserColorDepth.equals(other.browserColorDepth)
                && browserScreenHeight.equals(other.browserScreenHeight)
                && browserScreenWidth.equals(other.browserScreenWidth)
                && browserTz.equals(other.browserTz)
                && browserUserAgent.equals(other.browserUserAgent)
                && sdkTransactionId.equals(other.sdkTransactionId)
                && sdkApplicationId.equals(other.sdkApplicationId)
                && sdkEncryptionData.equals(other.sdkEncryptionData)
                && sdkEphemeralPublicKey.equals(other.sdkEphemeralPublicKey)
                && sdkMaxTimeout.equals(other.sdkMaxTimeout)
                && sdkReferenceNumber.equals(other.sdkReferenceNumber)
                && sdkRenderOptions.equals(other.sdkRenderOptions);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.browserAcceptHeader,
                this.browserIp,
                this.browserJavascriptEnabled,
                this.browserJavaEnabled,
                this.browserLanguage,
                this.browserColorDepth,
                this.browserScreenHeight,
                this.browserScreenWidth,
                this.browserTz,
                this.browserUserAgent,
                this.sdkTransactionId,
                this.sdkApplicationId,
                this.sdkEncryptionData,
                this.sdkEphemeralPublicKey,
                this.sdkMaxTimeout,
                this.sdkReferenceNumber,
                this.sdkRenderOptions);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> browserAcceptHeader = Optional.empty();

        private Optional<String> browserIp = Optional.empty();

        private Optional<Boolean> browserJavascriptEnabled = Optional.empty();

        private Optional<Boolean> browserJavaEnabled = Optional.empty();

        private Optional<String> browserLanguage = Optional.empty();

        private Optional<String> browserColorDepth = Optional.empty();

        private Optional<String> browserScreenHeight = Optional.empty();

        private Optional<String> browserScreenWidth = Optional.empty();

        private Optional<String> browserTz = Optional.empty();

        private Optional<String> browserUserAgent = Optional.empty();

        private Optional<String> sdkTransactionId = Optional.empty();

        private Optional<String> sdkApplicationId = Optional.empty();

        private Optional<String> sdkEncryptionData = Optional.empty();

        private Optional<String> sdkEphemeralPublicKey = Optional.empty();

        private Optional<String> sdkMaxTimeout = Optional.empty();

        private Optional<String> sdkReferenceNumber = Optional.empty();

        private Optional<ThreeDsMobileSdkRenderOptions> sdkRenderOptions = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ThreeDsDeviceInfo other) {
            browserAcceptHeader(other.getBrowserAcceptHeader());
            browserIp(other.getBrowserIp());
            browserJavascriptEnabled(other.getBrowserJavascriptEnabled());
            browserJavaEnabled(other.getBrowserJavaEnabled());
            browserLanguage(other.getBrowserLanguage());
            browserColorDepth(other.getBrowserColorDepth());
            browserScreenHeight(other.getBrowserScreenHeight());
            browserScreenWidth(other.getBrowserScreenWidth());
            browserTz(other.getBrowserTz());
            browserUserAgent(other.getBrowserUserAgent());
            sdkTransactionId(other.getSdkTransactionId());
            sdkApplicationId(other.getSdkApplicationId());
            sdkEncryptionData(other.getSdkEncryptionData());
            sdkEphemeralPublicKey(other.getSdkEphemeralPublicKey());
            sdkMaxTimeout(other.getSdkMaxTimeout());
            sdkReferenceNumber(other.getSdkReferenceNumber());
            sdkRenderOptions(other.getSdkRenderOptions());
            return this;
        }

        @JsonSetter(value = "browser_accept_header", nulls = Nulls.SKIP)
        public Builder browserAcceptHeader(Optional<String> browserAcceptHeader) {
            this.browserAcceptHeader = browserAcceptHeader;
            return this;
        }

        public Builder browserAcceptHeader(String browserAcceptHeader) {
            this.browserAcceptHeader = Optional.ofNullable(browserAcceptHeader);
            return this;
        }

        @JsonSetter(value = "browser_ip", nulls = Nulls.SKIP)
        public Builder browserIp(Optional<String> browserIp) {
            this.browserIp = browserIp;
            return this;
        }

        public Builder browserIp(String browserIp) {
            this.browserIp = Optional.ofNullable(browserIp);
            return this;
        }

        @JsonSetter(value = "browser_javascript_enabled", nulls = Nulls.SKIP)
        public Builder browserJavascriptEnabled(Optional<Boolean> browserJavascriptEnabled) {
            this.browserJavascriptEnabled = browserJavascriptEnabled;
            return this;
        }

        public Builder browserJavascriptEnabled(Boolean browserJavascriptEnabled) {
            this.browserJavascriptEnabled = Optional.ofNullable(browserJavascriptEnabled);
            return this;
        }

        @JsonSetter(value = "browser_java_enabled", nulls = Nulls.SKIP)
        public Builder browserJavaEnabled(Optional<Boolean> browserJavaEnabled) {
            this.browserJavaEnabled = browserJavaEnabled;
            return this;
        }

        public Builder browserJavaEnabled(Boolean browserJavaEnabled) {
            this.browserJavaEnabled = Optional.ofNullable(browserJavaEnabled);
            return this;
        }

        @JsonSetter(value = "browser_language", nulls = Nulls.SKIP)
        public Builder browserLanguage(Optional<String> browserLanguage) {
            this.browserLanguage = browserLanguage;
            return this;
        }

        public Builder browserLanguage(String browserLanguage) {
            this.browserLanguage = Optional.ofNullable(browserLanguage);
            return this;
        }

        @JsonSetter(value = "browser_color_depth", nulls = Nulls.SKIP)
        public Builder browserColorDepth(Optional<String> browserColorDepth) {
            this.browserColorDepth = browserColorDepth;
            return this;
        }

        public Builder browserColorDepth(String browserColorDepth) {
            this.browserColorDepth = Optional.ofNullable(browserColorDepth);
            return this;
        }

        @JsonSetter(value = "browser_screen_height", nulls = Nulls.SKIP)
        public Builder browserScreenHeight(Optional<String> browserScreenHeight) {
            this.browserScreenHeight = browserScreenHeight;
            return this;
        }

        public Builder browserScreenHeight(String browserScreenHeight) {
            this.browserScreenHeight = Optional.ofNullable(browserScreenHeight);
            return this;
        }

        @JsonSetter(value = "browser_screen_width", nulls = Nulls.SKIP)
        public Builder browserScreenWidth(Optional<String> browserScreenWidth) {
            this.browserScreenWidth = browserScreenWidth;
            return this;
        }

        public Builder browserScreenWidth(String browserScreenWidth) {
            this.browserScreenWidth = Optional.ofNullable(browserScreenWidth);
            return this;
        }

        @JsonSetter(value = "browser_tz", nulls = Nulls.SKIP)
        public Builder browserTz(Optional<String> browserTz) {
            this.browserTz = browserTz;
            return this;
        }

        public Builder browserTz(String browserTz) {
            this.browserTz = Optional.ofNullable(browserTz);
            return this;
        }

        @JsonSetter(value = "browser_user_agent", nulls = Nulls.SKIP)
        public Builder browserUserAgent(Optional<String> browserUserAgent) {
            this.browserUserAgent = browserUserAgent;
            return this;
        }

        public Builder browserUserAgent(String browserUserAgent) {
            this.browserUserAgent = Optional.ofNullable(browserUserAgent);
            return this;
        }

        @JsonSetter(value = "sdk_transaction_id", nulls = Nulls.SKIP)
        public Builder sdkTransactionId(Optional<String> sdkTransactionId) {
            this.sdkTransactionId = sdkTransactionId;
            return this;
        }

        public Builder sdkTransactionId(String sdkTransactionId) {
            this.sdkTransactionId = Optional.ofNullable(sdkTransactionId);
            return this;
        }

        @JsonSetter(value = "sdk_application_id", nulls = Nulls.SKIP)
        public Builder sdkApplicationId(Optional<String> sdkApplicationId) {
            this.sdkApplicationId = sdkApplicationId;
            return this;
        }

        public Builder sdkApplicationId(String sdkApplicationId) {
            this.sdkApplicationId = Optional.ofNullable(sdkApplicationId);
            return this;
        }

        @JsonSetter(value = "sdk_encryption_data", nulls = Nulls.SKIP)
        public Builder sdkEncryptionData(Optional<String> sdkEncryptionData) {
            this.sdkEncryptionData = sdkEncryptionData;
            return this;
        }

        public Builder sdkEncryptionData(String sdkEncryptionData) {
            this.sdkEncryptionData = Optional.ofNullable(sdkEncryptionData);
            return this;
        }

        @JsonSetter(value = "sdk_ephemeral_public_key", nulls = Nulls.SKIP)
        public Builder sdkEphemeralPublicKey(Optional<String> sdkEphemeralPublicKey) {
            this.sdkEphemeralPublicKey = sdkEphemeralPublicKey;
            return this;
        }

        public Builder sdkEphemeralPublicKey(String sdkEphemeralPublicKey) {
            this.sdkEphemeralPublicKey = Optional.ofNullable(sdkEphemeralPublicKey);
            return this;
        }

        @JsonSetter(value = "sdk_max_timeout", nulls = Nulls.SKIP)
        public Builder sdkMaxTimeout(Optional<String> sdkMaxTimeout) {
            this.sdkMaxTimeout = sdkMaxTimeout;
            return this;
        }

        public Builder sdkMaxTimeout(String sdkMaxTimeout) {
            this.sdkMaxTimeout = Optional.ofNullable(sdkMaxTimeout);
            return this;
        }

        @JsonSetter(value = "sdk_reference_number", nulls = Nulls.SKIP)
        public Builder sdkReferenceNumber(Optional<String> sdkReferenceNumber) {
            this.sdkReferenceNumber = sdkReferenceNumber;
            return this;
        }

        public Builder sdkReferenceNumber(String sdkReferenceNumber) {
            this.sdkReferenceNumber = Optional.ofNullable(sdkReferenceNumber);
            return this;
        }

        @JsonSetter(value = "sdk_render_options", nulls = Nulls.SKIP)
        public Builder sdkRenderOptions(Optional<ThreeDsMobileSdkRenderOptions> sdkRenderOptions) {
            this.sdkRenderOptions = sdkRenderOptions;
            return this;
        }

        public Builder sdkRenderOptions(ThreeDsMobileSdkRenderOptions sdkRenderOptions) {
            this.sdkRenderOptions = Optional.ofNullable(sdkRenderOptions);
            return this;
        }

        public ThreeDsDeviceInfo build() {
            return new ThreeDsDeviceInfo(
                    browserAcceptHeader,
                    browserIp,
                    browserJavascriptEnabled,
                    browserJavaEnabled,
                    browserLanguage,
                    browserColorDepth,
                    browserScreenHeight,
                    browserScreenWidth,
                    browserTz,
                    browserUserAgent,
                    sdkTransactionId,
                    sdkApplicationId,
                    sdkEncryptionData,
                    sdkEphemeralPublicKey,
                    sdkMaxTimeout,
                    sdkReferenceNumber,
                    sdkRenderOptions,
                    additionalProperties);
        }
    }
}
