/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basis.theory.api.types;

import com.basis.theory.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ThreeDsMerchantRiskInfo.Builder.class)
public final class ThreeDsMerchantRiskInfo {
    private final Optional<String> deliveryEmail;

    private final Optional<String> deliveryTimeFrame;

    private final Optional<String> giftCardAmount;

    private final Optional<String> giftCardCount;

    private final Optional<String> giftCardCurrency;

    private final Optional<Boolean> preOrderPurchase;

    private final Optional<String> preOrderDate;

    private final Optional<Boolean> reorderedPurchase;

    private final Optional<String> shippingMethod;

    private final Map<String, Object> additionalProperties;

    private ThreeDsMerchantRiskInfo(
            Optional<String> deliveryEmail,
            Optional<String> deliveryTimeFrame,
            Optional<String> giftCardAmount,
            Optional<String> giftCardCount,
            Optional<String> giftCardCurrency,
            Optional<Boolean> preOrderPurchase,
            Optional<String> preOrderDate,
            Optional<Boolean> reorderedPurchase,
            Optional<String> shippingMethod,
            Map<String, Object> additionalProperties) {
        this.deliveryEmail = deliveryEmail;
        this.deliveryTimeFrame = deliveryTimeFrame;
        this.giftCardAmount = giftCardAmount;
        this.giftCardCount = giftCardCount;
        this.giftCardCurrency = giftCardCurrency;
        this.preOrderPurchase = preOrderPurchase;
        this.preOrderDate = preOrderDate;
        this.reorderedPurchase = reorderedPurchase;
        this.shippingMethod = shippingMethod;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("delivery_email")
    public Optional<String> getDeliveryEmail() {
        return deliveryEmail;
    }

    @JsonProperty("delivery_time_frame")
    public Optional<String> getDeliveryTimeFrame() {
        return deliveryTimeFrame;
    }

    @JsonProperty("gift_card_amount")
    public Optional<String> getGiftCardAmount() {
        return giftCardAmount;
    }

    @JsonProperty("gift_card_count")
    public Optional<String> getGiftCardCount() {
        return giftCardCount;
    }

    @JsonProperty("gift_card_currency")
    public Optional<String> getGiftCardCurrency() {
        return giftCardCurrency;
    }

    @JsonProperty("pre_order_purchase")
    public Optional<Boolean> getPreOrderPurchase() {
        return preOrderPurchase;
    }

    @JsonProperty("pre_order_date")
    public Optional<String> getPreOrderDate() {
        return preOrderDate;
    }

    @JsonProperty("reordered_purchase")
    public Optional<Boolean> getReorderedPurchase() {
        return reorderedPurchase;
    }

    @JsonProperty("shipping_method")
    public Optional<String> getShippingMethod() {
        return shippingMethod;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ThreeDsMerchantRiskInfo && equalTo((ThreeDsMerchantRiskInfo) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ThreeDsMerchantRiskInfo other) {
        return deliveryEmail.equals(other.deliveryEmail)
                && deliveryTimeFrame.equals(other.deliveryTimeFrame)
                && giftCardAmount.equals(other.giftCardAmount)
                && giftCardCount.equals(other.giftCardCount)
                && giftCardCurrency.equals(other.giftCardCurrency)
                && preOrderPurchase.equals(other.preOrderPurchase)
                && preOrderDate.equals(other.preOrderDate)
                && reorderedPurchase.equals(other.reorderedPurchase)
                && shippingMethod.equals(other.shippingMethod);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.deliveryEmail,
                this.deliveryTimeFrame,
                this.giftCardAmount,
                this.giftCardCount,
                this.giftCardCurrency,
                this.preOrderPurchase,
                this.preOrderDate,
                this.reorderedPurchase,
                this.shippingMethod);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> deliveryEmail = Optional.empty();

        private Optional<String> deliveryTimeFrame = Optional.empty();

        private Optional<String> giftCardAmount = Optional.empty();

        private Optional<String> giftCardCount = Optional.empty();

        private Optional<String> giftCardCurrency = Optional.empty();

        private Optional<Boolean> preOrderPurchase = Optional.empty();

        private Optional<String> preOrderDate = Optional.empty();

        private Optional<Boolean> reorderedPurchase = Optional.empty();

        private Optional<String> shippingMethod = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ThreeDsMerchantRiskInfo other) {
            deliveryEmail(other.getDeliveryEmail());
            deliveryTimeFrame(other.getDeliveryTimeFrame());
            giftCardAmount(other.getGiftCardAmount());
            giftCardCount(other.getGiftCardCount());
            giftCardCurrency(other.getGiftCardCurrency());
            preOrderPurchase(other.getPreOrderPurchase());
            preOrderDate(other.getPreOrderDate());
            reorderedPurchase(other.getReorderedPurchase());
            shippingMethod(other.getShippingMethod());
            return this;
        }

        @JsonSetter(value = "delivery_email", nulls = Nulls.SKIP)
        public Builder deliveryEmail(Optional<String> deliveryEmail) {
            this.deliveryEmail = deliveryEmail;
            return this;
        }

        public Builder deliveryEmail(String deliveryEmail) {
            this.deliveryEmail = Optional.ofNullable(deliveryEmail);
            return this;
        }

        @JsonSetter(value = "delivery_time_frame", nulls = Nulls.SKIP)
        public Builder deliveryTimeFrame(Optional<String> deliveryTimeFrame) {
            this.deliveryTimeFrame = deliveryTimeFrame;
            return this;
        }

        public Builder deliveryTimeFrame(String deliveryTimeFrame) {
            this.deliveryTimeFrame = Optional.ofNullable(deliveryTimeFrame);
            return this;
        }

        @JsonSetter(value = "gift_card_amount", nulls = Nulls.SKIP)
        public Builder giftCardAmount(Optional<String> giftCardAmount) {
            this.giftCardAmount = giftCardAmount;
            return this;
        }

        public Builder giftCardAmount(String giftCardAmount) {
            this.giftCardAmount = Optional.ofNullable(giftCardAmount);
            return this;
        }

        @JsonSetter(value = "gift_card_count", nulls = Nulls.SKIP)
        public Builder giftCardCount(Optional<String> giftCardCount) {
            this.giftCardCount = giftCardCount;
            return this;
        }

        public Builder giftCardCount(String giftCardCount) {
            this.giftCardCount = Optional.ofNullable(giftCardCount);
            return this;
        }

        @JsonSetter(value = "gift_card_currency", nulls = Nulls.SKIP)
        public Builder giftCardCurrency(Optional<String> giftCardCurrency) {
            this.giftCardCurrency = giftCardCurrency;
            return this;
        }

        public Builder giftCardCurrency(String giftCardCurrency) {
            this.giftCardCurrency = Optional.ofNullable(giftCardCurrency);
            return this;
        }

        @JsonSetter(value = "pre_order_purchase", nulls = Nulls.SKIP)
        public Builder preOrderPurchase(Optional<Boolean> preOrderPurchase) {
            this.preOrderPurchase = preOrderPurchase;
            return this;
        }

        public Builder preOrderPurchase(Boolean preOrderPurchase) {
            this.preOrderPurchase = Optional.ofNullable(preOrderPurchase);
            return this;
        }

        @JsonSetter(value = "pre_order_date", nulls = Nulls.SKIP)
        public Builder preOrderDate(Optional<String> preOrderDate) {
            this.preOrderDate = preOrderDate;
            return this;
        }

        public Builder preOrderDate(String preOrderDate) {
            this.preOrderDate = Optional.ofNullable(preOrderDate);
            return this;
        }

        @JsonSetter(value = "reordered_purchase", nulls = Nulls.SKIP)
        public Builder reorderedPurchase(Optional<Boolean> reorderedPurchase) {
            this.reorderedPurchase = reorderedPurchase;
            return this;
        }

        public Builder reorderedPurchase(Boolean reorderedPurchase) {
            this.reorderedPurchase = Optional.ofNullable(reorderedPurchase);
            return this;
        }

        @JsonSetter(value = "shipping_method", nulls = Nulls.SKIP)
        public Builder shippingMethod(Optional<String> shippingMethod) {
            this.shippingMethod = shippingMethod;
            return this;
        }

        public Builder shippingMethod(String shippingMethod) {
            this.shippingMethod = Optional.ofNullable(shippingMethod);
            return this;
        }

        public ThreeDsMerchantRiskInfo build() {
            return new ThreeDsMerchantRiskInfo(
                    deliveryEmail,
                    deliveryTimeFrame,
                    giftCardAmount,
                    giftCardCount,
                    giftCardCurrency,
                    preOrderPurchase,
                    preOrderDate,
                    reorderedPurchase,
                    shippingMethod,
                    additionalProperties);
        }
    }
}
