/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.basis.theory.api.types;

import com.basis.theory.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApplicationTemplate.Builder.class)
public final class ApplicationTemplate {
    private final Optional<String> id;

    private final Optional<String> name;

    private final Optional<String> description;

    private final Optional<String> applicationType;

    private final Optional<String> templateType;

    private final Optional<Boolean> isStarter;

    private final Optional<List<AccessRule>> rules;

    private final Optional<List<String>> permissions;

    private final Map<String, Object> additionalProperties;

    private ApplicationTemplate(
            Optional<String> id,
            Optional<String> name,
            Optional<String> description,
            Optional<String> applicationType,
            Optional<String> templateType,
            Optional<Boolean> isStarter,
            Optional<List<AccessRule>> rules,
            Optional<List<String>> permissions,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.applicationType = applicationType;
        this.templateType = templateType;
        this.isStarter = isStarter;
        this.rules = rules;
        this.permissions = permissions;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @JsonProperty("application_type")
    public Optional<String> getApplicationType() {
        return applicationType;
    }

    @JsonProperty("template_type")
    public Optional<String> getTemplateType() {
        return templateType;
    }

    @JsonProperty("is_starter")
    public Optional<Boolean> getIsStarter() {
        return isStarter;
    }

    @JsonProperty("rules")
    public Optional<List<AccessRule>> getRules() {
        return rules;
    }

    @JsonProperty("permissions")
    public Optional<List<String>> getPermissions() {
        return permissions;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApplicationTemplate && equalTo((ApplicationTemplate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApplicationTemplate other) {
        return id.equals(other.id)
                && name.equals(other.name)
                && description.equals(other.description)
                && applicationType.equals(other.applicationType)
                && templateType.equals(other.templateType)
                && isStarter.equals(other.isStarter)
                && rules.equals(other.rules)
                && permissions.equals(other.permissions);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.name,
                this.description,
                this.applicationType,
                this.templateType,
                this.isStarter,
                this.rules,
                this.permissions);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> applicationType = Optional.empty();

        private Optional<String> templateType = Optional.empty();

        private Optional<Boolean> isStarter = Optional.empty();

        private Optional<List<AccessRule>> rules = Optional.empty();

        private Optional<List<String>> permissions = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ApplicationTemplate other) {
            id(other.getId());
            name(other.getName());
            description(other.getDescription());
            applicationType(other.getApplicationType());
            templateType(other.getTemplateType());
            isStarter(other.getIsStarter());
            rules(other.getRules());
            permissions(other.getPermissions());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @JsonSetter(value = "application_type", nulls = Nulls.SKIP)
        public Builder applicationType(Optional<String> applicationType) {
            this.applicationType = applicationType;
            return this;
        }

        public Builder applicationType(String applicationType) {
            this.applicationType = Optional.ofNullable(applicationType);
            return this;
        }

        @JsonSetter(value = "template_type", nulls = Nulls.SKIP)
        public Builder templateType(Optional<String> templateType) {
            this.templateType = templateType;
            return this;
        }

        public Builder templateType(String templateType) {
            this.templateType = Optional.ofNullable(templateType);
            return this;
        }

        @JsonSetter(value = "is_starter", nulls = Nulls.SKIP)
        public Builder isStarter(Optional<Boolean> isStarter) {
            this.isStarter = isStarter;
            return this;
        }

        public Builder isStarter(Boolean isStarter) {
            this.isStarter = Optional.ofNullable(isStarter);
            return this;
        }

        @JsonSetter(value = "rules", nulls = Nulls.SKIP)
        public Builder rules(Optional<List<AccessRule>> rules) {
            this.rules = rules;
            return this;
        }

        public Builder rules(List<AccessRule> rules) {
            this.rules = Optional.ofNullable(rules);
            return this;
        }

        @JsonSetter(value = "permissions", nulls = Nulls.SKIP)
        public Builder permissions(Optional<List<String>> permissions) {
            this.permissions = permissions;
            return this;
        }

        public Builder permissions(List<String> permissions) {
            this.permissions = Optional.ofNullable(permissions);
            return this;
        }

        public ApplicationTemplate build() {
            return new ApplicationTemplate(
                    id,
                    name,
                    description,
                    applicationType,
                    templateType,
                    isStarter,
                    rules,
                    permissions,
                    additionalProperties);
        }
    }
}
